<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="38401"><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0156%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0208%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8"/><text x="0.2500%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,252 samples, 3.26%)</title><rect x="8.4008%" y="213" width="3.2603%" height="15" fill="rgb(221,193,54)" fg:x="3226" fg:w="1252"/><text x="8.6508%" y="223.50">&lt;co..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (503 samples, 1.31%)</title><rect x="10.3513%" y="197" width="1.3099%" height="15" fill="rgb(248,212,6)" fg:x="3975" fg:w="503"/><text x="10.6013%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (788 samples, 2.05%)</title><rect x="11.6612%" y="213" width="2.0520%" height="15" fill="rgb(208,68,35)" fg:x="4478" fg:w="788"/><text x="11.9112%" y="223.50">&lt;..</text></g><g><title>rs_1brc::main::_{{closure}} (788 samples, 2.05%)</title><rect x="11.6612%" y="197" width="2.0520%" height="15" fill="rgb(232,128,0)" fg:x="4478" fg:w="788"/><text x="11.9112%" y="207.50">r..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (3,827 samples, 9.97%)</title><rect x="3.7499%" y="229" width="9.9659%" height="15" fill="rgb(207,160,47)" fg:x="1440" fg:w="3827"/><text x="3.9999%" y="239.50">&lt;core::slice::..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,266 samples, 13.71%)</title><rect x="2.8723%" y="245" width="13.7132%" height="15" fill="rgb(228,23,34)" fg:x="1103" fg:w="5266"/><text x="3.1223%" y="255.50">&lt;core::slice::iter::S..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1,102 samples, 2.87%)</title><rect x="13.7158%" y="229" width="2.8697%" height="15" fill="rgb(218,30,26)" fg:x="5267" fg:w="1102"/><text x="13.9658%" y="239.50">co..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,102 samples, 2.87%)</title><rect x="13.7158%" y="213" width="2.8697%" height="15" fill="rgb(220,122,19)" fg:x="5267" fg:w="1102"/><text x="13.9658%" y="223.50">&lt;c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,102 samples, 2.87%)</title><rect x="13.7158%" y="197" width="2.8697%" height="15" fill="rgb(250,228,42)" fg:x="5267" fg:w="1102"/><text x="13.9658%" y="207.50">&lt;c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,102 samples, 2.87%)</title><rect x="13.7158%" y="181" width="2.8697%" height="15" fill="rgb(240,193,28)" fg:x="5267" fg:w="1102"/><text x="13.9658%" y="191.50">co..</text></g><g><title>read (8 samples, 0.02%)</title><rect x="16.6063%" y="213" width="0.0208%" height="15" fill="rgb(216,20,37)" fg:x="6377" fg:w="8"/><text x="16.8563%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="16.6168%" y="197" width="0.0104%" height="15" fill="rgb(206,188,39)" fg:x="6381" fg:w="4"/><text x="16.8668%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="16.6168%" y="181" width="0.0104%" height="15" fill="rgb(217,207,13)" fg:x="6381" fg:w="4"/><text x="16.8668%" y="191.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (16 samples, 0.04%)</title><rect x="16.5881%" y="245" width="0.0417%" height="15" fill="rgb(231,73,38)" fg:x="6370" fg:w="16"/><text x="16.8381%" y="255.50"></text></g><g><title>std::io::default_read_to_end (15 samples, 0.04%)</title><rect x="16.5907%" y="229" width="0.0391%" height="15" fill="rgb(225,20,46)" fg:x="6371" fg:w="15"/><text x="16.8407%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (970 samples, 2.53%)</title><rect x="20.9448%" y="181" width="2.5260%" height="15" fill="rgb(210,31,41)" fg:x="8043" fg:w="970"/><text x="21.1948%" y="191.50">&lt;c..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (777 samples, 2.02%)</title><rect x="21.4474%" y="165" width="2.0234%" height="15" fill="rgb(221,200,47)" fg:x="8236" fg:w="777"/><text x="21.6974%" y="175.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (3,132 samples, 8.16%)</title><rect x="19.2599%" y="197" width="8.1560%" height="15" fill="rgb(226,26,5)" fg:x="7396" fg:w="3132"/><text x="19.5099%" y="207.50">&lt;core::slic..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::_{{closure}} (1,515 samples, 3.95%)</title><rect x="23.4707%" y="181" width="3.9452%" height="15" fill="rgb(249,33,26)" fg:x="9013" fg:w="1515"/><text x="23.7207%" y="191.50">&lt;cor..</text></g><g><title>rs_1brc::read_line::_{{closure}} (1,515 samples, 3.95%)</title><rect x="23.4707%" y="165" width="3.9452%" height="15" fill="rgb(235,183,28)" fg:x="9013" fg:w="1515"/><text x="23.7207%" y="175.50">rs_1..</text></g><g><title>&lt;core::slice::iter::RSplit&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,280 samples, 11.15%)</title><rect x="16.6324%" y="229" width="11.1455%" height="15" fill="rgb(221,5,38)" fg:x="6387" fg:w="4280"/><text x="16.8824%" y="239.50">&lt;core::slice::it..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,280 samples, 11.15%)</title><rect x="16.6324%" y="213" width="11.1455%" height="15" fill="rgb(247,18,42)" fg:x="6387" fg:w="4280"/><text x="16.8824%" y="223.50">&lt;core::slice::it..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (139 samples, 0.36%)</title><rect x="27.4160%" y="197" width="0.3620%" height="15" fill="rgb(241,131,45)" fg:x="10528" fg:w="139"/><text x="27.6660%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (139 samples, 0.36%)</title><rect x="27.4160%" y="181" width="0.3620%" height="15" fill="rgb(249,31,29)" fg:x="10528" fg:w="139"/><text x="27.6660%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (139 samples, 0.36%)</title><rect x="27.4160%" y="165" width="0.3620%" height="15" fill="rgb(225,111,53)" fg:x="10528" fg:w="139"/><text x="27.6660%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (139 samples, 0.36%)</title><rect x="27.4160%" y="149" width="0.3620%" height="15" fill="rgb(238,160,17)" fg:x="10528" fg:w="139"/><text x="27.6660%" y="159.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (2,066 samples, 5.38%)</title><rect x="31.9757%" y="149" width="5.3801%" height="15" fill="rgb(214,148,48)" fg:x="12279" fg:w="2066"/><text x="32.2257%" y="159.50">&lt;f32 as..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (5 samples, 0.01%)</title><rect x="37.3610%" y="149" width="0.0130%" height="15" fill="rgb(232,36,49)" fg:x="14347" fg:w="5"/><text x="37.6110%" y="159.50"></text></g><g><title>fast_float::number::Number::is_fast_path (257 samples, 0.67%)</title><rect x="37.3740%" y="149" width="0.6693%" height="15" fill="rgb(209,103,24)" fg:x="14352" fg:w="257"/><text x="37.6240%" y="159.50"></text></g><g><title>fast_float::number::Number::try_fast_path (6,862 samples, 17.87%)</title><rect x="28.9550%" y="165" width="17.8693%" height="15" fill="rgb(229,88,8)" fg:x="11119" fg:w="6862"/><text x="29.2050%" y="175.50">fast_float::number::Number::..</text></g><g><title>rs_1brc::main (3,372 samples, 8.78%)</title><rect x="38.0433%" y="149" width="8.7810%" height="15" fill="rgb(213,181,19)" fg:x="14609" fg:w="3372"/><text x="38.2933%" y="159.50">rs_1brc::main</text></g><g><title>fast_float::common::AsciiStr::check_first (13 samples, 0.03%)</title><rect x="49.4701%" y="149" width="0.0339%" height="15" fill="rgb(254,191,54)" fg:x="18997" fg:w="13"/><text x="49.7201%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (9 samples, 0.02%)</title><rect x="49.4805%" y="133" width="0.0234%" height="15" fill="rgb(241,83,37)" fg:x="19001" fg:w="9"/><text x="49.7305%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::first (189 samples, 0.49%)</title><rect x="49.5117%" y="149" width="0.4922%" height="15" fill="rgb(233,36,39)" fg:x="19013" fg:w="189"/><text x="49.7617%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (5 samples, 0.01%)</title><rect x="50.0039%" y="149" width="0.0130%" height="15" fill="rgb(226,3,54)" fg:x="19202" fg:w="5"/><text x="50.2539%" y="159.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (262 samples, 0.68%)</title><rect x="50.0221%" y="149" width="0.6823%" height="15" fill="rgb(245,192,40)" fg:x="19209" fg:w="262"/><text x="50.2721%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (262 samples, 0.68%)</title><rect x="50.0221%" y="133" width="0.6823%" height="15" fill="rgb(238,167,29)" fg:x="19209" fg:w="262"/><text x="50.2721%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (256 samples, 0.67%)</title><rect x="50.0378%" y="117" width="0.6666%" height="15" fill="rgb(232,182,51)" fg:x="19215" fg:w="256"/><text x="50.2878%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.01%)</title><rect x="50.6914%" y="101" width="0.0130%" height="15" fill="rgb(231,60,39)" fg:x="19466" fg:w="5"/><text x="50.9414%" y="111.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (1,078 samples, 2.81%)</title><rect x="53.3632%" y="117" width="2.8072%" height="15" fill="rgb(208,69,12)" fg:x="20492" fg:w="1078"/><text x="53.6132%" y="127.50">co..</text></g><g><title>fast_float::common::AsciiStr::first (5 samples, 0.01%)</title><rect x="56.1704%" y="117" width="0.0130%" height="15" fill="rgb(235,93,37)" fg:x="21570" fg:w="5"/><text x="56.4204%" y="127.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (410 samples, 1.07%)</title><rect x="56.1834%" y="117" width="1.0677%" height="15" fill="rgb(213,116,39)" fg:x="21575" fg:w="410"/><text x="56.4334%" y="127.50"></text></g><g><title>fast_float::common::AsciiStr::step (226 samples, 0.59%)</title><rect x="57.2511%" y="117" width="0.5885%" height="15" fill="rgb(222,207,29)" fg:x="21985" fg:w="226"/><text x="57.5011%" y="127.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (226 samples, 0.59%)</title><rect x="57.2511%" y="101" width="0.5885%" height="15" fill="rgb(206,96,30)" fg:x="21985" fg:w="226"/><text x="57.5011%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (226 samples, 0.59%)</title><rect x="57.2511%" y="85" width="0.5885%" height="15" fill="rgb(218,138,4)" fg:x="21985" fg:w="226"/><text x="57.5011%" y="95.50"></text></g><g><title>rs_1brc::read_line (15,857 samples, 41.29%)</title><rect x="16.6298%" y="245" width="41.2932%" height="15" fill="rgb(250,191,14)" fg:x="6386" fg:w="15857"/><text x="16.8798%" y="255.50">rs_1brc::read_line</text></g><g><title>fast_float::parse (11,576 samples, 30.15%)</title><rect x="27.7779%" y="229" width="30.1450%" height="15" fill="rgb(239,60,40)" fg:x="10667" fg:w="11576"/><text x="28.0279%" y="239.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (11,576 samples, 30.15%)</title><rect x="27.7779%" y="213" width="30.1450%" height="15" fill="rgb(206,27,48)" fg:x="10667" fg:w="11576"/><text x="28.0279%" y="223.50">fast_float::FastFloat::parse_float</text></g><g><title>fast_float::FastFloat::parse_float_partial (11,576 samples, 30.15%)</title><rect x="27.7779%" y="197" width="30.1450%" height="15" fill="rgb(225,35,8)" fg:x="10667" fg:w="11576"/><text x="28.0279%" y="207.50">fast_float::FastFloat::parse_float_partial</text></g><g><title>fast_float::parse::parse_float (11,576 samples, 30.15%)</title><rect x="27.7779%" y="181" width="30.1450%" height="15" fill="rgb(250,213,24)" fg:x="10667" fg:w="11576"/><text x="28.0279%" y="191.50">fast_float::parse::parse_float</text></g><g><title>fast_float::number::parse_number (4,262 samples, 11.10%)</title><rect x="46.8243%" y="165" width="11.0987%" height="15" fill="rgb(247,123,22)" fg:x="17981" fg:w="4262"/><text x="47.0743%" y="175.50">fast_float::numb..</text></g><g><title>fast_float::number::try_parse_digits (2,772 samples, 7.22%)</title><rect x="50.7044%" y="149" width="7.2186%" height="15" fill="rgb(231,138,38)" fg:x="19471" fg:w="2772"/><text x="50.9544%" y="159.50">fast_float..</text></g><g><title>fast_float::common::AsciiStr::parse_digits (2,772 samples, 7.22%)</title><rect x="50.7044%" y="133" width="7.2186%" height="15" fill="rgb(231,145,46)" fg:x="19471" fg:w="2772"/><text x="50.9544%" y="143.50">fast_float..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (32 samples, 0.08%)</title><rect x="57.8396%" y="117" width="0.0833%" height="15" fill="rgb(251,118,11)" fg:x="22211" fg:w="32"/><text x="58.0896%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (29 samples, 0.08%)</title><rect x="57.8475%" y="101" width="0.0755%" height="15" fill="rgb(217,147,25)" fg:x="22214" fg:w="29"/><text x="58.0975%" y="111.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (587 samples, 1.53%)</title><rect x="57.9230%" y="245" width="1.5286%" height="15" fill="rgb(247,81,37)" fg:x="22243" fg:w="587"/><text x="58.1730%" y="255.50"></text></g><g><title>rs_1brc::main::_{{closure}} (587 samples, 1.53%)</title><rect x="57.9230%" y="229" width="1.5286%" height="15" fill="rgb(209,12,38)" fg:x="22243" fg:w="587"/><text x="58.1730%" y="239.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (91 samples, 0.24%)</title><rect x="62.4801%" y="133" width="0.2370%" height="15" fill="rgb(227,1,9)" fg:x="23993" fg:w="91"/><text x="62.7301%" y="143.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (91 samples, 0.24%)</title><rect x="62.4801%" y="117" width="0.2370%" height="15" fill="rgb(248,47,43)" fg:x="23993" fg:w="91"/><text x="62.7301%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (91 samples, 0.24%)</title><rect x="62.4801%" y="101" width="0.2370%" height="15" fill="rgb(221,10,30)" fg:x="23993" fg:w="91"/><text x="62.7301%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (91 samples, 0.24%)</title><rect x="62.4801%" y="85" width="0.2370%" height="15" fill="rgb(210,229,1)" fg:x="23993" fg:w="91"/><text x="62.7301%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (128 samples, 0.33%)</title><rect x="63.8864%" y="101" width="0.3333%" height="15" fill="rgb(222,148,37)" fg:x="24533" fg:w="128"/><text x="64.1364%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (128 samples, 0.33%)</title><rect x="63.8864%" y="85" width="0.3333%" height="15" fill="rgb(234,67,33)" fg:x="24533" fg:w="128"/><text x="64.1364%" y="95.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (128 samples, 0.33%)</title><rect x="63.8864%" y="69" width="0.3333%" height="15" fill="rgb(247,98,35)" fg:x="24533" fg:w="128"/><text x="64.1364%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (128 samples, 0.33%)</title><rect x="63.8864%" y="53" width="0.3333%" height="15" fill="rgb(247,138,52)" fg:x="24533" fg:w="128"/><text x="64.1364%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (49 samples, 0.13%)</title><rect x="64.0921%" y="37" width="0.1276%" height="15" fill="rgb(213,79,30)" fg:x="24612" fg:w="49"/><text x="64.3421%" y="47.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (170 samples, 0.44%)</title><rect x="64.2197%" y="85" width="0.4427%" height="15" fill="rgb(246,177,23)" fg:x="24661" fg:w="170"/><text x="64.4697%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (72 samples, 0.19%)</title><rect x="64.6624%" y="85" width="0.1875%" height="15" fill="rgb(230,62,27)" fg:x="24831" fg:w="72"/><text x="64.9124%" y="95.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (951 samples, 2.48%)</title><rect x="62.7171%" y="117" width="2.4765%" height="15" fill="rgb(216,154,8)" fg:x="24084" fg:w="951"/><text x="62.9671%" y="127.50">&lt;r..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (374 samples, 0.97%)</title><rect x="64.2197%" y="101" width="0.9739%" height="15" fill="rgb(244,35,45)" fg:x="24661" fg:w="374"/><text x="64.4697%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (132 samples, 0.34%)</title><rect x="64.8499%" y="85" width="0.3437%" height="15" fill="rgb(251,115,12)" fg:x="24903" fg:w="132"/><text x="65.0999%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (1,052 samples, 2.74%)</title><rect x="62.4801%" y="213" width="2.7395%" height="15" fill="rgb(240,54,50)" fg:x="23993" fg:w="1052"/><text x="62.7301%" y="223.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (1,052 samples, 2.74%)</title><rect x="62.4801%" y="197" width="2.7395%" height="15" fill="rgb(233,84,52)" fg:x="23993" fg:w="1052"/><text x="62.7301%" y="207.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,052 samples, 2.74%)</title><rect x="62.4801%" y="181" width="2.7395%" height="15" fill="rgb(207,117,47)" fg:x="23993" fg:w="1052"/><text x="62.7301%" y="191.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,052 samples, 2.74%)</title><rect x="62.4801%" y="165" width="2.7395%" height="15" fill="rgb(249,43,39)" fg:x="23993" fg:w="1052"/><text x="62.7301%" y="175.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,052 samples, 2.74%)</title><rect x="62.4801%" y="149" width="2.7395%" height="15" fill="rgb(209,38,44)" fg:x="23993" fg:w="1052"/><text x="62.7301%" y="159.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (961 samples, 2.50%)</title><rect x="62.7171%" y="133" width="2.5025%" height="15" fill="rgb(236,212,23)" fg:x="24084" fg:w="961"/><text x="62.9671%" y="143.50">co..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10 samples, 0.03%)</title><rect x="65.1936%" y="117" width="0.0260%" height="15" fill="rgb(242,79,21)" fg:x="25035" fg:w="10"/><text x="65.4436%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,215 samples, 3.16%)</title><rect x="66.7613%" y="181" width="3.1640%" height="15" fill="rgb(211,96,35)" fg:x="25637" fg:w="1215"/><text x="67.0113%" y="191.50">&lt;ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,215 samples, 3.16%)</title><rect x="66.7613%" y="165" width="3.1640%" height="15" fill="rgb(253,215,40)" fg:x="25637" fg:w="1215"/><text x="67.0113%" y="175.50">has..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (968 samples, 2.52%)</title><rect x="67.4045%" y="149" width="2.5208%" height="15" fill="rgb(211,81,21)" fg:x="25884" fg:w="968"/><text x="67.6545%" y="159.50">co..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (474 samples, 1.23%)</title><rect x="69.9279%" y="165" width="1.2343%" height="15" fill="rgb(208,190,38)" fg:x="26853" fg:w="474"/><text x="70.1779%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (474 samples, 1.23%)</title><rect x="69.9279%" y="149" width="1.2343%" height="15" fill="rgb(235,213,38)" fg:x="26853" fg:w="474"/><text x="70.1779%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (474 samples, 1.23%)</title><rect x="69.9279%" y="133" width="1.2343%" height="15" fill="rgb(237,122,38)" fg:x="26853" fg:w="474"/><text x="70.1779%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (474 samples, 1.23%)</title><rect x="69.9279%" y="117" width="1.2343%" height="15" fill="rgb(244,218,35)" fg:x="26853" fg:w="474"/><text x="70.1779%" y="127.50"></text></g><g><title>[libc.so.6] (6,048 samples, 15.75%)</title><rect x="77.2167%" y="101" width="15.7496%" height="15" fill="rgb(240,68,47)" fg:x="29652" fg:w="6048"/><text x="77.4667%" y="111.50">[libc.so.6]</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,374 samples, 21.81%)</title><rect x="71.1622%" y="117" width="21.8067%" height="15" fill="rgb(210,16,53)" fg:x="27327" fg:w="8374"/><text x="71.4122%" y="127.50">&lt;[A] as core::slice::cmp::SlicePar..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8,872 samples, 23.10%)</title><rect x="69.9279%" y="181" width="23.1036%" height="15" fill="rgb(235,124,12)" fg:x="26853" fg:w="8872"/><text x="70.1779%" y="191.50">hashbrown::raw::RawTable&lt;T,A&gt;::find::..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (8,398 samples, 21.87%)</title><rect x="71.1622%" y="165" width="21.8692%" height="15" fill="rgb(224,169,11)" fg:x="27327" fg:w="8398"/><text x="71.4122%" y="175.50">hashbrown::rustc_entry::_&lt;impl hash..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,398 samples, 21.87%)</title><rect x="71.1622%" y="149" width="21.8692%" height="15" fill="rgb(250,166,2)" fg:x="27327" fg:w="8398"/><text x="71.4122%" y="159.50">core::cmp::impls::&lt;impl core::cmp::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8,398 samples, 21.87%)</title><rect x="71.1622%" y="133" width="21.8692%" height="15" fill="rgb(242,216,29)" fg:x="27327" fg:w="8398"/><text x="71.4122%" y="143.50">core::slice::cmp::&lt;impl core::cmp::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (24 samples, 0.06%)</title><rect x="92.9689%" y="117" width="0.0625%" height="15" fill="rgb(230,116,27)" fg:x="35701" fg:w="24"/><text x="93.2189%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (554 samples, 1.44%)</title><rect x="93.0314%" y="181" width="1.4427%" height="15" fill="rgb(228,99,48)" fg:x="35725" fg:w="554"/><text x="93.2814%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.03%)</title><rect x="94.4741%" y="149" width="0.0286%" height="15" fill="rgb(253,11,6)" fg:x="36279" fg:w="11"/><text x="94.7241%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (191 samples, 0.50%)</title><rect x="94.4741%" y="181" width="0.4974%" height="15" fill="rgb(247,143,39)" fg:x="36279" fg:w="191"/><text x="94.7241%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (191 samples, 0.50%)</title><rect x="94.4741%" y="165" width="0.4974%" height="15" fill="rgb(236,97,10)" fg:x="36279" fg:w="191"/><text x="94.7241%" y="175.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (180 samples, 0.47%)</title><rect x="94.5027%" y="149" width="0.4687%" height="15" fill="rgb(233,208,19)" fg:x="36290" fg:w="180"/><text x="94.7527%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,461 samples, 3.80%)</title><rect x="94.9715%" y="181" width="3.8046%" height="15" fill="rgb(216,164,2)" fg:x="36470" fg:w="1461"/><text x="95.2215%" y="191.50">hash..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,461 samples, 3.80%)</title><rect x="94.9715%" y="165" width="3.8046%" height="15" fill="rgb(220,129,5)" fg:x="36470" fg:w="1461"/><text x="95.2215%" y="175.50">core..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (303 samples, 0.79%)</title><rect x="98.7761%" y="181" width="0.7890%" height="15" fill="rgb(242,17,10)" fg:x="37931" fg:w="303"/><text x="99.0261%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (303 samples, 0.79%)</title><rect x="98.7761%" y="165" width="0.7890%" height="15" fill="rgb(242,107,0)" fg:x="37931" fg:w="303"/><text x="99.0261%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (303 samples, 0.79%)</title><rect x="98.7761%" y="149" width="0.7890%" height="15" fill="rgb(251,28,31)" fg:x="37931" fg:w="303"/><text x="99.0261%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13,016 samples, 33.89%)</title><rect x="65.7691%" y="197" width="33.8950%" height="15" fill="rgb(233,223,10)" fg:x="25256" fg:w="13016"/><text x="66.0191%" y="207.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (38 samples, 0.10%)</title><rect x="99.5651%" y="181" width="0.0990%" height="15" fill="rgb(215,21,27)" fg:x="38234" fg:w="38"/><text x="99.8151%" y="191.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15,267 samples, 39.76%)</title><rect x="59.9151%" y="229" width="39.7568%" height="15" fill="rgb(232,23,21)" fg:x="23008" fg:w="15267"/><text x="60.1651%" y="239.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13,230 samples, 34.45%)</title><rect x="65.2197%" y="213" width="34.4522%" height="15" fill="rgb(244,5,23)" fg:x="25045" fg:w="13230"/><text x="65.4697%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>all (38,401 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="38401"/><text x="0.2500%" y="431.50"></text></g><g><title>rs-1brc (38,401 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="38401"/><text x="0.2500%" y="415.50">rs-1brc</text></g><g><title>_start (38,393 samples, 99.98%)</title><rect x="0.0208%" y="389" width="99.9792%" height="15" fill="rgb(212,68,19)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="399.50">_start</text></g><g><title>__libc_start_main (38,393 samples, 99.98%)</title><rect x="0.0208%" y="373" width="99.9792%" height="15" fill="rgb(240,187,13)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="383.50">__libc_start_main</text></g><g><title>[libc.so.6] (38,393 samples, 99.98%)</title><rect x="0.0208%" y="357" width="99.9792%" height="15" fill="rgb(223,113,26)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="367.50">[libc.so.6]</text></g><g><title>main (38,393 samples, 99.98%)</title><rect x="0.0208%" y="341" width="99.9792%" height="15" fill="rgb(206,192,2)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="351.50">main</text></g><g><title>std::rt::lang_start_internal (38,393 samples, 99.98%)</title><rect x="0.0208%" y="325" width="99.9792%" height="15" fill="rgb(241,108,4)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="335.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (38,393 samples, 99.98%)</title><rect x="0.0208%" y="309" width="99.9792%" height="15" fill="rgb(247,173,49)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="319.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,393 samples, 99.98%)</title><rect x="0.0208%" y="293" width="99.9792%" height="15" fill="rgb(224,114,35)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (38,393 samples, 99.98%)</title><rect x="0.0208%" y="277" width="99.9792%" height="15" fill="rgb(245,159,27)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>rs_1brc::main (38,393 samples, 99.98%)</title><rect x="0.0208%" y="261" width="99.9792%" height="15" fill="rgb(245,172,44)" fg:x="8" fg:w="38393"/><text x="0.2708%" y="271.50">rs_1brc::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15,571 samples, 40.55%)</title><rect x="59.4516%" y="245" width="40.5484%" height="15" fill="rgb(236,23,11)" fg:x="22830" fg:w="15571"/><text x="59.7016%" y="255.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (126 samples, 0.33%)</title><rect x="99.6719%" y="229" width="0.3281%" height="15" fill="rgb(205,117,38)" fg:x="38275" fg:w="126"/><text x="99.9219%" y="239.50"></text></g></svg></svg>