<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="2184732"><g><title>[unknown] (9,864 samples, 0.45%)</title><rect x="0.0068%" y="773" width="0.4515%" height="15" fill="rgb(227,0,7)" fg:x="149" fg:w="9864"/><text x="0.2568%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (875 samples, 0.04%)</title><rect x="0.8202%" y="405" width="0.0401%" height="15" fill="rgb(217,0,24)" fg:x="17919" fg:w="875"/><text x="1.0702%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (749 samples, 0.03%)</title><rect x="0.8260%" y="389" width="0.0343%" height="15" fill="rgb(221,193,54)" fg:x="18045" fg:w="749"/><text x="1.0760%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2,084 samples, 0.10%)</title><rect x="0.8602%" y="405" width="0.0954%" height="15" fill="rgb(248,212,6)" fg:x="18794" fg:w="2084"/><text x="1.1102%" y="415.50"></text></g><g><title>rs_1brc::main::_{{closure}}::_{{closure}}::_{{closure}} (2,084 samples, 0.10%)</title><rect x="0.8602%" y="389" width="0.0954%" height="15" fill="rgb(208,68,35)" fg:x="18794" fg:w="2084"/><text x="1.1102%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (8,973 samples, 0.41%)</title><rect x="0.5450%" y="421" width="0.4107%" height="15" fill="rgb(232,128,0)" fg:x="11906" fg:w="8973"/><text x="0.7950%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,841 samples, 0.50%)</title><rect x="0.5300%" y="437" width="0.4962%" height="15" fill="rgb(207,160,47)" fg:x="11579" fg:w="10841"/><text x="0.7800%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1,540 samples, 0.07%)</title><rect x="0.9557%" y="421" width="0.0705%" height="15" fill="rgb(228,23,34)" fg:x="20880" fg:w="1540"/><text x="1.2057%" y="431.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,540 samples, 0.07%)</title><rect x="0.9557%" y="405" width="0.0705%" height="15" fill="rgb(218,30,26)" fg:x="20880" fg:w="1540"/><text x="1.2057%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,540 samples, 0.07%)</title><rect x="0.9557%" y="389" width="0.0705%" height="15" fill="rgb(220,122,19)" fg:x="20880" fg:w="1540"/><text x="1.2057%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,540 samples, 0.07%)</title><rect x="0.9557%" y="373" width="0.0705%" height="15" fill="rgb(250,228,42)" fg:x="20880" fg:w="1540"/><text x="1.2057%" y="383.50"></text></g><g><title>__rdl_alloc (880 samples, 0.04%)</title><rect x="1.1666%" y="277" width="0.0403%" height="15" fill="rgb(240,193,28)" fg:x="25487" fg:w="880"/><text x="1.4166%" y="287.50"></text></g><g><title>__rust_alloc (1,174 samples, 0.05%)</title><rect x="1.2069%" y="277" width="0.0537%" height="15" fill="rgb(216,20,37)" fg:x="26367" fg:w="1174"/><text x="1.4569%" y="287.50"></text></g><g><title>core::ptr::read_volatile (500 samples, 0.02%)</title><rect x="1.2606%" y="277" width="0.0229%" height="15" fill="rgb(206,188,39)" fg:x="27541" fg:w="500"/><text x="1.5106%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18,315 samples, 0.84%)</title><rect x="1.0803%" y="325" width="0.8383%" height="15" fill="rgb(217,207,13)" fg:x="23602" fg:w="18315"/><text x="1.3303%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18,315 samples, 0.84%)</title><rect x="1.0803%" y="309" width="0.8383%" height="15" fill="rgb(231,73,38)" fg:x="23602" fg:w="18315"/><text x="1.3303%" y="319.50"></text></g><g><title>alloc::alloc::alloc (18,315 samples, 0.84%)</title><rect x="1.0803%" y="293" width="0.8383%" height="15" fill="rgb(225,20,46)" fg:x="23602" fg:w="18315"/><text x="1.3303%" y="303.50"></text></g><g><title>malloc (13,876 samples, 0.64%)</title><rect x="1.2835%" y="277" width="0.6351%" height="15" fill="rgb(210,31,41)" fg:x="28041" fg:w="13876"/><text x="1.5335%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19,514 samples, 0.89%)</title><rect x="1.0292%" y="373" width="0.8932%" height="15" fill="rgb(221,200,47)" fg:x="22485" fg:w="19514"/><text x="1.2792%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19,514 samples, 0.89%)</title><rect x="1.0292%" y="357" width="0.8932%" height="15" fill="rgb(226,26,5)" fg:x="22485" fg:w="19514"/><text x="1.2792%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19,514 samples, 0.89%)</title><rect x="1.0292%" y="341" width="0.8932%" height="15" fill="rgb(249,33,26)" fg:x="22485" fg:w="19514"/><text x="1.2792%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23,435 samples, 1.07%)</title><rect x="1.0273%" y="437" width="1.0727%" height="15" fill="rgb(235,183,28)" fg:x="22443" fg:w="23435"/><text x="1.2773%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23,435 samples, 1.07%)</title><rect x="1.0273%" y="421" width="1.0727%" height="15" fill="rgb(221,5,38)" fg:x="22443" fg:w="23435"/><text x="1.2773%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (23,435 samples, 1.07%)</title><rect x="1.0273%" y="405" width="1.0727%" height="15" fill="rgb(247,18,42)" fg:x="22443" fg:w="23435"/><text x="1.2773%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23,435 samples, 1.07%)</title><rect x="1.0273%" y="389" width="1.0727%" height="15" fill="rgb(241,131,45)" fg:x="22443" fg:w="23435"/><text x="1.2773%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,879 samples, 0.18%)</title><rect x="1.9224%" y="373" width="0.1776%" height="15" fill="rgb(249,31,29)" fg:x="41999" fg:w="3879"/><text x="2.1724%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,879 samples, 0.18%)</title><rect x="1.9224%" y="357" width="0.1776%" height="15" fill="rgb(225,111,53)" fg:x="41999" fg:w="3879"/><text x="2.1724%" y="367.50"></text></g><g><title>[libc.so.6] (3,408 samples, 0.16%)</title><rect x="1.9439%" y="341" width="0.1560%" height="15" fill="rgb(238,160,17)" fg:x="42470" fg:w="3408"/><text x="2.1939%" y="351.50"></text></g><g><title>alloc::string::String::from_utf8 (30,718 samples, 1.41%)</title><rect x="2.0999%" y="437" width="1.4060%" height="15" fill="rgb(214,148,48)" fg:x="45878" fg:w="30718"/><text x="2.3499%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (28,223 samples, 1.29%)</title><rect x="2.2141%" y="421" width="1.2918%" height="15" fill="rgb(232,36,49)" fg:x="48373" fg:w="28223"/><text x="2.4641%" y="431.50"></text></g><g><title>core::fmt::Arguments::new_v1 (1,308 samples, 0.06%)</title><rect x="3.5060%" y="437" width="0.0599%" height="15" fill="rgb(209,103,24)" fg:x="76596" fg:w="1308"/><text x="3.7560%" y="447.50"></text></g><g><title>__rdl_dealloc (245 samples, 0.01%)</title><rect x="3.5669%" y="341" width="0.0112%" height="15" fill="rgb(229,88,8)" fg:x="77928" fg:w="245"/><text x="3.8169%" y="351.50"></text></g><g><title>__rust_dealloc (293 samples, 0.01%)</title><rect x="3.5782%" y="341" width="0.0134%" height="15" fill="rgb(213,181,19)" fg:x="78173" fg:w="293"/><text x="3.8282%" y="351.50"></text></g><g><title>[libc.so.6] (3,740 samples, 0.17%)</title><rect x="3.6572%" y="325" width="0.1712%" height="15" fill="rgb(254,191,54)" fg:x="79899" fg:w="3740"/><text x="3.9072%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,733 samples, 0.26%)</title><rect x="3.5660%" y="373" width="0.2624%" height="15" fill="rgb(241,83,37)" fg:x="77907" fg:w="5733"/><text x="3.8160%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (5,733 samples, 0.26%)</title><rect x="3.5660%" y="357" width="0.2624%" height="15" fill="rgb(233,36,39)" fg:x="77907" fg:w="5733"/><text x="3.8160%" y="367.50"></text></g><g><title>cfree (5,174 samples, 0.24%)</title><rect x="3.5916%" y="341" width="0.2368%" height="15" fill="rgb(226,3,54)" fg:x="78466" fg:w="5174"/><text x="3.8416%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6,166 samples, 0.28%)</title><rect x="3.5658%" y="437" width="0.2822%" height="15" fill="rgb(245,192,40)" fg:x="77904" fg:w="6166"/><text x="3.8158%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,166 samples, 0.28%)</title><rect x="3.5658%" y="421" width="0.2822%" height="15" fill="rgb(238,167,29)" fg:x="77904" fg:w="6166"/><text x="3.8158%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,166 samples, 0.28%)</title><rect x="3.5658%" y="405" width="0.2822%" height="15" fill="rgb(232,182,51)" fg:x="77904" fg:w="6166"/><text x="3.8158%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,166 samples, 0.28%)</title><rect x="3.5658%" y="389" width="0.2822%" height="15" fill="rgb(231,60,39)" fg:x="77904" fg:w="6166"/><text x="3.8158%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (430 samples, 0.02%)</title><rect x="3.8284%" y="373" width="0.0197%" height="15" fill="rgb(208,69,12)" fg:x="83640" fg:w="430"/><text x="4.0784%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (3,090 samples, 0.14%)</title><rect x="3.8481%" y="437" width="0.1414%" height="15" fill="rgb(235,93,37)" fg:x="84070" fg:w="3090"/><text x="4.0981%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (571 samples, 0.03%)</title><rect x="4.1967%" y="341" width="0.0261%" height="15" fill="rgb(213,116,39)" fg:x="91686" fg:w="571"/><text x="4.4467%" y="351.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (578 samples, 0.03%)</title><rect x="4.2680%" y="309" width="0.0265%" height="15" fill="rgb(222,207,29)" fg:x="93244" fg:w="578"/><text x="4.5180%" y="319.50"></text></g><g><title>rust_decimal::str::handle_digit_64 (3,757 samples, 0.17%)</title><rect x="4.2524%" y="325" width="0.1720%" height="15" fill="rgb(206,96,30)" fg:x="92904" fg:w="3757"/><text x="4.5024%" y="335.50"></text></g><g><title>rust_decimal::str::handle_data (2,839 samples, 0.13%)</title><rect x="4.2944%" y="309" width="0.1299%" height="15" fill="rgb(218,138,4)" fg:x="93822" fg:w="2839"/><text x="4.5444%" y="319.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (2,034 samples, 0.09%)</title><rect x="4.3313%" y="293" width="0.0931%" height="15" fill="rgb(250,191,14)" fg:x="94627" fg:w="2034"/><text x="4.5813%" y="303.50"></text></g><g><title>rust_decimal::str::handle_digit_64 (8,215 samples, 0.38%)</title><rect x="4.1163%" y="357" width="0.3760%" height="15" fill="rgb(239,60,40)" fg:x="89930" fg:w="8215"/><text x="4.3663%" y="367.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (5,888 samples, 0.27%)</title><rect x="4.2228%" y="341" width="0.2695%" height="15" fill="rgb(206,27,48)" fg:x="92257" fg:w="5888"/><text x="4.4728%" y="351.50"></text></g><g><title>rust_decimal::str::handle_point (1,484 samples, 0.07%)</title><rect x="4.4244%" y="325" width="0.0679%" height="15" fill="rgb(225,35,8)" fg:x="96661" fg:w="1484"/><text x="4.6744%" y="335.50"></text></g><g><title>rust_decimal::str::dispatch_next (1,483 samples, 0.07%)</title><rect x="4.4244%" y="309" width="0.0679%" height="15" fill="rgb(250,213,24)" fg:x="96662" fg:w="1483"/><text x="4.6744%" y="319.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (302 samples, 0.01%)</title><rect x="4.4785%" y="293" width="0.0138%" height="15" fill="rgb(247,123,22)" fg:x="97843" fg:w="302"/><text x="4.7285%" y="303.50"></text></g><g><title>rust_decimal::str::handle_digit_64 (635 samples, 0.03%)</title><rect x="4.5037%" y="309" width="0.0291%" height="15" fill="rgb(231,138,38)" fg:x="98394" fg:w="635"/><text x="4.7537%" y="319.50"></text></g><g><title>rust_decimal::str::handle_data (308 samples, 0.01%)</title><rect x="4.5187%" y="293" width="0.0141%" height="15" fill="rgb(231,145,46)" fg:x="98721" fg:w="308"/><text x="4.7687%" y="303.50"></text></g><g><title>rust_decimal::decimal::Decimal::from_parts (262 samples, 0.01%)</title><rect x="4.5208%" y="277" width="0.0120%" height="15" fill="rgb(251,118,11)" fg:x="98767" fg:w="262"/><text x="4.7708%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (12,226 samples, 0.56%)</title><rect x="3.9895%" y="437" width="0.5596%" height="15" fill="rgb(217,147,25)" fg:x="87160" fg:w="12226"/><text x="4.2395%" y="447.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::str::traits::FromStr&gt;::from_str (12,110 samples, 0.55%)</title><rect x="3.9948%" y="421" width="0.5543%" height="15" fill="rgb(247,81,37)" fg:x="87276" fg:w="12110"/><text x="4.2448%" y="431.50"></text></g><g><title>rust_decimal::str::parse_str_radix_10 (10,619 samples, 0.49%)</title><rect x="4.0631%" y="405" width="0.4861%" height="15" fill="rgb(209,12,38)" fg:x="88767" fg:w="10619"/><text x="4.3131%" y="415.50"></text></g><g><title>rust_decimal::str::parse_str_radix_10_dispatch (10,619 samples, 0.49%)</title><rect x="4.0631%" y="389" width="0.4861%" height="15" fill="rgb(227,1,9)" fg:x="88767" fg:w="10619"/><text x="4.3131%" y="399.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (10,456 samples, 0.48%)</title><rect x="4.0705%" y="373" width="0.4786%" height="15" fill="rgb(248,47,43)" fg:x="88930" fg:w="10456"/><text x="4.3205%" y="383.50"></text></g><g><title>rust_decimal::str::non_digit_dispatch_u64 (1,241 samples, 0.06%)</title><rect x="4.4923%" y="357" width="0.0568%" height="15" fill="rgb(221,10,30)" fg:x="98145" fg:w="1241"/><text x="4.7423%" y="367.50"></text></g><g><title>rust_decimal::str::dispatch_next (1,055 samples, 0.05%)</title><rect x="4.5008%" y="341" width="0.0483%" height="15" fill="rgb(210,229,1)" fg:x="98331" fg:w="1055"/><text x="4.7508%" y="351.50"></text></g><g><title>rust_decimal::str::byte_dispatch_u64 (1,023 samples, 0.05%)</title><rect x="4.5023%" y="325" width="0.0468%" height="15" fill="rgb(222,148,37)" fg:x="98363" fg:w="1023"/><text x="4.7523%" y="335.50"></text></g><g><title>rust_decimal::str::handle_point (357 samples, 0.02%)</title><rect x="4.5328%" y="309" width="0.0163%" height="15" fill="rgb(234,67,33)" fg:x="99029" fg:w="357"/><text x="4.7828%" y="319.50"></text></g><g><title>rust_decimal::str::dispatch_next (336 samples, 0.02%)</title><rect x="4.5337%" y="293" width="0.0154%" height="15" fill="rgb(247,98,35)" fg:x="99050" fg:w="336"/><text x="4.7837%" y="303.50"></text></g><g><title>&lt;rust_decimal::decimal::Decimal as core::ops::arith::AddAssign&gt;::add_assign (472 samples, 0.02%)</title><rect x="4.5527%" y="405" width="0.0216%" height="15" fill="rgb(247,138,52)" fg:x="99464" fg:w="472"/><text x="4.8027%" y="415.50"></text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl core::ops::arith::Add for rust_decimal::decimal::Decimal&gt;::add (278 samples, 0.01%)</title><rect x="4.5616%" y="389" width="0.0127%" height="15" fill="rgb(213,79,30)" fg:x="99658" fg:w="278"/><text x="4.8116%" y="399.50"></text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl core::ops::arith::Add&lt;&amp;rust_decimal::decimal::Decimal&gt; for &amp;rust_decimal::decimal::Decimal&gt;::add (278 samples, 0.01%)</title><rect x="4.5616%" y="373" width="0.0127%" height="15" fill="rgb(246,177,23)" fg:x="99658" fg:w="278"/><text x="4.8116%" y="383.50"></text></g><g><title>rust_decimal::ops::add::add_impl (262 samples, 0.01%)</title><rect x="4.5623%" y="357" width="0.0120%" height="15" fill="rgb(230,62,27)" fg:x="99674" fg:w="262"/><text x="4.8123%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,247 samples, 0.06%)</title><rect x="4.5492%" y="437" width="0.0571%" height="15" fill="rgb(216,154,8)" fg:x="99388" fg:w="1247"/><text x="4.7992%" y="447.50"></text></g><g><title>rs_1brc::main::_{{closure}}::_{{closure}}::_{{closure}} (1,245 samples, 0.06%)</title><rect x="4.5493%" y="421" width="0.0570%" height="15" fill="rgb(244,35,45)" fg:x="99390" fg:w="1245"/><text x="4.7993%" y="431.50"></text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl core::ops::arith::Add for rust_decimal::decimal::Decimal&gt;::add (398 samples, 0.02%)</title><rect x="4.5881%" y="405" width="0.0182%" height="15" fill="rgb(251,115,12)" fg:x="100237" fg:w="398"/><text x="4.8381%" y="415.50"></text></g><g><title>rust_decimal::arithmetic_impls::&lt;impl core::ops::arith::Add&lt;&amp;rust_decimal::decimal::Decimal&gt; for &amp;rust_decimal::decimal::Decimal&gt;::add (398 samples, 0.02%)</title><rect x="4.5881%" y="389" width="0.0182%" height="15" fill="rgb(240,54,50)" fg:x="100237" fg:w="398"/><text x="4.8381%" y="399.50"></text></g><g><title>rust_decimal::ops::add::add_impl (338 samples, 0.02%)</title><rect x="4.5908%" y="373" width="0.0155%" height="15" fill="rgb(233,84,52)" fg:x="100297" fg:w="338"/><text x="4.8408%" y="383.50"></text></g><g><title>[libc.so.6] (1,708 samples, 0.08%)</title><rect x="4.6598%" y="245" width="0.0782%" height="15" fill="rgb(207,117,47)" fg:x="101805" fg:w="1708"/><text x="4.9098%" y="255.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (2,880 samples, 0.13%)</title><rect x="4.6063%" y="437" width="0.1318%" height="15" fill="rgb(249,43,39)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="447.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (2,880 samples, 0.13%)</title><rect x="4.6063%" y="421" width="0.1318%" height="15" fill="rgb(209,38,44)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (2,880 samples, 0.13%)</title><rect x="4.6063%" y="405" width="0.1318%" height="15" fill="rgb(236,212,23)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,rs_1brc::StationValues&gt;&gt; (2,880 samples, 0.13%)</title><rect x="4.6063%" y="389" width="0.1318%" height="15" fill="rgb(242,79,21)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (2,880 samples, 0.13%)</title><rect x="4.6063%" y="373" width="0.1318%" height="15" fill="rgb(211,96,35)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,880 samples, 0.13%)</title><rect x="4.6063%" y="357" width="0.1318%" height="15" fill="rgb(253,215,40)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,880 samples, 0.13%)</title><rect x="4.6063%" y="341" width="0.1318%" height="15" fill="rgb(211,81,21)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2,880 samples, 0.13%)</title><rect x="4.6063%" y="325" width="0.1318%" height="15" fill="rgb(208,190,38)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,880 samples, 0.13%)</title><rect x="4.6063%" y="309" width="0.1318%" height="15" fill="rgb(235,213,38)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,880 samples, 0.13%)</title><rect x="4.6063%" y="293" width="0.1318%" height="15" fill="rgb(237,122,38)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (2,880 samples, 0.13%)</title><rect x="4.6063%" y="277" width="0.1318%" height="15" fill="rgb(244,218,35)" fg:x="100635" fg:w="2880"/><text x="4.8563%" y="287.50"></text></g><g><title>cfree (2,810 samples, 0.13%)</title><rect x="4.6095%" y="261" width="0.1286%" height="15" fill="rgb(240,68,47)" fg:x="100705" fg:w="2810"/><text x="4.8595%" y="271.50"></text></g><g><title>[libc.so.6] (447 samples, 0.02%)</title><rect x="4.7718%" y="277" width="0.0205%" height="15" fill="rgb(210,16,53)" fg:x="104250" fg:w="447"/><text x="5.0218%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,042 samples, 0.05%)</title><rect x="4.7446%" y="373" width="0.0477%" height="15" fill="rgb(235,124,12)" fg:x="103657" fg:w="1042"/><text x="4.9946%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,012 samples, 0.05%)</title><rect x="4.7460%" y="357" width="0.0463%" height="15" fill="rgb(224,169,11)" fg:x="103687" fg:w="1012"/><text x="4.9960%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,012 samples, 0.05%)</title><rect x="4.7460%" y="341" width="0.0463%" height="15" fill="rgb(250,166,2)" fg:x="103687" fg:w="1012"/><text x="4.9960%" y="351.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,012 samples, 0.05%)</title><rect x="4.7460%" y="325" width="0.0463%" height="15" fill="rgb(242,216,29)" fg:x="103687" fg:w="1012"/><text x="4.9960%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,012 samples, 0.05%)</title><rect x="4.7460%" y="309" width="0.0463%" height="15" fill="rgb(230,116,27)" fg:x="103687" fg:w="1012"/><text x="4.9960%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,012 samples, 0.05%)</title><rect x="4.7460%" y="293" width="0.0463%" height="15" fill="rgb(228,99,48)" fg:x="103687" fg:w="1012"/><text x="4.9960%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,208 samples, 0.06%)</title><rect x="4.7381%" y="437" width="0.0553%" height="15" fill="rgb(253,11,6)" fg:x="103515" fg:w="1208"/><text x="4.9881%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,208 samples, 0.06%)</title><rect x="4.7381%" y="421" width="0.0553%" height="15" fill="rgb(247,143,39)" fg:x="103515" fg:w="1208"/><text x="4.9881%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,070 samples, 0.05%)</title><rect x="4.7444%" y="405" width="0.0490%" height="15" fill="rgb(236,97,10)" fg:x="103653" fg:w="1070"/><text x="4.9944%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,070 samples, 0.05%)</title><rect x="4.7444%" y="389" width="0.0490%" height="15" fill="rgb(233,208,19)" fg:x="103653" fg:w="1070"/><text x="4.9944%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Debug&gt;::fmt (2,256 samples, 0.10%)</title><rect x="6.0462%" y="389" width="0.1033%" height="15" fill="rgb(216,164,2)" fg:x="132094" fg:w="2256"/><text x="6.2962%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (1,214 samples, 0.06%)</title><rect x="6.0939%" y="373" width="0.0556%" height="15" fill="rgb(220,129,5)" fg:x="133136" fg:w="1214"/><text x="6.3439%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,214 samples, 0.06%)</title><rect x="6.0939%" y="357" width="0.0556%" height="15" fill="rgb(242,17,10)" fg:x="133136" fg:w="1214"/><text x="6.3439%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (912 samples, 0.04%)</title><rect x="6.1078%" y="341" width="0.0417%" height="15" fill="rgb(242,107,0)" fg:x="133438" fg:w="912"/><text x="6.3578%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (912 samples, 0.04%)</title><rect x="6.1078%" y="325" width="0.0417%" height="15" fill="rgb(251,28,31)" fg:x="133438" fg:w="912"/><text x="6.3578%" y="335.50"></text></g><g><title>[libc.so.6] (19,531 samples, 0.89%)</title><rect x="6.8359%" y="357" width="0.8940%" height="15" fill="rgb(233,223,10)" fg:x="149347" fg:w="19531"/><text x="7.0859%" y="367.50"></text></g><g><title>[libc.so.6] (11,429 samples, 0.52%)</title><rect x="8.7924%" y="325" width="0.5231%" height="15" fill="rgb(215,21,27)" fg:x="192091" fg:w="11429"/><text x="9.0424%" y="335.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,168,979 samples, 53.51%)</title><rect x="6.2532%" y="373" width="53.5067%" height="15" fill="rgb(232,23,21)" fg:x="136615" fg:w="1168979"/><text x="6.5032%" y="383.50">&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1,136,712 samples, 52.03%)</title><rect x="7.7301%" y="357" width="52.0298%" height="15" fill="rgb(244,5,23)" fg:x="168882" fg:w="1136712"/><text x="7.9801%" y="367.50">std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf</text></g><g><title>write (1,124,056 samples, 51.45%)</title><rect x="8.3094%" y="341" width="51.4505%" height="15" fill="rgb(226,81,46)" fg:x="181538" fg:w="1124056"/><text x="8.5594%" y="351.50">write</text></g><g><title>[unknown] (1,102,074 samples, 50.44%)</title><rect x="9.3156%" y="325" width="50.4444%" height="15" fill="rgb(247,70,30)" fg:x="203520" fg:w="1102074"/><text x="9.5656%" y="335.50">[unknown]</text></g><g><title>[unknown] (934,882 samples, 42.79%)</title><rect x="16.9683%" y="309" width="42.7916%" height="15" fill="rgb(212,68,19)" fg:x="370712" fg:w="934882"/><text x="17.2183%" y="319.50">[unknown]</text></g><g><title>[unknown] (853,694 samples, 39.08%)</title><rect x="20.6845%" y="293" width="39.0755%" height="15" fill="rgb(240,187,13)" fg:x="451900" fg:w="853694"/><text x="20.9345%" y="303.50">[unknown]</text></g><g><title>[unknown] (850,919 samples, 38.95%)</title><rect x="20.8115%" y="277" width="38.9484%" height="15" fill="rgb(223,113,26)" fg:x="454675" fg:w="850919"/><text x="21.0615%" y="287.50">[unknown]</text></g><g><title>[unknown] (801,257 samples, 36.68%)</title><rect x="23.0846%" y="261" width="36.6753%" height="15" fill="rgb(206,192,2)" fg:x="504337" fg:w="801257"/><text x="23.3346%" y="271.50">[unknown]</text></g><g><title>[unknown] (545,280 samples, 24.96%)</title><rect x="34.8012%" y="245" width="24.9587%" height="15" fill="rgb(241,108,4)" fg:x="760314" fg:w="545280"/><text x="35.0512%" y="255.50">[unknown]</text></g><g><title>[unknown] (492,431 samples, 22.54%)</title><rect x="37.2203%" y="229" width="22.5397%" height="15" fill="rgb(247,173,49)" fg:x="813163" fg:w="492431"/><text x="37.4703%" y="239.50">[unknown]</text></g><g><title>[unknown] (360,871 samples, 16.52%)</title><rect x="43.2421%" y="213" width="16.5179%" height="15" fill="rgb(224,114,35)" fg:x="944723" fg:w="360871"/><text x="43.4921%" y="223.50">[unknown]</text></g><g><title>[unknown] (214,456 samples, 9.82%)</title><rect x="49.9438%" y="197" width="9.8161%" height="15" fill="rgb(245,159,27)" fg:x="1091138" fg:w="214456"/><text x="50.1938%" y="207.50">[unknown]</text></g><g><title>[unknown] (117,699 samples, 5.39%)</title><rect x="54.3726%" y="181" width="5.3873%" height="15" fill="rgb(245,172,44)" fg:x="1187895" fg:w="117699"/><text x="54.6226%" y="191.50">[unknow..</text></g><g><title>[unknown] (71,034 samples, 3.25%)</title><rect x="56.5085%" y="165" width="3.2514%" height="15" fill="rgb(236,23,11)" fg:x="1234560" fg:w="71034"/><text x="56.7585%" y="175.50">[un..</text></g><g><title>[unknown] (32,359 samples, 1.48%)</title><rect x="58.2788%" y="149" width="1.4811%" height="15" fill="rgb(205,117,38)" fg:x="1273235" fg:w="32359"/><text x="58.5288%" y="159.50"></text></g><g><title>[unknown] (1,246 samples, 0.06%)</title><rect x="59.7029%" y="133" width="0.0570%" height="15" fill="rgb(237,72,25)" fg:x="1304348" fg:w="1246"/><text x="59.9529%" y="143.50"></text></g><g><title>[unknown] (916 samples, 0.04%)</title><rect x="59.7180%" y="117" width="0.0419%" height="15" fill="rgb(244,70,9)" fg:x="1304678" fg:w="916"/><text x="59.9680%" y="127.50"></text></g><g><title>[unknown] (698 samples, 0.03%)</title><rect x="59.7280%" y="101" width="0.0319%" height="15" fill="rgb(217,125,39)" fg:x="1304896" fg:w="698"/><text x="59.9780%" y="111.50"></text></g><g><title>[unknown] (482 samples, 0.02%)</title><rect x="59.7379%" y="85" width="0.0221%" height="15" fill="rgb(235,36,10)" fg:x="1305112" fg:w="482"/><text x="59.9879%" y="95.50"></text></g><g><title>[unknown] (350 samples, 0.02%)</title><rect x="59.7439%" y="69" width="0.0160%" height="15" fill="rgb(251,123,47)" fg:x="1305244" fg:w="350"/><text x="59.9939%" y="79.50"></text></g><g><title>[unknown] (336 samples, 0.02%)</title><rect x="59.7445%" y="53" width="0.0154%" height="15" fill="rgb(221,13,13)" fg:x="1305258" fg:w="336"/><text x="59.9945%" y="63.50"></text></g><g><title>[unknown] (225 samples, 0.01%)</title><rect x="59.7496%" y="37" width="0.0103%" height="15" fill="rgb(238,131,9)" fg:x="1305369" fg:w="225"/><text x="59.9996%" y="47.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,171,248 samples, 53.61%)</title><rect x="6.1495%" y="389" width="53.6106%" height="15" fill="rgb(211,50,8)" fg:x="134350" fg:w="1171248"/><text x="6.3995%" y="399.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str</text></g><g><title>[libc.so.6] (16,686 samples, 0.76%)</title><rect x="63.4556%" y="341" width="0.7638%" height="15" fill="rgb(245,182,24)" fg:x="1386335" fg:w="16686"/><text x="63.7056%" y="351.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (34,258 samples, 1.57%)</title><rect x="62.6515%" y="357" width="1.5681%" height="15" fill="rgb(242,14,37)" fg:x="1368767" fg:w="34258"/><text x="62.9015%" y="367.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (39,854 samples, 1.82%)</title><rect x="62.3954%" y="373" width="1.8242%" height="15" fill="rgb(246,228,12)" fg:x="1363172" fg:w="39854"/><text x="62.6454%" y="383.50">&lt;..</text></g><g><title>core::unicode::printable::is_printable (30,547 samples, 1.40%)</title><rect x="66.4016%" y="357" width="1.3982%" height="15" fill="rgb(213,55,15)" fg:x="1450696" fg:w="30547"/><text x="66.6516%" y="367.50"></text></g><g><title>core::unicode::printable::check (1,028 samples, 0.05%)</title><rect x="67.7527%" y="341" width="0.0471%" height="15" fill="rgb(209,9,3)" fg:x="1480215" fg:w="1028"/><text x="68.0027%" y="351.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (687,805 samples, 31.48%)</title><rect x="64.2199%" y="373" width="31.4824%" height="15" fill="rgb(230,59,30)" fg:x="1403033" fg:w="687805"/><text x="64.4699%" y="383.50">core::char::methods::&lt;impl char&gt;::escape_debug_ext</text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (609,595 samples, 27.90%)</title><rect x="67.7998%" y="357" width="27.9025%" height="15" fill="rgb(209,121,21)" fg:x="1481243" fg:w="609595"/><text x="68.0498%" y="367.50">core::unicode::unicode_data::grapheme_extend:..</text></g><g><title>[libc.so.6] (20,579 samples, 0.94%)</title><rect x="96.6828%" y="341" width="0.9419%" height="15" fill="rgb(220,109,13)" fg:x="2112260" fg:w="20579"/><text x="96.9328%" y="351.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (33,066 samples, 1.51%)</title><rect x="96.1113%" y="357" width="1.5135%" height="15" fill="rgb(232,18,1)" fg:x="2099775" fg:w="33066"/><text x="96.3613%" y="367.50"></text></g><g><title>core::fmt::Write::write_char (42,004 samples, 1.92%)</title><rect x="95.7023%" y="373" width="1.9226%" height="15" fill="rgb(215,41,42)" fg:x="2090838" fg:w="42004"/><text x="95.9523%" y="383.50">c..</text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (827,245 samples, 37.86%)</title><rect x="59.7601%" y="389" width="37.8648%" height="15" fill="rgb(224,123,36)" fg:x="1305598" fg:w="827245"/><text x="60.0101%" y="399.50">&lt;str as core::fmt::Debug&gt;::fmt</text></g><g><title>[libc.so.6] (25,345 samples, 1.16%)</title><rect x="98.5620%" y="357" width="1.1601%" height="15" fill="rgb(240,125,3)" fg:x="2153315" fg:w="25345"/><text x="98.8120%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (39,879 samples, 1.83%)</title><rect x="97.8968%" y="373" width="1.8253%" height="15" fill="rgb(205,98,50)" fg:x="2138782" fg:w="39879"/><text x="98.1468%" y="383.50">&lt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2,067,273 samples, 94.62%)</title><rect x="5.0985%" y="421" width="94.6236%" height="15" fill="rgb(205,185,37)" fg:x="111389" fg:w="2067273"/><text x="5.3485%" y="431.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>core::fmt::write (2,060,485 samples, 94.31%)</title><rect x="5.4092%" y="405" width="94.3129%" height="15" fill="rgb(238,207,15)" fg:x="118177" fg:w="2060485"/><text x="5.6592%" y="415.50">core::fmt::write</text></g><g><title>core::fmt::Write::write_char (45,815 samples, 2.10%)</title><rect x="97.6251%" y="389" width="2.0971%" height="15" fill="rgb(213,199,42)" fg:x="2132847" fg:w="45815"/><text x="97.8751%" y="399.50">c..</text></g><g><title>_start (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="773" width="99.5357%" height="15" fill="rgb(235,201,11)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="783.50">_start</text></g><g><title>__libc_start_main (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="757" width="99.5357%" height="15" fill="rgb(207,46,11)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="767.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="741" width="99.5357%" height="15" fill="rgb(241,35,35)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="751.50">[libc.so.6]</text></g><g><title>main (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="725" width="99.5357%" height="15" fill="rgb(243,32,47)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="709" width="99.5357%" height="15" fill="rgb(247,202,23)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="693" width="99.5357%" height="15" fill="rgb(219,102,11)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="703.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="677" width="99.5357%" height="15" fill="rgb(243,110,44)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="661" width="99.5357%" height="15" fill="rgb(222,74,54)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>rs_1brc::main (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="645" width="99.5357%" height="15" fill="rgb(216,99,12)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="655.50">rs_1brc::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="629" width="99.5357%" height="15" fill="rgb(226,22,26)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="639.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="613" width="99.5357%" height="15" fill="rgb(217,163,10)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="623.50">tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="597" width="99.5357%" height="15" fill="rgb(213,25,53)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="607.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="581" width="99.5357%" height="15" fill="rgb(252,105,26)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="591.50">tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}}</text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="565" width="99.5357%" height="15" fill="rgb(220,39,43)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="575.50">tokio::runtime::context::blocking::BlockingRegionGuard::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="549" width="99.5357%" height="15" fill="rgb(229,68,48)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="559.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::coop::budget (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="533" width="99.5357%" height="15" fill="rgb(252,8,32)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="543.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="517" width="99.5357%" height="15" fill="rgb(223,20,43)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="527.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="501" width="99.5357%" height="15" fill="rgb(229,81,49)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="511.50">tokio::runtime::park::CachedParkThread::block_on::_{{closure}}</text></g><g><title>rs_1brc::main::_{{closure}} (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="485" width="99.5357%" height="15" fill="rgb(236,28,36)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="495.50">rs_1brc::main::_{{closure}}</text></g><g><title>opentelemetry_api::trace::tracer::Tracer::in_span (2,174,588 samples, 99.54%)</title><rect x="0.4583%" y="469" width="99.5357%" height="15" fill="rgb(249,185,26)" fg:x="10013" fg:w="2174588"/><text x="0.7083%" y="479.50">opentelemetry_api::trace::tracer::Tracer::in_span</text></g><g><title>rs_1brc::main::_{{closure}}::_{{closure}} (2,174,210 samples, 99.52%)</title><rect x="0.4756%" y="453" width="99.5184%" height="15" fill="rgb(249,174,33)" fg:x="10391" fg:w="2174210"/><text x="0.7256%" y="463.50">rs_1brc::main::_{{closure}}::_{{closure}}</text></g><g><title>std::io::stdio::_print (2,079,878 samples, 95.20%)</title><rect x="4.7934%" y="437" width="95.2006%" height="15" fill="rgb(233,201,37)" fg:x="104723" fg:w="2079878"/><text x="5.0434%" y="447.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to_buffer_if_capture_used (5,937 samples, 0.27%)</title><rect x="99.7223%" y="421" width="0.2717%" height="15" fill="rgb(221,78,26)" fg:x="2178664" fg:w="5937"/><text x="99.9723%" y="431.50"></text></g><g><title>rs-1brc (2,184,594 samples, 99.99%)</title><rect x="0.0004%" y="789" width="99.9937%" height="15" fill="rgb(250,127,30)" fg:x="8" fg:w="2184594"/><text x="0.2504%" y="799.50">rs-1brc</text></g><g><title>all (2,184,732 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="2184732"/><text x="0.2500%" y="815.50"></text></g></svg></svg>