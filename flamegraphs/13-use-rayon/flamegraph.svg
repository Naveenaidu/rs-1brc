<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1590" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1573.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1573.00"> </text><svg id="frames" x="10" width="1180" total_samples="39010"><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.01%)</title><rect x="0.0026%" y="1493" width="0.0128%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="5"/><text x="0.2526%" y="1503.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0026%" y="1509" width="0.0179%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="7"/><text x="0.2526%" y="1519.50"></text></g><g><title>[unknown] (18 samples, 0.05%)</title><rect x="0.0205%" y="1477" width="0.0461%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="18"/><text x="0.2705%" y="1487.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="0.0282%" y="1461" width="0.0385%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="15"/><text x="0.2782%" y="1471.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="0.0461%" y="1445" width="0.0205%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="8"/><text x="0.2961%" y="1455.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="0.0513%" y="1429" width="0.0154%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="6"/><text x="0.3013%" y="1439.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="0.0538%" y="1413" width="0.0128%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="5"/><text x="0.3038%" y="1423.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (251 samples, 0.64%)</title><rect x="0.7819%" y="869" width="0.6434%" height="15" fill="rgb(228,23,34)" fg:x="305" fg:w="251"/><text x="1.0319%" y="879.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (551 samples, 1.41%)</title><rect x="0.7819%" y="885" width="1.4125%" height="15" fill="rgb(218,30,26)" fg:x="305" fg:w="551"/><text x="1.0319%" y="895.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (300 samples, 0.77%)</title><rect x="1.4253%" y="869" width="0.7690%" height="15" fill="rgb(220,122,19)" fg:x="556" fg:w="300"/><text x="1.6753%" y="879.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.03%)</title><rect x="2.1687%" y="853" width="0.0256%" height="15" fill="rgb(250,228,42)" fg:x="846" fg:w="10"/><text x="2.4187%" y="863.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (10 samples, 0.03%)</title><rect x="2.1687%" y="837" width="0.0256%" height="15" fill="rgb(240,193,28)" fg:x="846" fg:w="10"/><text x="2.4187%" y="847.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (10 samples, 0.03%)</title><rect x="2.1687%" y="821" width="0.0256%" height="15" fill="rgb(216,20,37)" fg:x="846" fg:w="10"/><text x="2.4187%" y="831.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,037 samples, 7.79%)</title><rect x="3.8452%" y="805" width="7.7852%" height="15" fill="rgb(206,188,39)" fg:x="1500" fg:w="3037"/><text x="4.0952%" y="815.50">&lt;f32 as cor..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (51 samples, 0.13%)</title><rect x="11.6304%" y="805" width="0.1307%" height="15" fill="rgb(217,207,13)" fg:x="4537" fg:w="51"/><text x="11.8804%" y="815.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (7 samples, 0.02%)</title><rect x="11.7611%" y="805" width="0.0179%" height="15" fill="rgb(231,73,38)" fg:x="4588" fg:w="7"/><text x="12.0111%" y="815.50"></text></g><g><title>fast_float::number::Number::try_fast_path (3,618 samples, 9.27%)</title><rect x="2.6532%" y="821" width="9.2745%" height="15" fill="rgb(225,20,46)" fg:x="1035" fg:w="3618"/><text x="2.9032%" y="831.50">fast_float::n..</text></g><g><title>fast_float::number::Number::is_fast_path (58 samples, 0.15%)</title><rect x="11.7790%" y="805" width="0.1487%" height="15" fill="rgb(210,31,41)" fg:x="4595" fg:w="58"/><text x="12.0290%" y="815.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (169 samples, 0.43%)</title><rect x="13.7657%" y="805" width="0.4332%" height="15" fill="rgb(221,200,47)" fg:x="5370" fg:w="169"/><text x="14.0157%" y="815.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (154 samples, 0.39%)</title><rect x="13.8042%" y="789" width="0.3948%" height="15" fill="rgb(226,26,5)" fg:x="5385" fg:w="154"/><text x="14.0542%" y="799.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (10 samples, 0.03%)</title><rect x="14.1989%" y="805" width="0.0256%" height="15" fill="rgb(249,33,26)" fg:x="5539" fg:w="10"/><text x="14.4489%" y="815.50"></text></g><g><title>fast_float::common::AsciiStr::first (26 samples, 0.07%)</title><rect x="14.2246%" y="805" width="0.0666%" height="15" fill="rgb(235,183,28)" fg:x="5549" fg:w="26"/><text x="14.4746%" y="815.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (88 samples, 0.23%)</title><rect x="14.2912%" y="805" width="0.2256%" height="15" fill="rgb(221,5,38)" fg:x="5575" fg:w="88"/><text x="14.5412%" y="815.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (88 samples, 0.23%)</title><rect x="14.2912%" y="789" width="0.2256%" height="15" fill="rgb(247,18,42)" fg:x="5575" fg:w="88"/><text x="14.5412%" y="799.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (240 samples, 0.62%)</title><rect x="14.5168%" y="805" width="0.6152%" height="15" fill="rgb(241,131,45)" fg:x="5663" fg:w="240"/><text x="14.7668%" y="815.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (240 samples, 0.62%)</title><rect x="14.5168%" y="789" width="0.6152%" height="15" fill="rgb(249,31,29)" fg:x="5663" fg:w="240"/><text x="14.7668%" y="799.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (147 samples, 0.38%)</title><rect x="14.7552%" y="773" width="0.3768%" height="15" fill="rgb(225,111,53)" fg:x="5756" fg:w="147"/><text x="15.0052%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.01%)</title><rect x="15.1192%" y="757" width="0.0128%" height="15" fill="rgb(238,160,17)" fg:x="5898" fg:w="5"/><text x="15.3692%" y="767.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (390 samples, 1.00%)</title><rect x="16.0728%" y="773" width="0.9997%" height="15" fill="rgb(214,148,48)" fg:x="6270" fg:w="390"/><text x="16.3228%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (22 samples, 0.06%)</title><rect x="17.0725%" y="773" width="0.0564%" height="15" fill="rgb(232,36,49)" fg:x="6660" fg:w="22"/><text x="17.3225%" y="783.50"></text></g><g><title>fast_float::common::AsciiStr::first (18 samples, 0.05%)</title><rect x="17.1289%" y="773" width="0.0461%" height="15" fill="rgb(209,103,24)" fg:x="6682" fg:w="18"/><text x="17.3789%" y="783.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (251 samples, 0.64%)</title><rect x="17.1751%" y="773" width="0.6434%" height="15" fill="rgb(229,88,8)" fg:x="6700" fg:w="251"/><text x="17.4251%" y="783.50"></text></g><g><title>fast_float::common::AsciiStr::step (93 samples, 0.24%)</title><rect x="17.8185%" y="773" width="0.2384%" height="15" fill="rgb(213,181,19)" fg:x="6951" fg:w="93"/><text x="18.0685%" y="783.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (93 samples, 0.24%)</title><rect x="17.8185%" y="757" width="0.2384%" height="15" fill="rgb(254,191,54)" fg:x="6951" fg:w="93"/><text x="18.0685%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (93 samples, 0.24%)</title><rect x="17.8185%" y="741" width="0.2384%" height="15" fill="rgb(241,83,37)" fg:x="6951" fg:w="93"/><text x="18.0685%" y="751.50"></text></g><g><title>fast_float::parse (6,541 samples, 16.77%)</title><rect x="2.1943%" y="885" width="16.7675%" height="15" fill="rgb(233,36,39)" fg:x="856" fg:w="6541"/><text x="2.4443%" y="895.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (6,541 samples, 16.77%)</title><rect x="2.1943%" y="869" width="16.7675%" height="15" fill="rgb(226,3,54)" fg:x="856" fg:w="6541"/><text x="2.4443%" y="879.50">fast_float::FastFloat::par..</text></g><g><title>fast_float::FastFloat::parse_float_partial (6,541 samples, 16.77%)</title><rect x="2.1943%" y="853" width="16.7675%" height="15" fill="rgb(245,192,40)" fg:x="856" fg:w="6541"/><text x="2.4443%" y="863.50">fast_float::FastFloat::par..</text></g><g><title>fast_float::parse::parse_float (6,541 samples, 16.77%)</title><rect x="2.1943%" y="837" width="16.7675%" height="15" fill="rgb(238,167,29)" fg:x="856" fg:w="6541"/><text x="2.4443%" y="847.50">fast_float::parse::parse_f..</text></g><g><title>fast_float::number::parse_number (2,744 samples, 7.03%)</title><rect x="11.9277%" y="821" width="7.0341%" height="15" fill="rgb(232,182,51)" fg:x="4653" fg:w="2744"/><text x="12.1777%" y="831.50">fast_floa..</text></g><g><title>fast_float::number::try_parse_digits (1,494 samples, 3.83%)</title><rect x="15.1320%" y="805" width="3.8298%" height="15" fill="rgb(231,60,39)" fg:x="5903" fg:w="1494"/><text x="15.3820%" y="815.50">fast..</text></g><g><title>fast_float::common::AsciiStr::parse_digits (1,494 samples, 3.83%)</title><rect x="15.1320%" y="789" width="3.8298%" height="15" fill="rgb(208,69,12)" fg:x="5903" fg:w="1494"/><text x="15.3820%" y="799.50">fast..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (353 samples, 0.90%)</title><rect x="18.0569%" y="773" width="0.9049%" height="15" fill="rgb(235,93,37)" fg:x="7044" fg:w="353"/><text x="18.3069%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (170 samples, 0.44%)</title><rect x="18.5260%" y="757" width="0.4358%" height="15" fill="rgb(213,116,39)" fg:x="7227" fg:w="170"/><text x="18.7760%" y="767.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (135 samples, 0.35%)</title><rect x="19.0028%" y="853" width="0.3461%" height="15" fill="rgb(222,207,29)" fg:x="7413" fg:w="135"/><text x="19.2528%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (135 samples, 0.35%)</title><rect x="19.0028%" y="837" width="0.3461%" height="15" fill="rgb(206,96,30)" fg:x="7413" fg:w="135"/><text x="19.2528%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.03%)</title><rect x="19.3489%" y="853" width="0.0282%" height="15" fill="rgb(218,138,4)" fg:x="7548" fg:w="11"/><text x="19.5989%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.01%)</title><rect x="19.3771%" y="853" width="0.0128%" height="15" fill="rgb(250,191,14)" fg:x="7559" fg:w="5"/><text x="19.6271%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (17 samples, 0.04%)</title><rect x="20.2384%" y="805" width="0.0436%" height="15" fill="rgb(239,60,40)" fg:x="7895" fg:w="17"/><text x="20.4884%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.04%)</title><rect x="20.2384%" y="789" width="0.0436%" height="15" fill="rgb(206,27,48)" fg:x="7895" fg:w="17"/><text x="20.4884%" y="799.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (323 samples, 0.83%)</title><rect x="20.9664%" y="773" width="0.8280%" height="15" fill="rgb(225,35,8)" fg:x="8179" fg:w="323"/><text x="21.2164%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (323 samples, 0.83%)</title><rect x="20.9664%" y="757" width="0.8280%" height="15" fill="rgb(250,213,24)" fg:x="8179" fg:w="323"/><text x="21.2164%" y="767.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (9 samples, 0.02%)</title><rect x="22.5942%" y="741" width="0.0231%" height="15" fill="rgb(247,123,22)" fg:x="8814" fg:w="9"/><text x="22.8442%" y="751.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (798 samples, 2.05%)</title><rect x="23.6401%" y="725" width="2.0456%" height="15" fill="rgb(231,138,38)" fg:x="9222" fg:w="798"/><text x="23.8901%" y="735.50">m..</text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (798 samples, 2.05%)</title><rect x="23.6401%" y="709" width="2.0456%" height="15" fill="rgb(231,145,46)" fg:x="9222" fg:w="798"/><text x="23.8901%" y="719.50">c..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1,369 samples, 3.51%)</title><rect x="22.6173%" y="741" width="3.5094%" height="15" fill="rgb(251,118,11)" fg:x="8823" fg:w="1369"/><text x="22.8673%" y="751.50">mem..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (172 samples, 0.44%)</title><rect x="25.6857%" y="725" width="0.4409%" height="15" fill="rgb(217,147,25)" fg:x="10020" fg:w="172"/><text x="25.9357%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (172 samples, 0.44%)</title><rect x="25.6857%" y="709" width="0.4409%" height="15" fill="rgb(247,81,37)" fg:x="10020" fg:w="172"/><text x="25.9357%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (71 samples, 0.18%)</title><rect x="26.1318%" y="725" width="0.1820%" height="15" fill="rgb(209,12,38)" fg:x="10194" fg:w="71"/><text x="26.3818%" y="735.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (90 samples, 0.23%)</title><rect x="26.1318%" y="741" width="0.2307%" height="15" fill="rgb(227,1,9)" fg:x="10194" fg:w="90"/><text x="26.3818%" y="751.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (19 samples, 0.05%)</title><rect x="26.3138%" y="725" width="0.0487%" height="15" fill="rgb(248,47,43)" fg:x="10265" fg:w="19"/><text x="26.5638%" y="735.50"></text></g><g><title>memchr::memchr::memchr (2,894 samples, 7.42%)</title><rect x="18.9618%" y="885" width="7.4186%" height="15" fill="rgb(221,10,30)" fg:x="7397" fg:w="2894"/><text x="19.2118%" y="895.50">memchr::me..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2,894 samples, 7.42%)</title><rect x="18.9618%" y="869" width="7.4186%" height="15" fill="rgb(210,229,1)" fg:x="7397" fg:w="2894"/><text x="19.2118%" y="879.50">memchr::ar..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (2,727 samples, 6.99%)</title><rect x="19.3899%" y="853" width="6.9905%" height="15" fill="rgb(222,148,37)" fg:x="7564" fg:w="2727"/><text x="19.6399%" y="863.50">memchr::m..</text></g><g><title>memchr::memchr::memchr_raw (2,727 samples, 6.99%)</title><rect x="19.3899%" y="837" width="6.9905%" height="15" fill="rgb(234,67,33)" fg:x="7564" fg:w="2727"/><text x="19.6399%" y="847.50">memchr::m..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2,727 samples, 6.99%)</title><rect x="19.3899%" y="821" width="6.9905%" height="15" fill="rgb(247,98,35)" fg:x="7564" fg:w="2727"/><text x="19.6399%" y="831.50">memchr::a..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2,378 samples, 6.10%)</title><rect x="20.2845%" y="805" width="6.0959%" height="15" fill="rgb(247,138,52)" fg:x="7913" fg:w="2378"/><text x="20.5345%" y="815.50">memchr::..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2,155 samples, 5.52%)</title><rect x="20.8562%" y="789" width="5.5242%" height="15" fill="rgb(213,79,30)" fg:x="8136" fg:w="2155"/><text x="21.1062%" y="799.50">memchr:..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (1,789 samples, 4.59%)</title><rect x="21.7944%" y="773" width="4.5860%" height="15" fill="rgb(246,177,23)" fg:x="8502" fg:w="1789"/><text x="22.0444%" y="783.50">memch..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1,789 samples, 4.59%)</title><rect x="21.7944%" y="757" width="4.5860%" height="15" fill="rgb(230,62,27)" fg:x="8502" fg:w="1789"/><text x="22.0444%" y="767.50">memch..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (7 samples, 0.02%)</title><rect x="26.3625%" y="741" width="0.0179%" height="15" fill="rgb(216,154,8)" fg:x="10284" fg:w="7"/><text x="26.6125%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (7 samples, 0.02%)</title><rect x="26.3625%" y="725" width="0.0179%" height="15" fill="rgb(244,35,45)" fg:x="10284" fg:w="7"/><text x="26.6125%" y="735.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (521 samples, 1.34%)</title><rect x="26.3804%" y="885" width="1.3356%" height="15" fill="rgb(251,115,12)" fg:x="10291" fg:w="521"/><text x="26.6304%" y="895.50"></text></g><g><title>rs_1brc::process_chunk::_{{closure}} (521 samples, 1.34%)</title><rect x="26.3804%" y="869" width="1.3356%" height="15" fill="rgb(240,54,50)" fg:x="10291" fg:w="521"/><text x="26.6304%" y="879.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (135 samples, 0.35%)</title><rect x="31.3381%" y="741" width="0.3461%" height="15" fill="rgb(233,84,52)" fg:x="12225" fg:w="135"/><text x="31.5881%" y="751.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (135 samples, 0.35%)</title><rect x="31.3381%" y="725" width="0.3461%" height="15" fill="rgb(207,117,47)" fg:x="12225" fg:w="135"/><text x="31.5881%" y="735.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (135 samples, 0.35%)</title><rect x="31.3381%" y="709" width="0.3461%" height="15" fill="rgb(249,43,39)" fg:x="12225" fg:w="135"/><text x="31.5881%" y="719.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (135 samples, 0.35%)</title><rect x="31.3381%" y="693" width="0.3461%" height="15" fill="rgb(209,38,44)" fg:x="12225" fg:w="135"/><text x="31.5881%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (54 samples, 0.14%)</title><rect x="31.5458%" y="677" width="0.1384%" height="15" fill="rgb(236,212,23)" fg:x="12306" fg:w="54"/><text x="31.7958%" y="687.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (101 samples, 0.26%)</title><rect x="31.6842%" y="725" width="0.2589%" height="15" fill="rgb(242,79,21)" fg:x="12360" fg:w="101"/><text x="31.9342%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1,010 samples, 2.59%)</title><rect x="31.9431%" y="725" width="2.5891%" height="15" fill="rgb(211,96,35)" fg:x="12461" fg:w="1010"/><text x="32.1931%" y="735.50">co..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (1,938 samples, 4.97%)</title><rect x="29.9436%" y="757" width="4.9680%" height="15" fill="rgb(253,215,40)" fg:x="11681" fg:w="1938"/><text x="30.1936%" y="767.50">&lt;rustc..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (1,259 samples, 3.23%)</title><rect x="31.6842%" y="741" width="3.2274%" height="15" fill="rgb(211,81,21)" fg:x="12360" fg:w="1259"/><text x="31.9342%" y="751.50">rus..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (148 samples, 0.38%)</title><rect x="34.5322%" y="725" width="0.3794%" height="15" fill="rgb(208,190,38)" fg:x="13471" fg:w="148"/><text x="34.7822%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (2,038 samples, 5.22%)</title><rect x="29.9436%" y="853" width="5.2243%" height="15" fill="rgb(235,213,38)" fg:x="11681" fg:w="2038"/><text x="30.1936%" y="863.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (2,038 samples, 5.22%)</title><rect x="29.9436%" y="837" width="5.2243%" height="15" fill="rgb(237,122,38)" fg:x="11681" fg:w="2038"/><text x="30.1936%" y="847.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,038 samples, 5.22%)</title><rect x="29.9436%" y="821" width="5.2243%" height="15" fill="rgb(244,218,35)" fg:x="11681" fg:w="2038"/><text x="30.1936%" y="831.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,038 samples, 5.22%)</title><rect x="29.9436%" y="805" width="5.2243%" height="15" fill="rgb(240,68,47)" fg:x="11681" fg:w="2038"/><text x="30.1936%" y="815.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2,038 samples, 5.22%)</title><rect x="29.9436%" y="789" width="5.2243%" height="15" fill="rgb(210,16,53)" fg:x="11681" fg:w="2038"/><text x="30.1936%" y="799.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2,038 samples, 5.22%)</title><rect x="29.9436%" y="773" width="5.2243%" height="15" fill="rgb(235,124,12)" fg:x="11681" fg:w="2038"/><text x="30.1936%" y="783.50">core::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (100 samples, 0.26%)</title><rect x="34.9116%" y="757" width="0.2563%" height="15" fill="rgb(224,169,11)" fg:x="13619" fg:w="100"/><text x="35.1616%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (821 samples, 2.10%)</title><rect x="37.2699%" y="821" width="2.1046%" height="15" fill="rgb(250,166,2)" fg:x="14539" fg:w="821"/><text x="37.5199%" y="831.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (821 samples, 2.10%)</title><rect x="37.2699%" y="805" width="2.1046%" height="15" fill="rgb(242,216,29)" fg:x="14539" fg:w="821"/><text x="37.5199%" y="815.50">h..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (692 samples, 1.77%)</title><rect x="37.6006%" y="789" width="1.7739%" height="15" fill="rgb(230,116,27)" fg:x="14668" fg:w="692"/><text x="37.8506%" y="799.50">c..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (371 samples, 0.95%)</title><rect x="39.3745%" y="805" width="0.9510%" height="15" fill="rgb(228,99,48)" fg:x="15360" fg:w="371"/><text x="39.6245%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (371 samples, 0.95%)</title><rect x="39.3745%" y="789" width="0.9510%" height="15" fill="rgb(253,11,6)" fg:x="15360" fg:w="371"/><text x="39.6245%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (371 samples, 0.95%)</title><rect x="39.3745%" y="773" width="0.9510%" height="15" fill="rgb(247,143,39)" fg:x="15360" fg:w="371"/><text x="39.6245%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (371 samples, 0.95%)</title><rect x="39.3745%" y="757" width="0.9510%" height="15" fill="rgb(236,97,10)" fg:x="15360" fg:w="371"/><text x="39.6245%" y="767.50"></text></g><g><title>[libc.so.6] (3,938 samples, 10.09%)</title><rect x="44.9064%" y="741" width="10.0948%" height="15" fill="rgb(233,208,19)" fg:x="17518" fg:w="3938"/><text x="45.1564%" y="751.50">[libc.so.6]</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,727 samples, 14.68%)</title><rect x="40.3256%" y="757" width="14.6809%" height="15" fill="rgb(216,164,2)" fg:x="15731" fg:w="5727"/><text x="40.5756%" y="767.50">&lt;[A] as core::slice::c..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6,121 samples, 15.69%)</title><rect x="39.3745%" y="821" width="15.6908%" height="15" fill="rgb(220,129,5)" fg:x="15360" fg:w="6121"/><text x="39.6245%" y="831.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (5,750 samples, 14.74%)</title><rect x="40.3256%" y="805" width="14.7398%" height="15" fill="rgb(242,17,10)" fg:x="15731" fg:w="5750"/><text x="40.5756%" y="815.50">hashbrown::rustc_entry..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,750 samples, 14.74%)</title><rect x="40.3256%" y="789" width="14.7398%" height="15" fill="rgb(242,107,0)" fg:x="15731" fg:w="5750"/><text x="40.5756%" y="799.50">core::cmp::impls::&lt;imp..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (5,750 samples, 14.74%)</title><rect x="40.3256%" y="773" width="14.7398%" height="15" fill="rgb(251,28,31)" fg:x="15731" fg:w="5750"/><text x="40.5756%" y="783.50">core::slice::cmp::&lt;imp..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (23 samples, 0.06%)</title><rect x="55.0064%" y="757" width="0.0590%" height="15" fill="rgb(233,223,10)" fg:x="21458" fg:w="23"/><text x="55.2564%" y="767.50"></text></g><g><title>hashbrown::raw::h2 (1,041 samples, 2.67%)</title><rect x="55.0654%" y="821" width="2.6685%" height="15" fill="rgb(215,21,27)" fg:x="21481" fg:w="1041"/><text x="55.3154%" y="831.50">ha..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.02%)</title><rect x="57.7339%" y="789" width="0.0154%" height="15" fill="rgb(232,23,21)" fg:x="22522" fg:w="6"/><text x="57.9839%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (223 samples, 0.57%)</title><rect x="57.7339%" y="821" width="0.5716%" height="15" fill="rgb(244,5,23)" fg:x="22522" fg:w="223"/><text x="57.9839%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (223 samples, 0.57%)</title><rect x="57.7339%" y="805" width="0.5716%" height="15" fill="rgb(226,81,46)" fg:x="22522" fg:w="223"/><text x="57.9839%" y="815.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (217 samples, 0.56%)</title><rect x="57.7493%" y="789" width="0.5563%" height="15" fill="rgb(247,70,30)" fg:x="22528" fg:w="217"/><text x="57.9993%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,545 samples, 3.96%)</title><rect x="58.3056%" y="821" width="3.9605%" height="15" fill="rgb(212,68,19)" fg:x="22745" fg:w="1545"/><text x="58.5556%" y="831.50">hash..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,545 samples, 3.96%)</title><rect x="58.3056%" y="805" width="3.9605%" height="15" fill="rgb(240,187,13)" fg:x="22745" fg:w="1545"/><text x="58.5556%" y="815.50">core..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (217 samples, 0.56%)</title><rect x="62.2661%" y="821" width="0.5563%" height="15" fill="rgb(223,113,26)" fg:x="24290" fg:w="217"/><text x="62.5161%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (217 samples, 0.56%)</title><rect x="62.2661%" y="805" width="0.5563%" height="15" fill="rgb(206,192,2)" fg:x="24290" fg:w="217"/><text x="62.5161%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (217 samples, 0.56%)</title><rect x="62.2661%" y="789" width="0.5563%" height="15" fill="rgb(241,108,4)" fg:x="24290" fg:w="217"/><text x="62.5161%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10,280 samples, 26.35%)</title><rect x="36.5496%" y="837" width="26.3522%" height="15" fill="rgb(247,173,49)" fg:x="14258" fg:w="10280"/><text x="36.7996%" y="847.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (31 samples, 0.08%)</title><rect x="62.8224%" y="821" width="0.0795%" height="15" fill="rgb(224,114,35)" fg:x="24507" fg:w="31"/><text x="63.0724%" y="831.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (13,738 samples, 35.22%)</title><rect x="27.7160%" y="869" width="35.2166%" height="15" fill="rgb(245,159,27)" fg:x="10812" fg:w="13738"/><text x="27.9660%" y="879.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10,831 samples, 27.76%)</title><rect x="35.1679%" y="853" width="27.7647%" height="15" fill="rgb(245,172,44)" fg:x="13719" fg:w="10831"/><text x="35.4179%" y="863.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (12 samples, 0.03%)</title><rect x="62.9018%" y="837" width="0.0308%" height="15" fill="rgb(236,23,11)" fg:x="24538" fg:w="12"/><text x="63.1518%" y="847.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (24,610 samples, 63.09%)</title><rect x="0.0718%" y="1029" width="63.0864%" height="15" fill="rgb(205,117,38)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="1039.50">rayon::iter::plumbing::Producer::fold_with</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (24,610 samples, 63.09%)</title><rect x="0.0718%" y="1013" width="63.0864%" height="15" fill="rgb(237,72,25)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="1023.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (24,610 samples, 63.09%)</title><rect x="0.0718%" y="997" width="63.0864%" height="15" fill="rgb(244,70,9)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="1007.50">rayon::iter::plumbing::Folder::consume_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,610 samples, 63.09%)</title><rect x="0.0718%" y="981" width="63.0864%" height="15" fill="rgb(217,125,39)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="991.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (24,610 samples, 63.09%)</title><rect x="0.0718%" y="965" width="63.0864%" height="15" fill="rgb(235,36,10)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="975.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (24,610 samples, 63.09%)</title><rect x="0.0718%" y="949" width="63.0864%" height="15" fill="rgb(251,123,47)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="959.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (24,610 samples, 63.09%)</title><rect x="0.0718%" y="933" width="63.0864%" height="15" fill="rgb(221,13,13)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="943.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut</text></g><g><title>rs_1brc::main::_{{closure}} (24,610 samples, 63.09%)</title><rect x="0.0718%" y="917" width="63.0864%" height="15" fill="rgb(238,131,9)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="927.50">rs_1brc::main::_{{closure}}</text></g><g><title>rs_1brc::process_chunk (24,610 samples, 63.09%)</title><rect x="0.0718%" y="901" width="63.0864%" height="15" fill="rgb(211,50,8)" fg:x="28" fg:w="24610"/><text x="0.3218%" y="911.50">rs_1brc::process_chunk</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (13,826 samples, 35.44%)</title><rect x="27.7160%" y="885" width="35.4422%" height="15" fill="rgb(245,182,24)" fg:x="10812" fg:w="13826"/><text x="27.9660%" y="895.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (88 samples, 0.23%)</title><rect x="62.9326%" y="869" width="0.2256%" height="15" fill="rgb(242,14,37)" fg:x="24550" fg:w="88"/><text x="63.1826%" y="879.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (6 samples, 0.02%)</title><rect x="63.1582%" y="981" width="0.0154%" height="15" fill="rgb(246,228,12)" fg:x="24638" fg:w="6"/><text x="63.4082%" y="991.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (6 samples, 0.02%)</title><rect x="63.1582%" y="965" width="0.0154%" height="15" fill="rgb(213,55,15)" fg:x="24638" fg:w="6"/><text x="63.4082%" y="975.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (85 samples, 0.22%)</title><rect x="63.3991%" y="693" width="0.2179%" height="15" fill="rgb(209,9,3)" fg:x="24732" fg:w="85"/><text x="63.6491%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (171 samples, 0.44%)</title><rect x="63.3991%" y="709" width="0.4383%" height="15" fill="rgb(230,59,30)" fg:x="24732" fg:w="171"/><text x="63.6491%" y="719.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (86 samples, 0.22%)</title><rect x="63.6170%" y="693" width="0.2205%" height="15" fill="rgb(209,121,21)" fg:x="24817" fg:w="86"/><text x="63.8670%" y="703.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (981 samples, 2.51%)</title><rect x="64.4271%" y="629" width="2.5147%" height="15" fill="rgb(220,109,13)" fg:x="25133" fg:w="981"/><text x="64.6771%" y="639.50">&lt;f..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (14 samples, 0.04%)</title><rect x="66.9418%" y="629" width="0.0359%" height="15" fill="rgb(232,18,1)" fg:x="26114" fg:w="14"/><text x="67.1918%" y="639.50"></text></g><g><title>fast_float::number::Number::try_fast_path (1,193 samples, 3.06%)</title><rect x="63.9938%" y="645" width="3.0582%" height="15" fill="rgb(215,41,42)" fg:x="24964" fg:w="1193"/><text x="64.2438%" y="655.50">fas..</text></g><g><title>fast_float::number::Number::is_fast_path (28 samples, 0.07%)</title><rect x="66.9803%" y="629" width="0.0718%" height="15" fill="rgb(224,123,36)" fg:x="26129" fg:w="28"/><text x="67.2303%" y="639.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (59 samples, 0.15%)</title><rect x="67.7314%" y="629" width="0.1512%" height="15" fill="rgb(240,125,3)" fg:x="26422" fg:w="59"/><text x="67.9814%" y="639.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (54 samples, 0.14%)</title><rect x="67.7442%" y="613" width="0.1384%" height="15" fill="rgb(205,98,50)" fg:x="26427" fg:w="54"/><text x="67.9942%" y="623.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (5 samples, 0.01%)</title><rect x="67.8826%" y="629" width="0.0128%" height="15" fill="rgb(205,185,37)" fg:x="26481" fg:w="5"/><text x="68.1326%" y="639.50"></text></g><g><title>fast_float::common::AsciiStr::first (6 samples, 0.02%)</title><rect x="67.8954%" y="629" width="0.0154%" height="15" fill="rgb(238,207,15)" fg:x="26486" fg:w="6"/><text x="68.1454%" y="639.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (28 samples, 0.07%)</title><rect x="67.9108%" y="629" width="0.0718%" height="15" fill="rgb(213,199,42)" fg:x="26492" fg:w="28"/><text x="68.1608%" y="639.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (28 samples, 0.07%)</title><rect x="67.9108%" y="613" width="0.0718%" height="15" fill="rgb(235,201,11)" fg:x="26492" fg:w="28"/><text x="68.1608%" y="623.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (80 samples, 0.21%)</title><rect x="67.9826%" y="629" width="0.2051%" height="15" fill="rgb(207,46,11)" fg:x="26520" fg:w="80"/><text x="68.2326%" y="639.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (80 samples, 0.21%)</title><rect x="67.9826%" y="613" width="0.2051%" height="15" fill="rgb(241,35,35)" fg:x="26520" fg:w="80"/><text x="68.2326%" y="623.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (46 samples, 0.12%)</title><rect x="68.0697%" y="597" width="0.1179%" height="15" fill="rgb(243,32,47)" fg:x="26554" fg:w="46"/><text x="68.3197%" y="607.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (134 samples, 0.34%)</title><rect x="68.5132%" y="597" width="0.3435%" height="15" fill="rgb(247,202,23)" fg:x="26727" fg:w="134"/><text x="68.7632%" y="607.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8 samples, 0.02%)</title><rect x="68.8567%" y="597" width="0.0205%" height="15" fill="rgb(219,102,11)" fg:x="26861" fg:w="8"/><text x="69.1067%" y="607.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (89 samples, 0.23%)</title><rect x="68.8823%" y="597" width="0.2281%" height="15" fill="rgb(243,110,44)" fg:x="26871" fg:w="89"/><text x="69.1323%" y="607.50"></text></g><g><title>fast_float::common::AsciiStr::step (32 samples, 0.08%)</title><rect x="69.1105%" y="597" width="0.0820%" height="15" fill="rgb(222,74,54)" fg:x="26960" fg:w="32"/><text x="69.3605%" y="607.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (32 samples, 0.08%)</title><rect x="69.1105%" y="581" width="0.0820%" height="15" fill="rgb(216,99,12)" fg:x="26960" fg:w="32"/><text x="69.3605%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (32 samples, 0.08%)</title><rect x="69.1105%" y="565" width="0.0820%" height="15" fill="rgb(226,22,26)" fg:x="26960" fg:w="32"/><text x="69.3605%" y="575.50"></text></g><g><title>fast_float::parse (2,187 samples, 5.61%)</title><rect x="63.8375%" y="709" width="5.6063%" height="15" fill="rgb(217,163,10)" fg:x="24903" fg:w="2187"/><text x="64.0875%" y="719.50">fast_fl..</text></g><g><title>fast_float::FastFloat::parse_float (2,187 samples, 5.61%)</title><rect x="63.8375%" y="693" width="5.6063%" height="15" fill="rgb(213,25,53)" fg:x="24903" fg:w="2187"/><text x="64.0875%" y="703.50">fast_fl..</text></g><g><title>fast_float::FastFloat::parse_float_partial (2,187 samples, 5.61%)</title><rect x="63.8375%" y="677" width="5.6063%" height="15" fill="rgb(252,105,26)" fg:x="24903" fg:w="2187"/><text x="64.0875%" y="687.50">fast_fl..</text></g><g><title>fast_float::parse::parse_float (2,187 samples, 5.61%)</title><rect x="63.8375%" y="661" width="5.6063%" height="15" fill="rgb(220,39,43)" fg:x="24903" fg:w="2187"/><text x="64.0875%" y="671.50">fast_fl..</text></g><g><title>fast_float::number::parse_number (933 samples, 2.39%)</title><rect x="67.0520%" y="645" width="2.3917%" height="15" fill="rgb(229,68,48)" fg:x="26157" fg:w="933"/><text x="67.3020%" y="655.50">fa..</text></g><g><title>fast_float::number::try_parse_digits (490 samples, 1.26%)</title><rect x="68.1876%" y="629" width="1.2561%" height="15" fill="rgb(252,8,32)" fg:x="26600" fg:w="490"/><text x="68.4376%" y="639.50"></text></g><g><title>fast_float::common::AsciiStr::parse_digits (490 samples, 1.26%)</title><rect x="68.1876%" y="613" width="1.2561%" height="15" fill="rgb(223,20,43)" fg:x="26600" fg:w="490"/><text x="68.4376%" y="623.50"></text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (98 samples, 0.25%)</title><rect x="69.1925%" y="597" width="0.2512%" height="15" fill="rgb(229,81,49)" fg:x="26992" fg:w="98"/><text x="69.4425%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (44 samples, 0.11%)</title><rect x="69.3309%" y="581" width="0.1128%" height="15" fill="rgb(236,28,36)" fg:x="27046" fg:w="44"/><text x="69.5809%" y="591.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (48 samples, 0.12%)</title><rect x="69.4642%" y="677" width="0.1230%" height="15" fill="rgb(249,185,26)" fg:x="27098" fg:w="48"/><text x="69.7142%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (48 samples, 0.12%)</title><rect x="69.4642%" y="661" width="0.1230%" height="15" fill="rgb(249,174,33)" fg:x="27098" fg:w="48"/><text x="69.7142%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.01%)</title><rect x="69.5873%" y="677" width="0.0103%" height="15" fill="rgb(233,201,37)" fg:x="27146" fg:w="4"/><text x="69.8373%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (11 samples, 0.03%)</title><rect x="69.8846%" y="629" width="0.0282%" height="15" fill="rgb(221,78,26)" fg:x="27262" fg:w="11"/><text x="70.1346%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.03%)</title><rect x="69.8846%" y="613" width="0.0282%" height="15" fill="rgb(250,127,30)" fg:x="27262" fg:w="11"/><text x="70.1346%" y="623.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (102 samples, 0.26%)</title><rect x="70.1512%" y="597" width="0.2615%" height="15" fill="rgb(230,49,44)" fg:x="27366" fg:w="102"/><text x="70.4012%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (102 samples, 0.26%)</title><rect x="70.1512%" y="581" width="0.2615%" height="15" fill="rgb(229,67,23)" fg:x="27366" fg:w="102"/><text x="70.4012%" y="591.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (334 samples, 0.86%)</title><rect x="71.0613%" y="549" width="0.8562%" height="15" fill="rgb(249,83,47)" fg:x="27721" fg:w="334"/><text x="71.3113%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (334 samples, 0.86%)</title><rect x="71.0613%" y="533" width="0.8562%" height="15" fill="rgb(215,43,3)" fg:x="27721" fg:w="334"/><text x="71.3113%" y="543.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (538 samples, 1.38%)</title><rect x="70.6998%" y="565" width="1.3791%" height="15" fill="rgb(238,154,13)" fg:x="27580" fg:w="538"/><text x="70.9498%" y="575.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (63 samples, 0.16%)</title><rect x="71.9175%" y="549" width="0.1615%" height="15" fill="rgb(219,56,2)" fg:x="28055" fg:w="63"/><text x="72.1675%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (63 samples, 0.16%)</title><rect x="71.9175%" y="533" width="0.1615%" height="15" fill="rgb(233,0,4)" fg:x="28055" fg:w="63"/><text x="72.1675%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (37 samples, 0.09%)</title><rect x="72.0790%" y="549" width="0.0948%" height="15" fill="rgb(235,30,7)" fg:x="28118" fg:w="37"/><text x="72.3290%" y="559.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (42 samples, 0.11%)</title><rect x="72.0790%" y="565" width="0.1077%" height="15" fill="rgb(250,79,13)" fg:x="28118" fg:w="42"/><text x="72.3290%" y="575.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (5 samples, 0.01%)</title><rect x="72.1738%" y="549" width="0.0128%" height="15" fill="rgb(211,146,34)" fg:x="28155" fg:w="5"/><text x="72.4238%" y="559.50"></text></g><g><title>memchr::memchr::memchr (1,076 samples, 2.76%)</title><rect x="69.4437%" y="709" width="2.7583%" height="15" fill="rgb(228,22,38)" fg:x="27090" fg:w="1076"/><text x="69.6937%" y="719.50">me..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (1,076 samples, 2.76%)</title><rect x="69.4437%" y="693" width="2.7583%" height="15" fill="rgb(235,168,5)" fg:x="27090" fg:w="1076"/><text x="69.6937%" y="703.50">me..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (1,015 samples, 2.60%)</title><rect x="69.6001%" y="677" width="2.6019%" height="15" fill="rgb(221,155,16)" fg:x="27151" fg:w="1015"/><text x="69.8501%" y="687.50">me..</text></g><g><title>memchr::memchr::memchr_raw (1,015 samples, 2.60%)</title><rect x="69.6001%" y="661" width="2.6019%" height="15" fill="rgb(215,215,53)" fg:x="27151" fg:w="1015"/><text x="69.8501%" y="671.50">me..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (1,015 samples, 2.60%)</title><rect x="69.6001%" y="645" width="2.6019%" height="15" fill="rgb(223,4,10)" fg:x="27151" fg:w="1015"/><text x="69.8501%" y="655.50">me..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (892 samples, 2.29%)</title><rect x="69.9154%" y="629" width="2.2866%" height="15" fill="rgb(234,103,6)" fg:x="27274" fg:w="892"/><text x="70.1654%" y="639.50">m..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (816 samples, 2.09%)</title><rect x="70.1102%" y="613" width="2.0918%" height="15" fill="rgb(227,97,0)" fg:x="27350" fg:w="816"/><text x="70.3602%" y="623.50">m..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (698 samples, 1.79%)</title><rect x="70.4127%" y="597" width="1.7893%" height="15" fill="rgb(234,150,53)" fg:x="27468" fg:w="698"/><text x="70.6627%" y="607.50">m..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (698 samples, 1.79%)</title><rect x="70.4127%" y="581" width="1.7893%" height="15" fill="rgb(228,201,54)" fg:x="27468" fg:w="698"/><text x="70.6627%" y="591.50">m..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (6 samples, 0.02%)</title><rect x="72.1866%" y="565" width="0.0154%" height="15" fill="rgb(222,22,37)" fg:x="28160" fg:w="6"/><text x="72.4366%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (6 samples, 0.02%)</title><rect x="72.1866%" y="549" width="0.0154%" height="15" fill="rgb(237,53,32)" fg:x="28160" fg:w="6"/><text x="72.4366%" y="559.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (135 samples, 0.35%)</title><rect x="72.2020%" y="709" width="0.3461%" height="15" fill="rgb(233,25,53)" fg:x="28166" fg:w="135"/><text x="72.4520%" y="719.50"></text></g><g><title>rs_1brc::process_chunk::_{{closure}} (135 samples, 0.35%)</title><rect x="72.2020%" y="693" width="0.3461%" height="15" fill="rgb(210,40,34)" fg:x="28166" fg:w="135"/><text x="72.4520%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (40 samples, 0.10%)</title><rect x="73.9554%" y="565" width="0.1025%" height="15" fill="rgb(241,220,44)" fg:x="28850" fg:w="40"/><text x="74.2054%" y="575.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (40 samples, 0.10%)</title><rect x="73.9554%" y="549" width="0.1025%" height="15" fill="rgb(235,28,35)" fg:x="28850" fg:w="40"/><text x="74.2054%" y="559.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (40 samples, 0.10%)</title><rect x="73.9554%" y="533" width="0.1025%" height="15" fill="rgb(210,56,17)" fg:x="28850" fg:w="40"/><text x="74.2054%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (40 samples, 0.10%)</title><rect x="73.9554%" y="517" width="0.1025%" height="15" fill="rgb(224,130,29)" fg:x="28850" fg:w="40"/><text x="74.2054%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (15 samples, 0.04%)</title><rect x="74.0195%" y="501" width="0.0385%" height="15" fill="rgb(235,212,8)" fg:x="28875" fg:w="15"/><text x="74.2695%" y="511.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (31 samples, 0.08%)</title><rect x="74.0579%" y="549" width="0.0795%" height="15" fill="rgb(223,33,50)" fg:x="28890" fg:w="31"/><text x="74.3079%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (314 samples, 0.80%)</title><rect x="74.1374%" y="549" width="0.8049%" height="15" fill="rgb(219,149,13)" fg:x="28921" fg:w="314"/><text x="74.3874%" y="559.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (623 samples, 1.60%)</title><rect x="73.4145%" y="581" width="1.5970%" height="15" fill="rgb(250,156,29)" fg:x="28639" fg:w="623"/><text x="73.6645%" y="591.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (372 samples, 0.95%)</title><rect x="74.0579%" y="565" width="0.9536%" height="15" fill="rgb(216,193,19)" fg:x="28890" fg:w="372"/><text x="74.3079%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (27 samples, 0.07%)</title><rect x="74.9423%" y="549" width="0.0692%" height="15" fill="rgb(216,135,14)" fg:x="29235" fg:w="27"/><text x="75.1923%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (665 samples, 1.70%)</title><rect x="73.4145%" y="677" width="1.7047%" height="15" fill="rgb(241,47,5)" fg:x="28639" fg:w="665"/><text x="73.6645%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (665 samples, 1.70%)</title><rect x="73.4145%" y="661" width="1.7047%" height="15" fill="rgb(233,42,35)" fg:x="28639" fg:w="665"/><text x="73.6645%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (665 samples, 1.70%)</title><rect x="73.4145%" y="645" width="1.7047%" height="15" fill="rgb(231,13,6)" fg:x="28639" fg:w="665"/><text x="73.6645%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (665 samples, 1.70%)</title><rect x="73.4145%" y="629" width="1.7047%" height="15" fill="rgb(207,181,40)" fg:x="28639" fg:w="665"/><text x="73.6645%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (665 samples, 1.70%)</title><rect x="73.4145%" y="613" width="1.7047%" height="15" fill="rgb(254,173,49)" fg:x="28639" fg:w="665"/><text x="73.6645%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (665 samples, 1.70%)</title><rect x="73.4145%" y="597" width="1.7047%" height="15" fill="rgb(221,1,38)" fg:x="28639" fg:w="665"/><text x="73.6645%" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (42 samples, 0.11%)</title><rect x="75.0115%" y="581" width="0.1077%" height="15" fill="rgb(206,124,46)" fg:x="29262" fg:w="42"/><text x="75.2615%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (263 samples, 0.67%)</title><rect x="75.8241%" y="645" width="0.6742%" height="15" fill="rgb(249,21,11)" fg:x="29579" fg:w="263"/><text x="76.0741%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (263 samples, 0.67%)</title><rect x="75.8241%" y="629" width="0.6742%" height="15" fill="rgb(222,201,40)" fg:x="29579" fg:w="263"/><text x="76.0741%" y="639.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (206 samples, 0.53%)</title><rect x="75.9703%" y="613" width="0.5281%" height="15" fill="rgb(235,61,29)" fg:x="29636" fg:w="206"/><text x="76.2203%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (126 samples, 0.32%)</title><rect x="76.5009%" y="629" width="0.3230%" height="15" fill="rgb(219,207,3)" fg:x="29843" fg:w="126"/><text x="76.7509%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (126 samples, 0.32%)</title><rect x="76.5009%" y="613" width="0.3230%" height="15" fill="rgb(222,56,46)" fg:x="29843" fg:w="126"/><text x="76.7509%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (126 samples, 0.32%)</title><rect x="76.5009%" y="597" width="0.3230%" height="15" fill="rgb(239,76,54)" fg:x="29843" fg:w="126"/><text x="76.7509%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (126 samples, 0.32%)</title><rect x="76.5009%" y="581" width="0.3230%" height="15" fill="rgb(231,124,27)" fg:x="29843" fg:w="126"/><text x="76.7509%" y="591.50"></text></g><g><title>[libc.so.6] (1,348 samples, 3.46%)</title><rect x="78.4004%" y="565" width="3.4555%" height="15" fill="rgb(249,195,6)" fg:x="30584" fg:w="1348"/><text x="78.6504%" y="575.50">[li..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,964 samples, 5.03%)</title><rect x="76.8239%" y="581" width="5.0346%" height="15" fill="rgb(237,174,47)" fg:x="29969" fg:w="1964"/><text x="77.0739%" y="591.50">&lt;[A] a..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,096 samples, 5.37%)</title><rect x="76.4983%" y="645" width="5.3730%" height="15" fill="rgb(206,201,31)" fg:x="29842" fg:w="2096"/><text x="76.7483%" y="655.50">hashbro..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (1,969 samples, 5.05%)</title><rect x="76.8239%" y="629" width="5.0474%" height="15" fill="rgb(231,57,52)" fg:x="29969" fg:w="1969"/><text x="77.0739%" y="639.50">hashbr..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,969 samples, 5.05%)</title><rect x="76.8239%" y="613" width="5.0474%" height="15" fill="rgb(248,177,22)" fg:x="29969" fg:w="1969"/><text x="77.0739%" y="623.50">core::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,969 samples, 5.05%)</title><rect x="76.8239%" y="597" width="5.0474%" height="15" fill="rgb(215,211,37)" fg:x="29969" fg:w="1969"/><text x="77.0739%" y="607.50">core::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.01%)</title><rect x="81.8585%" y="581" width="0.0128%" height="15" fill="rgb(241,128,51)" fg:x="31933" fg:w="5"/><text x="82.1085%" y="591.50"></text></g><g><title>hashbrown::raw::h2 (296 samples, 0.76%)</title><rect x="81.8713%" y="645" width="0.7588%" height="15" fill="rgb(227,165,31)" fg:x="31938" fg:w="296"/><text x="82.1213%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (53 samples, 0.14%)</title><rect x="82.6301%" y="645" width="0.1359%" height="15" fill="rgb(228,167,24)" fg:x="32234" fg:w="53"/><text x="82.8801%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (53 samples, 0.14%)</title><rect x="82.6301%" y="629" width="0.1359%" height="15" fill="rgb(228,143,12)" fg:x="32234" fg:w="53"/><text x="82.8801%" y="639.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (52 samples, 0.13%)</title><rect x="82.6327%" y="613" width="0.1333%" height="15" fill="rgb(249,149,8)" fg:x="32235" fg:w="52"/><text x="82.8827%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (505 samples, 1.29%)</title><rect x="82.7660%" y="645" width="1.2945%" height="15" fill="rgb(243,35,44)" fg:x="32287" fg:w="505"/><text x="83.0160%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (505 samples, 1.29%)</title><rect x="82.7660%" y="629" width="1.2945%" height="15" fill="rgb(246,89,9)" fg:x="32287" fg:w="505"/><text x="83.0160%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (52 samples, 0.13%)</title><rect x="84.0605%" y="645" width="0.1333%" height="15" fill="rgb(233,213,13)" fg:x="32792" fg:w="52"/><text x="84.3105%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (52 samples, 0.13%)</title><rect x="84.0605%" y="629" width="0.1333%" height="15" fill="rgb(233,141,41)" fg:x="32792" fg:w="52"/><text x="84.3105%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (52 samples, 0.13%)</title><rect x="84.0605%" y="613" width="0.1333%" height="15" fill="rgb(239,167,4)" fg:x="32792" fg:w="52"/><text x="84.3105%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,359 samples, 8.61%)</title><rect x="75.6063%" y="661" width="8.6106%" height="15" fill="rgb(209,217,16)" fg:x="29494" fg:w="3359"/><text x="75.8563%" y="671.50">hashbrown::r..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.02%)</title><rect x="84.1938%" y="645" width="0.0231%" height="15" fill="rgb(219,88,35)" fg:x="32844" fg:w="9"/><text x="84.4438%" y="655.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4,555 samples, 11.68%)</title><rect x="72.5481%" y="693" width="11.6765%" height="15" fill="rgb(220,193,23)" fg:x="28301" fg:w="4555"/><text x="72.7981%" y="703.50">hashbrown::rustc_..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,552 samples, 9.11%)</title><rect x="75.1192%" y="677" width="9.1054%" height="15" fill="rgb(230,90,52)" fg:x="29304" fg:w="3552"/><text x="75.3692%" y="687.50">hashbrown::ra..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (8,237 samples, 21.12%)</title><rect x="63.1735%" y="853" width="21.1151%" height="15" fill="rgb(252,106,19)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="863.50">rayon::iter::plumbing::Producer::..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (8,237 samples, 21.12%)</title><rect x="63.1735%" y="837" width="21.1151%" height="15" fill="rgb(206,74,20)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="847.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt;..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (8,237 samples, 21.12%)</title><rect x="63.1735%" y="821" width="21.1151%" height="15" fill="rgb(230,138,44)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="831.50">rayon::iter::plumbing::Folder::co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,237 samples, 21.12%)</title><rect x="63.1735%" y="805" width="21.1151%" height="15" fill="rgb(235,182,43)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="815.50">&lt;core::iter::adapters::map::Map&lt;I..</text></g><g><title>core::option::Option&lt;T&gt;::map (8,237 samples, 21.12%)</title><rect x="63.1735%" y="789" width="21.1151%" height="15" fill="rgb(242,16,51)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="799.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8,237 samples, 21.12%)</title><rect x="63.1735%" y="773" width="21.1151%" height="15" fill="rgb(248,9,4)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="783.50">core::ops::function::impls::&lt;impl..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (8,237 samples, 21.12%)</title><rect x="63.1735%" y="757" width="21.1151%" height="15" fill="rgb(210,31,22)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="767.50">core::ops::function::impls::&lt;impl..</text></g><g><title>rs_1brc::main::_{{closure}} (8,237 samples, 21.12%)</title><rect x="63.1735%" y="741" width="21.1151%" height="15" fill="rgb(239,54,39)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="751.50">rs_1brc::main::_{{closure}}</text></g><g><title>rs_1brc::process_chunk (8,237 samples, 21.12%)</title><rect x="63.1735%" y="725" width="21.1151%" height="15" fill="rgb(230,99,41)" fg:x="24644" fg:w="8237"/><text x="63.4235%" y="735.50">rs_1brc::process_chunk</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4,580 samples, 11.74%)</title><rect x="72.5481%" y="709" width="11.7406%" height="15" fill="rgb(253,106,12)" fg:x="28301" fg:w="4580"/><text x="72.7981%" y="719.50">std::collections:..</text></g><g><title>std::collections::hash::map::map_entry (25 samples, 0.06%)</title><rect x="84.2246%" y="693" width="0.0641%" height="15" fill="rgb(213,46,41)" fg:x="32856" fg:w="25"/><text x="84.4746%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.07%)</title><rect x="84.3630%" y="517" width="0.0718%" height="15" fill="rgb(215,133,35)" fg:x="32910" fg:w="28"/><text x="84.6130%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (61 samples, 0.16%)</title><rect x="84.3630%" y="533" width="0.1564%" height="15" fill="rgb(213,28,5)" fg:x="32910" fg:w="61"/><text x="84.6130%" y="543.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.08%)</title><rect x="84.4348%" y="517" width="0.0846%" height="15" fill="rgb(215,77,49)" fg:x="32938" fg:w="33"/><text x="84.6848%" y="527.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (286 samples, 0.73%)</title><rect x="84.7167%" y="453" width="0.7331%" height="15" fill="rgb(248,100,22)" fg:x="33048" fg:w="286"/><text x="84.9667%" y="463.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (4 samples, 0.01%)</title><rect x="85.4499%" y="453" width="0.0103%" height="15" fill="rgb(208,67,9)" fg:x="33334" fg:w="4"/><text x="85.6999%" y="463.50"></text></g><g><title>fast_float::number::Number::try_fast_path (358 samples, 0.92%)</title><rect x="84.5681%" y="469" width="0.9177%" height="15" fill="rgb(219,133,21)" fg:x="32990" fg:w="358"/><text x="84.8181%" y="479.50"></text></g><g><title>fast_float::number::Number::is_fast_path (10 samples, 0.03%)</title><rect x="85.4601%" y="453" width="0.0256%" height="15" fill="rgb(246,46,29)" fg:x="33338" fg:w="10"/><text x="85.7101%" y="463.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (32 samples, 0.08%)</title><rect x="85.6832%" y="453" width="0.0820%" height="15" fill="rgb(246,185,52)" fg:x="33425" fg:w="32"/><text x="85.9332%" y="463.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (26 samples, 0.07%)</title><rect x="85.6985%" y="437" width="0.0666%" height="15" fill="rgb(252,136,11)" fg:x="33431" fg:w="26"/><text x="85.9485%" y="447.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (4 samples, 0.01%)</title><rect x="85.7729%" y="453" width="0.0103%" height="15" fill="rgb(219,138,53)" fg:x="33460" fg:w="4"/><text x="86.0229%" y="463.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (4 samples, 0.01%)</title><rect x="85.7729%" y="437" width="0.0103%" height="15" fill="rgb(211,51,23)" fg:x="33460" fg:w="4"/><text x="86.0229%" y="447.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (20 samples, 0.05%)</title><rect x="85.7831%" y="453" width="0.0513%" height="15" fill="rgb(247,221,28)" fg:x="33464" fg:w="20"/><text x="86.0331%" y="463.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (20 samples, 0.05%)</title><rect x="85.7831%" y="437" width="0.0513%" height="15" fill="rgb(251,222,45)" fg:x="33464" fg:w="20"/><text x="86.0331%" y="447.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (10 samples, 0.03%)</title><rect x="85.8088%" y="421" width="0.0256%" height="15" fill="rgb(217,162,53)" fg:x="33474" fg:w="10"/><text x="86.0588%" y="431.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (53 samples, 0.14%)</title><rect x="85.9241%" y="421" width="0.1359%" height="15" fill="rgb(229,93,14)" fg:x="33519" fg:w="53"/><text x="86.1741%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7 samples, 0.02%)</title><rect x="86.0600%" y="421" width="0.0179%" height="15" fill="rgb(209,67,49)" fg:x="33572" fg:w="7"/><text x="86.3100%" y="431.50"></text></g><g><title>fast_float::common::AsciiStr::first (4 samples, 0.01%)</title><rect x="86.0779%" y="421" width="0.0103%" height="15" fill="rgb(213,87,29)" fg:x="33579" fg:w="4"/><text x="86.3279%" y="431.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (38 samples, 0.10%)</title><rect x="86.0882%" y="421" width="0.0974%" height="15" fill="rgb(205,151,52)" fg:x="33583" fg:w="38"/><text x="86.3382%" y="431.50"></text></g><g><title>fast_float::common::AsciiStr::step (16 samples, 0.04%)</title><rect x="86.1856%" y="421" width="0.0410%" height="15" fill="rgb(253,215,39)" fg:x="33621" fg:w="16"/><text x="86.4356%" y="431.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (16 samples, 0.04%)</title><rect x="86.1856%" y="405" width="0.0410%" height="15" fill="rgb(221,220,41)" fg:x="33621" fg:w="16"/><text x="86.4356%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (16 samples, 0.04%)</title><rect x="86.1856%" y="389" width="0.0410%" height="15" fill="rgb(218,133,21)" fg:x="33621" fg:w="16"/><text x="86.4356%" y="399.50"></text></g><g><title>fast_float::parse (701 samples, 1.80%)</title><rect x="84.5194%" y="533" width="1.7970%" height="15" fill="rgb(221,193,43)" fg:x="32971" fg:w="701"/><text x="84.7694%" y="543.50">f..</text></g><g><title>fast_float::FastFloat::parse_float (701 samples, 1.80%)</title><rect x="84.5194%" y="517" width="1.7970%" height="15" fill="rgb(240,128,52)" fg:x="32971" fg:w="701"/><text x="84.7694%" y="527.50">f..</text></g><g><title>fast_float::FastFloat::parse_float_partial (701 samples, 1.80%)</title><rect x="84.5194%" y="501" width="1.7970%" height="15" fill="rgb(253,114,12)" fg:x="32971" fg:w="701"/><text x="84.7694%" y="511.50">f..</text></g><g><title>fast_float::parse::parse_float (701 samples, 1.80%)</title><rect x="84.5194%" y="485" width="1.7970%" height="15" fill="rgb(215,223,47)" fg:x="32971" fg:w="701"/><text x="84.7694%" y="495.50">f..</text></g><g><title>fast_float::number::parse_number (324 samples, 0.83%)</title><rect x="85.4858%" y="469" width="0.8306%" height="15" fill="rgb(248,225,23)" fg:x="33348" fg:w="324"/><text x="85.7358%" y="479.50"></text></g><g><title>fast_float::number::try_parse_digits (188 samples, 0.48%)</title><rect x="85.8344%" y="453" width="0.4819%" height="15" fill="rgb(250,108,0)" fg:x="33484" fg:w="188"/><text x="86.0844%" y="463.50"></text></g><g><title>fast_float::common::AsciiStr::parse_digits (188 samples, 0.48%)</title><rect x="85.8344%" y="437" width="0.4819%" height="15" fill="rgb(228,208,7)" fg:x="33484" fg:w="188"/><text x="86.0844%" y="447.50"></text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (35 samples, 0.09%)</title><rect x="86.2266%" y="421" width="0.0897%" height="15" fill="rgb(244,45,10)" fg:x="33637" fg:w="35"/><text x="86.4766%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23 samples, 0.06%)</title><rect x="86.2574%" y="405" width="0.0590%" height="15" fill="rgb(207,125,25)" fg:x="33649" fg:w="23"/><text x="86.5074%" y="415.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (14 samples, 0.04%)</title><rect x="86.3240%" y="501" width="0.0359%" height="15" fill="rgb(210,195,18)" fg:x="33675" fg:w="14"/><text x="86.5740%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (14 samples, 0.04%)</title><rect x="86.3240%" y="485" width="0.0359%" height="15" fill="rgb(249,80,12)" fg:x="33675" fg:w="14"/><text x="86.5740%" y="495.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (37 samples, 0.09%)</title><rect x="86.5547%" y="421" width="0.0948%" height="15" fill="rgb(221,65,9)" fg:x="33765" fg:w="37"/><text x="86.8047%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (37 samples, 0.09%)</title><rect x="86.5547%" y="405" width="0.0948%" height="15" fill="rgb(235,49,36)" fg:x="33765" fg:w="37"/><text x="86.8047%" y="415.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (96 samples, 0.25%)</title><rect x="86.8239%" y="373" width="0.2461%" height="15" fill="rgb(225,32,20)" fg:x="33870" fg:w="96"/><text x="87.0739%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (96 samples, 0.25%)</title><rect x="86.8239%" y="357" width="0.2461%" height="15" fill="rgb(215,141,46)" fg:x="33870" fg:w="96"/><text x="87.0739%" y="367.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (143 samples, 0.37%)</title><rect x="86.7342%" y="389" width="0.3666%" height="15" fill="rgb(250,160,47)" fg:x="33835" fg:w="143"/><text x="86.9842%" y="399.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (12 samples, 0.03%)</title><rect x="87.0700%" y="373" width="0.0308%" height="15" fill="rgb(216,222,40)" fg:x="33966" fg:w="12"/><text x="87.3200%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.03%)</title><rect x="87.0700%" y="357" width="0.0308%" height="15" fill="rgb(234,217,39)" fg:x="33966" fg:w="12"/><text x="87.3200%" y="367.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (8 samples, 0.02%)</title><rect x="87.1007%" y="389" width="0.0205%" height="15" fill="rgb(207,178,40)" fg:x="33978" fg:w="8"/><text x="87.3507%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (8 samples, 0.02%)</title><rect x="87.1007%" y="373" width="0.0205%" height="15" fill="rgb(221,136,13)" fg:x="33978" fg:w="8"/><text x="87.3507%" y="383.50"></text></g><g><title>memchr::memchr::memchr (315 samples, 0.81%)</title><rect x="86.3163%" y="533" width="0.8075%" height="15" fill="rgb(249,199,10)" fg:x="33672" fg:w="315"/><text x="86.5663%" y="543.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (315 samples, 0.81%)</title><rect x="86.3163%" y="517" width="0.8075%" height="15" fill="rgb(249,222,13)" fg:x="33672" fg:w="315"/><text x="86.5663%" y="527.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (298 samples, 0.76%)</title><rect x="86.3599%" y="501" width="0.7639%" height="15" fill="rgb(244,185,38)" fg:x="33689" fg:w="298"/><text x="86.6099%" y="511.50"></text></g><g><title>memchr::memchr::memchr_raw (298 samples, 0.76%)</title><rect x="86.3599%" y="485" width="0.7639%" height="15" fill="rgb(236,202,9)" fg:x="33689" fg:w="298"/><text x="86.6099%" y="495.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (298 samples, 0.76%)</title><rect x="86.3599%" y="469" width="0.7639%" height="15" fill="rgb(250,229,37)" fg:x="33689" fg:w="298"/><text x="86.6099%" y="479.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (254 samples, 0.65%)</title><rect x="86.4727%" y="453" width="0.6511%" height="15" fill="rgb(206,174,23)" fg:x="33733" fg:w="254"/><text x="86.7227%" y="463.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (224 samples, 0.57%)</title><rect x="86.5496%" y="437" width="0.5742%" height="15" fill="rgb(211,33,43)" fg:x="33763" fg:w="224"/><text x="86.7996%" y="447.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (185 samples, 0.47%)</title><rect x="86.6496%" y="421" width="0.4742%" height="15" fill="rgb(245,58,50)" fg:x="33802" fg:w="185"/><text x="86.8996%" y="431.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (185 samples, 0.47%)</title><rect x="86.6496%" y="405" width="0.4742%" height="15" fill="rgb(244,68,36)" fg:x="33802" fg:w="185"/><text x="86.8996%" y="415.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (61 samples, 0.16%)</title><rect x="87.1238%" y="533" width="0.1564%" height="15" fill="rgb(232,229,15)" fg:x="33987" fg:w="61"/><text x="87.3738%" y="543.50"></text></g><g><title>rs_1brc::process_chunk::_{{closure}} (61 samples, 0.16%)</title><rect x="87.1238%" y="517" width="0.1564%" height="15" fill="rgb(254,30,23)" fg:x="33987" fg:w="61"/><text x="87.3738%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.04%)</title><rect x="87.6596%" y="389" width="0.0436%" height="15" fill="rgb(235,160,14)" fg:x="34196" fg:w="17"/><text x="87.9096%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.04%)</title><rect x="87.6596%" y="373" width="0.0436%" height="15" fill="rgb(212,155,44)" fg:x="34196" fg:w="17"/><text x="87.9096%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (17 samples, 0.04%)</title><rect x="87.6596%" y="357" width="0.0436%" height="15" fill="rgb(226,2,50)" fg:x="34196" fg:w="17"/><text x="87.9096%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (17 samples, 0.04%)</title><rect x="87.6596%" y="341" width="0.0436%" height="15" fill="rgb(234,177,6)" fg:x="34196" fg:w="17"/><text x="87.9096%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (7 samples, 0.02%)</title><rect x="87.6852%" y="325" width="0.0179%" height="15" fill="rgb(217,24,9)" fg:x="34206" fg:w="7"/><text x="87.9352%" y="335.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (8 samples, 0.02%)</title><rect x="87.7032%" y="373" width="0.0205%" height="15" fill="rgb(220,13,46)" fg:x="34213" fg:w="8"/><text x="87.9532%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (115 samples, 0.29%)</title><rect x="87.7237%" y="373" width="0.2948%" height="15" fill="rgb(239,221,27)" fg:x="34221" fg:w="115"/><text x="87.9737%" y="383.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (213 samples, 0.55%)</title><rect x="87.5058%" y="405" width="0.5460%" height="15" fill="rgb(222,198,25)" fg:x="34136" fg:w="213"/><text x="87.7558%" y="415.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (136 samples, 0.35%)</title><rect x="87.7032%" y="389" width="0.3486%" height="15" fill="rgb(211,99,13)" fg:x="34213" fg:w="136"/><text x="87.9532%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (13 samples, 0.03%)</title><rect x="88.0185%" y="373" width="0.0333%" height="15" fill="rgb(232,111,31)" fg:x="34336" fg:w="13"/><text x="88.2685%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (221 samples, 0.57%)</title><rect x="87.5058%" y="501" width="0.5665%" height="15" fill="rgb(245,82,37)" fg:x="34136" fg:w="221"/><text x="87.7558%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (221 samples, 0.57%)</title><rect x="87.5058%" y="485" width="0.5665%" height="15" fill="rgb(227,149,46)" fg:x="34136" fg:w="221"/><text x="87.7558%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (221 samples, 0.57%)</title><rect x="87.5058%" y="469" width="0.5665%" height="15" fill="rgb(218,36,50)" fg:x="34136" fg:w="221"/><text x="87.7558%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (221 samples, 0.57%)</title><rect x="87.5058%" y="453" width="0.5665%" height="15" fill="rgb(226,80,48)" fg:x="34136" fg:w="221"/><text x="87.7558%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (221 samples, 0.57%)</title><rect x="87.5058%" y="437" width="0.5665%" height="15" fill="rgb(238,224,15)" fg:x="34136" fg:w="221"/><text x="87.7558%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (221 samples, 0.57%)</title><rect x="87.5058%" y="421" width="0.5665%" height="15" fill="rgb(241,136,10)" fg:x="34136" fg:w="221"/><text x="87.7558%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.02%)</title><rect x="88.0518%" y="405" width="0.0205%" height="15" fill="rgb(208,32,45)" fg:x="34349" fg:w="8"/><text x="88.3018%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.16%)</title><rect x="88.2722%" y="469" width="0.1641%" height="15" fill="rgb(207,135,9)" fg:x="34435" fg:w="64"/><text x="88.5222%" y="479.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (64 samples, 0.16%)</title><rect x="88.2722%" y="453" width="0.1641%" height="15" fill="rgb(206,86,44)" fg:x="34435" fg:w="64"/><text x="88.5222%" y="463.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (57 samples, 0.15%)</title><rect x="88.2902%" y="437" width="0.1461%" height="15" fill="rgb(245,177,15)" fg:x="34442" fg:w="57"/><text x="88.5402%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (43 samples, 0.11%)</title><rect x="88.4363%" y="453" width="0.1102%" height="15" fill="rgb(206,64,50)" fg:x="34499" fg:w="43"/><text x="88.6863%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (43 samples, 0.11%)</title><rect x="88.4363%" y="437" width="0.1102%" height="15" fill="rgb(234,36,40)" fg:x="34499" fg:w="43"/><text x="88.6863%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (43 samples, 0.11%)</title><rect x="88.4363%" y="421" width="0.1102%" height="15" fill="rgb(213,64,8)" fg:x="34499" fg:w="43"/><text x="88.6863%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (43 samples, 0.11%)</title><rect x="88.4363%" y="405" width="0.1102%" height="15" fill="rgb(210,75,36)" fg:x="34499" fg:w="43"/><text x="88.6863%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (617 samples, 1.58%)</title><rect x="88.5465%" y="405" width="1.5816%" height="15" fill="rgb(229,88,21)" fg:x="34542" fg:w="617"/><text x="88.7965%" y="415.50"></text></g><g><title>[libc.so.6] (425 samples, 1.09%)</title><rect x="89.0387%" y="389" width="1.0895%" height="15" fill="rgb(252,204,47)" fg:x="34734" fg:w="425"/><text x="89.2887%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (664 samples, 1.70%)</title><rect x="88.4363%" y="469" width="1.7021%" height="15" fill="rgb(208,77,27)" fg:x="34499" fg:w="664"/><text x="88.6863%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (621 samples, 1.59%)</title><rect x="88.5465%" y="453" width="1.5919%" height="15" fill="rgb(221,76,26)" fg:x="34542" fg:w="621"/><text x="88.7965%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (621 samples, 1.59%)</title><rect x="88.5465%" y="437" width="1.5919%" height="15" fill="rgb(225,139,18)" fg:x="34542" fg:w="621"/><text x="88.7965%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (621 samples, 1.59%)</title><rect x="88.5465%" y="421" width="1.5919%" height="15" fill="rgb(230,137,11)" fg:x="34542" fg:w="621"/><text x="88.7965%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.01%)</title><rect x="90.1282%" y="405" width="0.0103%" height="15" fill="rgb(212,28,1)" fg:x="35159" fg:w="4"/><text x="90.3782%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (90 samples, 0.23%)</title><rect x="90.1384%" y="469" width="0.2307%" height="15" fill="rgb(248,164,17)" fg:x="35163" fg:w="90"/><text x="90.3884%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (20 samples, 0.05%)</title><rect x="90.3691%" y="469" width="0.0513%" height="15" fill="rgb(222,171,42)" fg:x="35253" fg:w="20"/><text x="90.6191%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20 samples, 0.05%)</title><rect x="90.3691%" y="453" width="0.0513%" height="15" fill="rgb(243,84,45)" fg:x="35253" fg:w="20"/><text x="90.6191%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (20 samples, 0.05%)</title><rect x="90.3691%" y="437" width="0.0513%" height="15" fill="rgb(252,49,23)" fg:x="35253" fg:w="20"/><text x="90.6191%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (160 samples, 0.41%)</title><rect x="90.4204%" y="469" width="0.4102%" height="15" fill="rgb(215,19,7)" fg:x="35273" fg:w="160"/><text x="90.6704%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (160 samples, 0.41%)</title><rect x="90.4204%" y="453" width="0.4102%" height="15" fill="rgb(238,81,41)" fg:x="35273" fg:w="160"/><text x="90.6704%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (9 samples, 0.02%)</title><rect x="90.8306%" y="469" width="0.0231%" height="15" fill="rgb(210,199,37)" fg:x="35433" fg:w="9"/><text x="91.0806%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.02%)</title><rect x="90.8306%" y="453" width="0.0231%" height="15" fill="rgb(244,192,49)" fg:x="35433" fg:w="9"/><text x="91.0806%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.02%)</title><rect x="90.8306%" y="437" width="0.0231%" height="15" fill="rgb(226,211,11)" fg:x="35433" fg:w="9"/><text x="91.0806%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,039 samples, 2.66%)</title><rect x="88.1979%" y="485" width="2.6634%" height="15" fill="rgb(236,162,54)" fg:x="34406" fg:w="1039"/><text x="88.4479%" y="495.50">ha..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,399 samples, 3.59%)</title><rect x="87.2802%" y="517" width="3.5863%" height="15" fill="rgb(220,229,9)" fg:x="34048" fg:w="1399"/><text x="87.5302%" y="527.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,090 samples, 2.79%)</title><rect x="88.0723%" y="501" width="2.7942%" height="15" fill="rgb(250,87,22)" fg:x="34357" fg:w="1090"/><text x="88.3223%" y="511.50">ha..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (2,574 samples, 6.60%)</title><rect x="84.2886%" y="677" width="6.5983%" height="15" fill="rgb(239,43,17)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="687.50">rayon::it..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (2,574 samples, 6.60%)</title><rect x="84.2886%" y="661" width="6.5983%" height="15" fill="rgb(231,177,25)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="671.50">&lt;rayon::i..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (2,574 samples, 6.60%)</title><rect x="84.2886%" y="645" width="6.5983%" height="15" fill="rgb(219,179,1)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="655.50">rayon::it..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,574 samples, 6.60%)</title><rect x="84.2886%" y="629" width="6.5983%" height="15" fill="rgb(238,219,53)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="639.50">&lt;core::it..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,574 samples, 6.60%)</title><rect x="84.2886%" y="613" width="6.5983%" height="15" fill="rgb(232,167,36)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="623.50">core::opt..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,574 samples, 6.60%)</title><rect x="84.2886%" y="597" width="6.5983%" height="15" fill="rgb(244,19,51)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="607.50">core::ops..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2,574 samples, 6.60%)</title><rect x="84.2886%" y="581" width="6.5983%" height="15" fill="rgb(224,6,22)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="591.50">core::ops..</text></g><g><title>rs_1brc::main::_{{closure}} (2,574 samples, 6.60%)</title><rect x="84.2886%" y="565" width="6.5983%" height="15" fill="rgb(224,145,5)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="575.50">rs_1brc::..</text></g><g><title>rs_1brc::process_chunk (2,574 samples, 6.60%)</title><rect x="84.2886%" y="549" width="6.5983%" height="15" fill="rgb(234,130,49)" fg:x="32881" fg:w="2574"/><text x="84.5386%" y="559.50">rs_1brc::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,407 samples, 3.61%)</title><rect x="87.2802%" y="533" width="3.6068%" height="15" fill="rgb(254,6,2)" fg:x="34048" fg:w="1407"/><text x="87.5302%" y="543.50">std:..</text></g><g><title>std::collections::hash::map::map_entry (8 samples, 0.02%)</title><rect x="90.8664%" y="517" width="0.0205%" height="15" fill="rgb(208,96,46)" fg:x="35447" fg:w="8"/><text x="91.1164%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.02%)</title><rect x="90.9305%" y="341" width="0.0205%" height="15" fill="rgb(239,3,39)" fg:x="35472" fg:w="8"/><text x="91.1805%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 0.04%)</title><rect x="90.9305%" y="357" width="0.0410%" height="15" fill="rgb(233,210,1)" fg:x="35472" fg:w="16"/><text x="91.1805%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.02%)</title><rect x="90.9510%" y="341" width="0.0205%" height="15" fill="rgb(244,137,37)" fg:x="35480" fg:w="8"/><text x="91.2010%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (72 samples, 0.18%)</title><rect x="91.0203%" y="277" width="0.1846%" height="15" fill="rgb(240,136,2)" fg:x="35507" fg:w="72"/><text x="91.2703%" y="287.50"></text></g><g><title>fast_float::number::Number::try_fast_path (95 samples, 0.24%)</title><rect x="90.9741%" y="293" width="0.2435%" height="15" fill="rgb(239,18,37)" fg:x="35489" fg:w="95"/><text x="91.2241%" y="303.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (10 samples, 0.03%)</title><rect x="91.2817%" y="277" width="0.0256%" height="15" fill="rgb(218,185,22)" fg:x="35609" fg:w="10"/><text x="91.5317%" y="287.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (9 samples, 0.02%)</title><rect x="91.2843%" y="261" width="0.0231%" height="15" fill="rgb(225,218,4)" fg:x="35610" fg:w="9"/><text x="91.5343%" y="271.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (5 samples, 0.01%)</title><rect x="91.3125%" y="277" width="0.0128%" height="15" fill="rgb(230,182,32)" fg:x="35621" fg:w="5"/><text x="91.5625%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (5 samples, 0.01%)</title><rect x="91.3125%" y="261" width="0.0128%" height="15" fill="rgb(242,56,43)" fg:x="35621" fg:w="5"/><text x="91.5625%" y="271.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (11 samples, 0.03%)</title><rect x="91.3253%" y="277" width="0.0282%" height="15" fill="rgb(233,99,24)" fg:x="35626" fg:w="11"/><text x="91.5753%" y="287.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (11 samples, 0.03%)</title><rect x="91.3253%" y="261" width="0.0282%" height="15" fill="rgb(234,209,42)" fg:x="35626" fg:w="11"/><text x="91.5753%" y="271.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (8 samples, 0.02%)</title><rect x="91.3330%" y="245" width="0.0205%" height="15" fill="rgb(227,7,12)" fg:x="35629" fg:w="8"/><text x="91.5830%" y="255.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (7 samples, 0.02%)</title><rect x="91.3945%" y="245" width="0.0179%" height="15" fill="rgb(245,203,43)" fg:x="35653" fg:w="7"/><text x="91.6445%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (6 samples, 0.02%)</title><rect x="91.4150%" y="245" width="0.0154%" height="15" fill="rgb(238,205,33)" fg:x="35661" fg:w="6"/><text x="91.6650%" y="255.50"></text></g><g><title>fast_float::parse (188 samples, 0.48%)</title><rect x="90.9715%" y="357" width="0.4819%" height="15" fill="rgb(231,56,7)" fg:x="35488" fg:w="188"/><text x="91.2215%" y="367.50"></text></g><g><title>fast_float::FastFloat::parse_float (188 samples, 0.48%)</title><rect x="90.9715%" y="341" width="0.4819%" height="15" fill="rgb(244,186,29)" fg:x="35488" fg:w="188"/><text x="91.2215%" y="351.50"></text></g><g><title>fast_float::FastFloat::parse_float_partial (188 samples, 0.48%)</title><rect x="90.9715%" y="325" width="0.4819%" height="15" fill="rgb(234,111,31)" fg:x="35488" fg:w="188"/><text x="91.2215%" y="335.50"></text></g><g><title>fast_float::parse::parse_float (188 samples, 0.48%)</title><rect x="90.9715%" y="309" width="0.4819%" height="15" fill="rgb(241,149,10)" fg:x="35488" fg:w="188"/><text x="91.2215%" y="319.50"></text></g><g><title>fast_float::number::parse_number (92 samples, 0.24%)</title><rect x="91.2176%" y="293" width="0.2358%" height="15" fill="rgb(249,206,44)" fg:x="35584" fg:w="92"/><text x="91.4676%" y="303.50"></text></g><g><title>fast_float::number::try_parse_digits (39 samples, 0.10%)</title><rect x="91.3535%" y="277" width="0.1000%" height="15" fill="rgb(251,153,30)" fg:x="35637" fg:w="39"/><text x="91.6035%" y="287.50"></text></g><g><title>fast_float::common::AsciiStr::parse_digits (39 samples, 0.10%)</title><rect x="91.3535%" y="261" width="0.1000%" height="15" fill="rgb(239,152,38)" fg:x="35637" fg:w="39"/><text x="91.6035%" y="271.50"></text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (9 samples, 0.02%)</title><rect x="91.4304%" y="245" width="0.0231%" height="15" fill="rgb(249,139,47)" fg:x="35667" fg:w="9"/><text x="91.6804%" y="255.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (5 samples, 0.01%)</title><rect x="91.5150%" y="245" width="0.0128%" height="15" fill="rgb(244,64,35)" fg:x="35700" fg:w="5"/><text x="91.7650%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (5 samples, 0.01%)</title><rect x="91.5150%" y="229" width="0.0128%" height="15" fill="rgb(216,46,15)" fg:x="35700" fg:w="5"/><text x="91.7650%" y="239.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (28 samples, 0.07%)</title><rect x="91.5842%" y="197" width="0.0718%" height="15" fill="rgb(250,74,19)" fg:x="35727" fg:w="28"/><text x="91.8342%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (28 samples, 0.07%)</title><rect x="91.5842%" y="181" width="0.0718%" height="15" fill="rgb(249,42,33)" fg:x="35727" fg:w="28"/><text x="91.8342%" y="191.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (41 samples, 0.11%)</title><rect x="91.5560%" y="213" width="0.1051%" height="15" fill="rgb(242,149,17)" fg:x="35716" fg:w="41"/><text x="91.8060%" y="223.50"></text></g><g><title>memchr::memchr::memchr (83 samples, 0.21%)</title><rect x="91.4535%" y="357" width="0.2128%" height="15" fill="rgb(244,29,21)" fg:x="35676" fg:w="83"/><text x="91.7035%" y="367.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (83 samples, 0.21%)</title><rect x="91.4535%" y="341" width="0.2128%" height="15" fill="rgb(220,130,37)" fg:x="35676" fg:w="83"/><text x="91.7035%" y="351.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (78 samples, 0.20%)</title><rect x="91.4663%" y="325" width="0.1999%" height="15" fill="rgb(211,67,2)" fg:x="35681" fg:w="78"/><text x="91.7163%" y="335.50"></text></g><g><title>memchr::memchr::memchr_raw (78 samples, 0.20%)</title><rect x="91.4663%" y="309" width="0.1999%" height="15" fill="rgb(235,68,52)" fg:x="35681" fg:w="78"/><text x="91.7163%" y="319.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (78 samples, 0.20%)</title><rect x="91.4663%" y="293" width="0.1999%" height="15" fill="rgb(246,142,3)" fg:x="35681" fg:w="78"/><text x="91.7163%" y="303.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (63 samples, 0.16%)</title><rect x="91.5047%" y="277" width="0.1615%" height="15" fill="rgb(241,25,7)" fg:x="35696" fg:w="63"/><text x="91.7547%" y="287.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (60 samples, 0.15%)</title><rect x="91.5124%" y="261" width="0.1538%" height="15" fill="rgb(242,119,39)" fg:x="35699" fg:w="60"/><text x="91.7624%" y="271.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (54 samples, 0.14%)</title><rect x="91.5278%" y="245" width="0.1384%" height="15" fill="rgb(241,98,45)" fg:x="35705" fg:w="54"/><text x="91.7778%" y="255.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (54 samples, 0.14%)</title><rect x="91.5278%" y="229" width="0.1384%" height="15" fill="rgb(254,28,30)" fg:x="35705" fg:w="54"/><text x="91.7778%" y="239.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (12 samples, 0.03%)</title><rect x="91.6662%" y="357" width="0.0308%" height="15" fill="rgb(241,142,54)" fg:x="35759" fg:w="12"/><text x="91.9162%" y="367.50"></text></g><g><title>rs_1brc::process_chunk::_{{closure}} (12 samples, 0.03%)</title><rect x="91.6662%" y="341" width="0.0308%" height="15" fill="rgb(222,85,15)" fg:x="35759" fg:w="12"/><text x="91.9162%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.01%)</title><rect x="91.8124%" y="213" width="0.0128%" height="15" fill="rgb(210,85,47)" fg:x="35816" fg:w="5"/><text x="92.0624%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.01%)</title><rect x="91.8124%" y="197" width="0.0128%" height="15" fill="rgb(224,206,25)" fg:x="35816" fg:w="5"/><text x="92.0624%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.01%)</title><rect x="91.8124%" y="181" width="0.0128%" height="15" fill="rgb(243,201,19)" fg:x="35816" fg:w="5"/><text x="92.0624%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.01%)</title><rect x="91.8124%" y="165" width="0.0128%" height="15" fill="rgb(236,59,4)" fg:x="35816" fg:w="5"/><text x="92.0624%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (32 samples, 0.08%)</title><rect x="91.8303%" y="197" width="0.0820%" height="15" fill="rgb(254,179,45)" fg:x="35823" fg:w="32"/><text x="92.0803%" y="207.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (66 samples, 0.17%)</title><rect x="91.7585%" y="229" width="0.1692%" height="15" fill="rgb(226,14,10)" fg:x="35795" fg:w="66"/><text x="92.0085%" y="239.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (40 samples, 0.10%)</title><rect x="91.8252%" y="213" width="0.1025%" height="15" fill="rgb(244,27,41)" fg:x="35821" fg:w="40"/><text x="92.0752%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (6 samples, 0.02%)</title><rect x="91.9123%" y="197" width="0.0154%" height="15" fill="rgb(235,35,32)" fg:x="35855" fg:w="6"/><text x="92.1623%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (67 samples, 0.17%)</title><rect x="91.7585%" y="325" width="0.1718%" height="15" fill="rgb(218,68,31)" fg:x="35795" fg:w="67"/><text x="92.0085%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (67 samples, 0.17%)</title><rect x="91.7585%" y="309" width="0.1718%" height="15" fill="rgb(207,120,37)" fg:x="35795" fg:w="67"/><text x="92.0085%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (67 samples, 0.17%)</title><rect x="91.7585%" y="293" width="0.1718%" height="15" fill="rgb(227,98,0)" fg:x="35795" fg:w="67"/><text x="92.0085%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (67 samples, 0.17%)</title><rect x="91.7585%" y="277" width="0.1718%" height="15" fill="rgb(207,7,3)" fg:x="35795" fg:w="67"/><text x="92.0085%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (67 samples, 0.17%)</title><rect x="91.7585%" y="261" width="0.1718%" height="15" fill="rgb(206,98,19)" fg:x="35795" fg:w="67"/><text x="92.0085%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (67 samples, 0.17%)</title><rect x="91.7585%" y="245" width="0.1718%" height="15" fill="rgb(217,5,26)" fg:x="35795" fg:w="67"/><text x="92.0085%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.06%)</title><rect x="91.9995%" y="293" width="0.0564%" height="15" fill="rgb(235,190,38)" fg:x="35889" fg:w="22"/><text x="92.2495%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (22 samples, 0.06%)</title><rect x="91.9995%" y="277" width="0.0564%" height="15" fill="rgb(247,86,24)" fg:x="35889" fg:w="22"/><text x="92.2495%" y="287.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (18 samples, 0.05%)</title><rect x="92.0097%" y="261" width="0.0461%" height="15" fill="rgb(205,101,16)" fg:x="35893" fg:w="18"/><text x="92.2597%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 0.02%)</title><rect x="92.0559%" y="277" width="0.0179%" height="15" fill="rgb(246,168,33)" fg:x="35911" fg:w="7"/><text x="92.3059%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7 samples, 0.02%)</title><rect x="92.0559%" y="261" width="0.0179%" height="15" fill="rgb(231,114,1)" fg:x="35911" fg:w="7"/><text x="92.3059%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 0.02%)</title><rect x="92.0559%" y="245" width="0.0179%" height="15" fill="rgb(207,184,53)" fg:x="35911" fg:w="7"/><text x="92.3059%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.02%)</title><rect x="92.0559%" y="229" width="0.0179%" height="15" fill="rgb(224,95,51)" fg:x="35911" fg:w="7"/><text x="92.3059%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (171 samples, 0.44%)</title><rect x="92.0738%" y="229" width="0.4383%" height="15" fill="rgb(212,188,45)" fg:x="35918" fg:w="171"/><text x="92.3238%" y="239.50"></text></g><g><title>[libc.so.6] (108 samples, 0.28%)</title><rect x="92.2353%" y="213" width="0.2769%" height="15" fill="rgb(223,154,38)" fg:x="35981" fg:w="108"/><text x="92.4853%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (179 samples, 0.46%)</title><rect x="92.0559%" y="293" width="0.4589%" height="15" fill="rgb(251,22,52)" fg:x="35911" fg:w="179"/><text x="92.3059%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (172 samples, 0.44%)</title><rect x="92.0738%" y="277" width="0.4409%" height="15" fill="rgb(229,209,22)" fg:x="35918" fg:w="172"/><text x="92.3238%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (172 samples, 0.44%)</title><rect x="92.0738%" y="261" width="0.4409%" height="15" fill="rgb(234,138,34)" fg:x="35918" fg:w="172"/><text x="92.3238%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (172 samples, 0.44%)</title><rect x="92.0738%" y="245" width="0.4409%" height="15" fill="rgb(212,95,11)" fg:x="35918" fg:w="172"/><text x="92.3238%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (32 samples, 0.08%)</title><rect x="92.5147%" y="293" width="0.0820%" height="15" fill="rgb(240,179,47)" fg:x="36090" fg:w="32"/><text x="92.7647%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.02%)</title><rect x="92.5968%" y="293" width="0.0154%" height="15" fill="rgb(240,163,11)" fg:x="36122" fg:w="6"/><text x="92.8468%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.02%)</title><rect x="92.5968%" y="277" width="0.0154%" height="15" fill="rgb(236,37,12)" fg:x="36122" fg:w="6"/><text x="92.8468%" y="287.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6 samples, 0.02%)</title><rect x="92.5968%" y="261" width="0.0154%" height="15" fill="rgb(232,164,16)" fg:x="36122" fg:w="6"/><text x="92.8468%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (37 samples, 0.09%)</title><rect x="92.6122%" y="293" width="0.0948%" height="15" fill="rgb(244,205,15)" fg:x="36128" fg:w="37"/><text x="92.8622%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (37 samples, 0.09%)</title><rect x="92.6122%" y="277" width="0.0948%" height="15" fill="rgb(223,117,47)" fg:x="36128" fg:w="37"/><text x="92.8622%" y="287.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (401 samples, 1.03%)</title><rect x="91.6970%" y="341" width="1.0279%" height="15" fill="rgb(244,107,35)" fg:x="35771" fg:w="401"/><text x="91.9470%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (310 samples, 0.79%)</title><rect x="91.9303%" y="325" width="0.7947%" height="15" fill="rgb(205,140,8)" fg:x="35862" fg:w="310"/><text x="92.1803%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (290 samples, 0.74%)</title><rect x="91.9815%" y="309" width="0.7434%" height="15" fill="rgb(228,84,46)" fg:x="35882" fg:w="290"/><text x="92.2315%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (7 samples, 0.02%)</title><rect x="92.7070%" y="293" width="0.0179%" height="15" fill="rgb(254,188,9)" fg:x="36165" fg:w="7"/><text x="92.9570%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.02%)</title><rect x="92.7070%" y="277" width="0.0179%" height="15" fill="rgb(206,112,54)" fg:x="36165" fg:w="7"/><text x="92.9570%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.02%)</title><rect x="92.7070%" y="261" width="0.0179%" height="15" fill="rgb(216,84,49)" fg:x="36165" fg:w="7"/><text x="92.9570%" y="271.50"></text></g><g><title>rayon_core::join::join_context::call_b::_{{closure}} (36,145 samples, 92.66%)</title><rect x="0.0718%" y="1077" width="92.6557%" height="15" fill="rgb(214,194,35)" fg:x="28" fg:w="36145"/><text x="0.3218%" y="1087.50">rayon_core::join::join_context::call_b::_{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (36,145 samples, 92.66%)</title><rect x="0.0718%" y="1061" width="92.6557%" height="15" fill="rgb(249,28,3)" fg:x="28" fg:w="36145"/><text x="0.3218%" y="1071.50">rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (36,145 samples, 92.66%)</title><rect x="0.0718%" y="1045" width="92.6557%" height="15" fill="rgb(222,56,52)" fg:x="28" fg:w="36145"/><text x="0.3218%" y="1055.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon_core::join::join_context (11,535 samples, 29.57%)</title><rect x="63.1582%" y="1029" width="29.5693%" height="15" fill="rgb(245,217,50)" fg:x="24638" fg:w="11535"/><text x="63.4082%" y="1039.50">rayon_core::join::join_context</text></g><g><title>rayon_core::registry::in_worker (11,535 samples, 29.57%)</title><rect x="63.1582%" y="1013" width="29.5693%" height="15" fill="rgb(213,201,24)" fg:x="24638" fg:w="11535"/><text x="63.4082%" y="1023.50">rayon_core::registry::in_worker</text></g><g><title>rayon_core::join::join_context::_{{closure}} (11,535 samples, 29.57%)</title><rect x="63.1582%" y="997" width="29.5693%" height="15" fill="rgb(248,116,28)" fg:x="24638" fg:w="11535"/><text x="63.4082%" y="1007.50">rayon_core::join::join_context::_{{closure}}</text></g><g><title>rayon_core::unwind::halt_unwinding (11,529 samples, 29.55%)</title><rect x="63.1735%" y="981" width="29.5540%" height="15" fill="rgb(219,72,43)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="991.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (11,529 samples, 29.55%)</title><rect x="63.1735%" y="965" width="29.5540%" height="15" fill="rgb(209,138,14)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (11,529 samples, 29.55%)</title><rect x="63.1735%" y="949" width="29.5540%" height="15" fill="rgb(222,18,33)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (11,529 samples, 29.55%)</title><rect x="63.1735%" y="933" width="29.5540%" height="15" fill="rgb(213,199,7)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="943.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,529 samples, 29.55%)</title><rect x="63.1735%" y="917" width="29.5540%" height="15" fill="rgb(250,110,10)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="927.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; a..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (11,529 samples, 29.55%)</title><rect x="63.1735%" y="901" width="29.5540%" height="15" fill="rgb(248,123,6)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="911.50">rayon_core::join::join_context::call_a::_{{closu..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (11,529 samples, 29.55%)</title><rect x="63.1735%" y="885" width="29.5540%" height="15" fill="rgb(206,91,31)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="895.50">rayon::iter::plumbing::bridge_producer_consumer:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (11,529 samples, 29.55%)</title><rect x="63.1735%" y="869" width="29.5540%" height="15" fill="rgb(211,154,13)" fg:x="24644" fg:w="11529"/><text x="63.4235%" y="879.50">rayon::iter::plumbing::bridge_producer_consumer:..</text></g><g><title>rayon_core::join::join_context (3,292 samples, 8.44%)</title><rect x="84.2886%" y="853" width="8.4389%" height="15" fill="rgb(225,148,7)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="863.50">rayon_core::..</text></g><g><title>rayon_core::registry::in_worker (3,292 samples, 8.44%)</title><rect x="84.2886%" y="837" width="8.4389%" height="15" fill="rgb(220,160,43)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="847.50">rayon_core::..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (3,292 samples, 8.44%)</title><rect x="84.2886%" y="821" width="8.4389%" height="15" fill="rgb(213,52,39)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="831.50">rayon_core::..</text></g><g><title>rayon_core::unwind::halt_unwinding (3,292 samples, 8.44%)</title><rect x="84.2886%" y="805" width="8.4389%" height="15" fill="rgb(243,137,7)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="815.50">rayon_core::..</text></g><g><title>std::panic::catch_unwind (3,292 samples, 8.44%)</title><rect x="84.2886%" y="789" width="8.4389%" height="15" fill="rgb(230,79,13)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="799.50">std::panic::..</text></g><g><title>std::panicking::try (3,292 samples, 8.44%)</title><rect x="84.2886%" y="773" width="8.4389%" height="15" fill="rgb(247,105,23)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="783.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (3,292 samples, 8.44%)</title><rect x="84.2886%" y="757" width="8.4389%" height="15" fill="rgb(223,179,41)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="767.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,292 samples, 8.44%)</title><rect x="84.2886%" y="741" width="8.4389%" height="15" fill="rgb(218,9,34)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="751.50">&lt;core::panic..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (3,292 samples, 8.44%)</title><rect x="84.2886%" y="725" width="8.4389%" height="15" fill="rgb(222,106,8)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="735.50">rayon_core::..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (3,292 samples, 8.44%)</title><rect x="84.2886%" y="709" width="8.4389%" height="15" fill="rgb(211,220,0)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="719.50">rayon::iter:..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (3,292 samples, 8.44%)</title><rect x="84.2886%" y="693" width="8.4389%" height="15" fill="rgb(229,52,16)" fg:x="32881" fg:w="3292"/><text x="84.5386%" y="703.50">rayon::iter:..</text></g><g><title>rayon_core::join::join_context (718 samples, 1.84%)</title><rect x="90.8870%" y="677" width="1.8406%" height="15" fill="rgb(212,155,18)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="687.50">r..</text></g><g><title>rayon_core::registry::in_worker (718 samples, 1.84%)</title><rect x="90.8870%" y="661" width="1.8406%" height="15" fill="rgb(242,21,14)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="671.50">r..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (718 samples, 1.84%)</title><rect x="90.8870%" y="645" width="1.8406%" height="15" fill="rgb(222,19,48)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="655.50">r..</text></g><g><title>rayon_core::unwind::halt_unwinding (718 samples, 1.84%)</title><rect x="90.8870%" y="629" width="1.8406%" height="15" fill="rgb(232,45,27)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="639.50">r..</text></g><g><title>std::panic::catch_unwind (718 samples, 1.84%)</title><rect x="90.8870%" y="613" width="1.8406%" height="15" fill="rgb(249,103,42)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="623.50">s..</text></g><g><title>std::panicking::try (718 samples, 1.84%)</title><rect x="90.8870%" y="597" width="1.8406%" height="15" fill="rgb(246,81,33)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (718 samples, 1.84%)</title><rect x="90.8870%" y="581" width="1.8406%" height="15" fill="rgb(252,33,42)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="591.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (718 samples, 1.84%)</title><rect x="90.8870%" y="565" width="1.8406%" height="15" fill="rgb(209,212,41)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="575.50">&lt;..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (718 samples, 1.84%)</title><rect x="90.8870%" y="549" width="1.8406%" height="15" fill="rgb(207,154,6)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="559.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (718 samples, 1.84%)</title><rect x="90.8870%" y="533" width="1.8406%" height="15" fill="rgb(223,64,47)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="543.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (718 samples, 1.84%)</title><rect x="90.8870%" y="517" width="1.8406%" height="15" fill="rgb(211,161,38)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="527.50">r..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (718 samples, 1.84%)</title><rect x="90.8870%" y="501" width="1.8406%" height="15" fill="rgb(219,138,40)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="511.50">r..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (718 samples, 1.84%)</title><rect x="90.8870%" y="485" width="1.8406%" height="15" fill="rgb(241,228,46)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="495.50">&lt;..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (718 samples, 1.84%)</title><rect x="90.8870%" y="469" width="1.8406%" height="15" fill="rgb(223,209,38)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="479.50">r..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (718 samples, 1.84%)</title><rect x="90.8870%" y="453" width="1.8406%" height="15" fill="rgb(236,164,45)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="463.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (718 samples, 1.84%)</title><rect x="90.8870%" y="437" width="1.8406%" height="15" fill="rgb(231,15,5)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="447.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (718 samples, 1.84%)</title><rect x="90.8870%" y="421" width="1.8406%" height="15" fill="rgb(252,35,15)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="431.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (718 samples, 1.84%)</title><rect x="90.8870%" y="405" width="1.8406%" height="15" fill="rgb(248,181,18)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="415.50">c..</text></g><g><title>rs_1brc::main::_{{closure}} (718 samples, 1.84%)</title><rect x="90.8870%" y="389" width="1.8406%" height="15" fill="rgb(233,39,42)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="399.50">r..</text></g><g><title>rs_1brc::process_chunk (718 samples, 1.84%)</title><rect x="90.8870%" y="373" width="1.8406%" height="15" fill="rgb(238,110,33)" fg:x="35455" fg:w="718"/><text x="91.1370%" y="383.50">r..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (402 samples, 1.03%)</title><rect x="91.6970%" y="357" width="1.0305%" height="15" fill="rgb(233,195,10)" fg:x="35771" fg:w="402"/><text x="91.9470%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.08%)</title><rect x="92.8403%" y="229" width="0.0795%" height="15" fill="rgb(254,105,3)" fg:x="36217" fg:w="31"/><text x="93.0903%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (62 samples, 0.16%)</title><rect x="92.8403%" y="245" width="0.1589%" height="15" fill="rgb(221,225,9)" fg:x="36217" fg:w="62"/><text x="93.0903%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.08%)</title><rect x="92.9198%" y="229" width="0.0795%" height="15" fill="rgb(224,227,45)" fg:x="36248" fg:w="31"/><text x="93.1698%" y="239.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (312 samples, 0.80%)</title><rect x="93.1915%" y="165" width="0.7998%" height="15" fill="rgb(229,198,43)" fg:x="36354" fg:w="312"/><text x="93.4415%" y="175.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (12 samples, 0.03%)</title><rect x="93.9913%" y="165" width="0.0308%" height="15" fill="rgb(206,209,35)" fg:x="36666" fg:w="12"/><text x="94.2413%" y="175.50"></text></g><g><title>fast_float::number::Number::try_fast_path (388 samples, 0.99%)</title><rect x="93.0428%" y="181" width="0.9946%" height="15" fill="rgb(245,195,53)" fg:x="36296" fg:w="388"/><text x="93.2928%" y="191.50"></text></g><g><title>fast_float::number::Number::is_fast_path (6 samples, 0.02%)</title><rect x="94.0220%" y="165" width="0.0154%" height="15" fill="rgb(240,92,26)" fg:x="36678" fg:w="6"/><text x="94.2720%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (20 samples, 0.05%)</title><rect x="94.2758%" y="165" width="0.0513%" height="15" fill="rgb(207,40,23)" fg:x="36777" fg:w="20"/><text x="94.5258%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (19 samples, 0.05%)</title><rect x="94.2784%" y="149" width="0.0487%" height="15" fill="rgb(223,111,35)" fg:x="36778" fg:w="19"/><text x="94.5284%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (4 samples, 0.01%)</title><rect x="94.3271%" y="165" width="0.0103%" height="15" fill="rgb(229,147,28)" fg:x="36797" fg:w="4"/><text x="94.5771%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (9 samples, 0.02%)</title><rect x="94.3399%" y="165" width="0.0231%" height="15" fill="rgb(211,29,28)" fg:x="36802" fg:w="9"/><text x="94.5899%" y="175.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (9 samples, 0.02%)</title><rect x="94.3399%" y="149" width="0.0231%" height="15" fill="rgb(228,72,33)" fg:x="36802" fg:w="9"/><text x="94.5899%" y="159.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (32 samples, 0.08%)</title><rect x="94.3630%" y="165" width="0.0820%" height="15" fill="rgb(205,214,31)" fg:x="36811" fg:w="32"/><text x="94.6130%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (32 samples, 0.08%)</title><rect x="94.3630%" y="149" width="0.0820%" height="15" fill="rgb(224,111,15)" fg:x="36811" fg:w="32"/><text x="94.6130%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (19 samples, 0.05%)</title><rect x="94.3963%" y="133" width="0.0487%" height="15" fill="rgb(253,21,26)" fg:x="36824" fg:w="19"/><text x="94.6463%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.01%)</title><rect x="94.4322%" y="117" width="0.0128%" height="15" fill="rgb(245,139,43)" fg:x="36838" fg:w="5"/><text x="94.6822%" y="127.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (49 samples, 0.13%)</title><rect x="94.5527%" y="133" width="0.1256%" height="15" fill="rgb(252,170,7)" fg:x="36885" fg:w="49"/><text x="94.8027%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (22 samples, 0.06%)</title><rect x="94.6834%" y="133" width="0.0564%" height="15" fill="rgb(231,118,14)" fg:x="36936" fg:w="22"/><text x="94.9334%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::step (14 samples, 0.04%)</title><rect x="94.7398%" y="133" width="0.0359%" height="15" fill="rgb(238,83,0)" fg:x="36958" fg:w="14"/><text x="94.9898%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (14 samples, 0.04%)</title><rect x="94.7398%" y="117" width="0.0359%" height="15" fill="rgb(221,39,39)" fg:x="36958" fg:w="14"/><text x="94.9898%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (14 samples, 0.04%)</title><rect x="94.7398%" y="101" width="0.0359%" height="15" fill="rgb(222,119,46)" fg:x="36958" fg:w="14"/><text x="94.9898%" y="111.50"></text></g><g><title>fast_float::parse (720 samples, 1.85%)</title><rect x="92.9992%" y="245" width="1.8457%" height="15" fill="rgb(222,165,49)" fg:x="36279" fg:w="720"/><text x="93.2492%" y="255.50">f..</text></g><g><title>fast_float::FastFloat::parse_float (720 samples, 1.85%)</title><rect x="92.9992%" y="229" width="1.8457%" height="15" fill="rgb(219,113,52)" fg:x="36279" fg:w="720"/><text x="93.2492%" y="239.50">f..</text></g><g><title>fast_float::FastFloat::parse_float_partial (720 samples, 1.85%)</title><rect x="92.9992%" y="213" width="1.8457%" height="15" fill="rgb(214,7,15)" fg:x="36279" fg:w="720"/><text x="93.2492%" y="223.50">f..</text></g><g><title>fast_float::parse::parse_float (720 samples, 1.85%)</title><rect x="92.9992%" y="197" width="1.8457%" height="15" fill="rgb(235,32,4)" fg:x="36279" fg:w="720"/><text x="93.2492%" y="207.50">f..</text></g><g><title>fast_float::number::parse_number (315 samples, 0.81%)</title><rect x="94.0374%" y="181" width="0.8075%" height="15" fill="rgb(238,90,54)" fg:x="36684" fg:w="315"/><text x="94.2874%" y="191.50"></text></g><g><title>fast_float::number::try_parse_digits (156 samples, 0.40%)</title><rect x="94.4450%" y="165" width="0.3999%" height="15" fill="rgb(213,208,19)" fg:x="36843" fg:w="156"/><text x="94.6950%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::parse_digits (156 samples, 0.40%)</title><rect x="94.4450%" y="149" width="0.3999%" height="15" fill="rgb(233,156,4)" fg:x="36843" fg:w="156"/><text x="94.6950%" y="159.50"></text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (27 samples, 0.07%)</title><rect x="94.7757%" y="133" width="0.0692%" height="15" fill="rgb(207,194,5)" fg:x="36972" fg:w="27"/><text x="95.0257%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15 samples, 0.04%)</title><rect x="94.8065%" y="117" width="0.0385%" height="15" fill="rgb(206,111,30)" fg:x="36984" fg:w="15"/><text x="95.0565%" y="127.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (18 samples, 0.05%)</title><rect x="94.8500%" y="213" width="0.0461%" height="15" fill="rgb(243,70,54)" fg:x="37001" fg:w="18"/><text x="95.1000%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (18 samples, 0.05%)</title><rect x="94.8500%" y="197" width="0.0461%" height="15" fill="rgb(242,28,8)" fg:x="37001" fg:w="18"/><text x="95.1000%" y="207.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (40 samples, 0.10%)</title><rect x="95.0628%" y="133" width="0.1025%" height="15" fill="rgb(219,106,18)" fg:x="37084" fg:w="40"/><text x="95.3128%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (40 samples, 0.10%)</title><rect x="95.0628%" y="117" width="0.1025%" height="15" fill="rgb(244,222,10)" fg:x="37084" fg:w="40"/><text x="95.3128%" y="127.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (91 samples, 0.23%)</title><rect x="95.3730%" y="85" width="0.2333%" height="15" fill="rgb(236,179,52)" fg:x="37205" fg:w="91"/><text x="95.6230%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (91 samples, 0.23%)</title><rect x="95.3730%" y="69" width="0.2333%" height="15" fill="rgb(213,23,39)" fg:x="37205" fg:w="91"/><text x="95.6230%" y="79.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (152 samples, 0.39%)</title><rect x="95.2499%" y="101" width="0.3896%" height="15" fill="rgb(238,48,10)" fg:x="37157" fg:w="152"/><text x="95.4999%" y="111.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (13 samples, 0.03%)</title><rect x="95.6063%" y="85" width="0.0333%" height="15" fill="rgb(251,196,23)" fg:x="37296" fg:w="13"/><text x="95.8563%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.03%)</title><rect x="95.6063%" y="69" width="0.0333%" height="15" fill="rgb(250,152,24)" fg:x="37296" fg:w="13"/><text x="95.8563%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (17 samples, 0.04%)</title><rect x="95.6396%" y="85" width="0.0436%" height="15" fill="rgb(209,150,17)" fg:x="37309" fg:w="17"/><text x="95.8896%" y="95.50"></text></g><g><title>memchr::memchr::memchr (328 samples, 0.84%)</title><rect x="94.8449%" y="245" width="0.8408%" height="15" fill="rgb(234,202,34)" fg:x="36999" fg:w="328"/><text x="95.0949%" y="255.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (328 samples, 0.84%)</title><rect x="94.8449%" y="229" width="0.8408%" height="15" fill="rgb(253,148,53)" fg:x="36999" fg:w="328"/><text x="95.0949%" y="239.50"></text></g><g><title>memchr::memchr::memchr::_{{closure}} (304 samples, 0.78%)</title><rect x="94.9064%" y="213" width="0.7793%" height="15" fill="rgb(218,129,16)" fg:x="37023" fg:w="304"/><text x="95.1564%" y="223.50"></text></g><g><title>memchr::memchr::memchr_raw (304 samples, 0.78%)</title><rect x="94.9064%" y="197" width="0.7793%" height="15" fill="rgb(216,85,19)" fg:x="37023" fg:w="304"/><text x="95.1564%" y="207.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (304 samples, 0.78%)</title><rect x="94.9064%" y="181" width="0.7793%" height="15" fill="rgb(235,228,7)" fg:x="37023" fg:w="304"/><text x="95.1564%" y="191.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (265 samples, 0.68%)</title><rect x="95.0064%" y="165" width="0.6793%" height="15" fill="rgb(245,175,0)" fg:x="37062" fg:w="265"/><text x="95.2564%" y="175.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (250 samples, 0.64%)</title><rect x="95.0449%" y="149" width="0.6409%" height="15" fill="rgb(208,168,36)" fg:x="37077" fg:w="250"/><text x="95.2949%" y="159.50"></text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (203 samples, 0.52%)</title><rect x="95.1653%" y="133" width="0.5204%" height="15" fill="rgb(246,171,24)" fg:x="37124" fg:w="203"/><text x="95.4153%" y="143.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (203 samples, 0.52%)</title><rect x="95.1653%" y="117" width="0.5204%" height="15" fill="rgb(215,142,24)" fg:x="37124" fg:w="203"/><text x="95.4153%" y="127.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (18 samples, 0.05%)</title><rect x="95.6396%" y="101" width="0.0461%" height="15" fill="rgb(250,187,7)" fg:x="37309" fg:w="18"/><text x="95.8896%" y="111.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (42 samples, 0.11%)</title><rect x="95.6857%" y="245" width="0.1077%" height="15" fill="rgb(228,66,33)" fg:x="37327" fg:w="42"/><text x="95.9357%" y="255.50"></text></g><g><title>rs_1brc::process_chunk::_{{closure}} (42 samples, 0.11%)</title><rect x="95.6857%" y="229" width="0.1077%" height="15" fill="rgb(234,215,21)" fg:x="37327" fg:w="42"/><text x="95.9357%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.05%)</title><rect x="96.2112%" y="101" width="0.0538%" height="15" fill="rgb(222,191,20)" fg:x="37532" fg:w="21"/><text x="96.4612%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.05%)</title><rect x="96.2112%" y="85" width="0.0538%" height="15" fill="rgb(245,79,54)" fg:x="37532" fg:w="21"/><text x="96.4612%" y="95.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (21 samples, 0.05%)</title><rect x="96.2112%" y="69" width="0.0538%" height="15" fill="rgb(240,10,37)" fg:x="37532" fg:w="21"/><text x="96.4612%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (21 samples, 0.05%)</title><rect x="96.2112%" y="53" width="0.0538%" height="15" fill="rgb(214,192,32)" fg:x="37532" fg:w="21"/><text x="96.4612%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (8 samples, 0.02%)</title><rect x="96.2446%" y="37" width="0.0205%" height="15" fill="rgb(209,36,54)" fg:x="37545" fg:w="8"/><text x="96.4946%" y="47.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (9 samples, 0.02%)</title><rect x="96.2651%" y="85" width="0.0231%" height="15" fill="rgb(220,10,11)" fg:x="37553" fg:w="9"/><text x="96.5151%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (130 samples, 0.33%)</title><rect x="96.2881%" y="85" width="0.3332%" height="15" fill="rgb(221,106,17)" fg:x="37562" fg:w="130"/><text x="96.5381%" y="95.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (241 samples, 0.62%)</title><rect x="96.0369%" y="117" width="0.6178%" height="15" fill="rgb(251,142,44)" fg:x="37464" fg:w="241"/><text x="96.2869%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (152 samples, 0.39%)</title><rect x="96.2651%" y="101" width="0.3896%" height="15" fill="rgb(238,13,15)" fg:x="37553" fg:w="152"/><text x="96.5151%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (13 samples, 0.03%)</title><rect x="96.6214%" y="85" width="0.0333%" height="15" fill="rgb(208,107,27)" fg:x="37692" fg:w="13"/><text x="96.8714%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (246 samples, 0.63%)</title><rect x="96.0369%" y="213" width="0.6306%" height="15" fill="rgb(205,136,37)" fg:x="37464" fg:w="246"/><text x="96.2869%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (246 samples, 0.63%)</title><rect x="96.0369%" y="197" width="0.6306%" height="15" fill="rgb(250,205,27)" fg:x="37464" fg:w="246"/><text x="96.2869%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (246 samples, 0.63%)</title><rect x="96.0369%" y="181" width="0.6306%" height="15" fill="rgb(210,80,43)" fg:x="37464" fg:w="246"/><text x="96.2869%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (246 samples, 0.63%)</title><rect x="96.0369%" y="165" width="0.6306%" height="15" fill="rgb(247,160,36)" fg:x="37464" fg:w="246"/><text x="96.2869%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (246 samples, 0.63%)</title><rect x="96.0369%" y="149" width="0.6306%" height="15" fill="rgb(234,13,49)" fg:x="37464" fg:w="246"/><text x="96.2869%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (246 samples, 0.63%)</title><rect x="96.0369%" y="133" width="0.6306%" height="15" fill="rgb(234,122,0)" fg:x="37464" fg:w="246"/><text x="96.2869%" y="143.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.01%)</title><rect x="96.6547%" y="117" width="0.0128%" height="15" fill="rgb(207,146,38)" fg:x="37705" fg:w="5"/><text x="96.9047%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.27%)</title><rect x="96.9444%" y="181" width="0.2666%" height="15" fill="rgb(207,177,25)" fg:x="37818" fg:w="104"/><text x="97.1944%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (104 samples, 0.27%)</title><rect x="96.9444%" y="165" width="0.2666%" height="15" fill="rgb(211,178,42)" fg:x="37818" fg:w="104"/><text x="97.1944%" y="175.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (83 samples, 0.21%)</title><rect x="96.9982%" y="149" width="0.2128%" height="15" fill="rgb(230,69,54)" fg:x="37839" fg:w="83"/><text x="97.2482%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (29 samples, 0.07%)</title><rect x="97.2110%" y="165" width="0.0743%" height="15" fill="rgb(214,135,41)" fg:x="37922" fg:w="29"/><text x="97.4610%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (29 samples, 0.07%)</title><rect x="97.2110%" y="149" width="0.0743%" height="15" fill="rgb(237,67,25)" fg:x="37922" fg:w="29"/><text x="97.4610%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (29 samples, 0.07%)</title><rect x="97.2110%" y="133" width="0.0743%" height="15" fill="rgb(222,189,50)" fg:x="37922" fg:w="29"/><text x="97.4610%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (29 samples, 0.07%)</title><rect x="97.2110%" y="117" width="0.0743%" height="15" fill="rgb(245,148,34)" fg:x="37922" fg:w="29"/><text x="97.4610%" y="127.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (612 samples, 1.57%)</title><rect x="97.2853%" y="117" width="1.5688%" height="15" fill="rgb(222,29,6)" fg:x="37951" fg:w="612"/><text x="97.5353%" y="127.50"></text></g><g><title>[libc.so.6] (411 samples, 1.05%)</title><rect x="97.8006%" y="101" width="1.0536%" height="15" fill="rgb(221,189,43)" fg:x="38152" fg:w="411"/><text x="98.0506%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (646 samples, 1.66%)</title><rect x="97.2110%" y="181" width="1.6560%" height="15" fill="rgb(207,36,27)" fg:x="37922" fg:w="646"/><text x="97.4610%" y="191.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (617 samples, 1.58%)</title><rect x="97.2853%" y="165" width="1.5816%" height="15" fill="rgb(217,90,24)" fg:x="37951" fg:w="617"/><text x="97.5353%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (617 samples, 1.58%)</title><rect x="97.2853%" y="149" width="1.5816%" height="15" fill="rgb(224,66,35)" fg:x="37951" fg:w="617"/><text x="97.5353%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (617 samples, 1.58%)</title><rect x="97.2853%" y="133" width="1.5816%" height="15" fill="rgb(221,13,50)" fg:x="37951" fg:w="617"/><text x="97.5353%" y="143.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5 samples, 0.01%)</title><rect x="98.8541%" y="117" width="0.0128%" height="15" fill="rgb(236,68,49)" fg:x="38563" fg:w="5"/><text x="99.1041%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (101 samples, 0.26%)</title><rect x="98.8670%" y="181" width="0.2589%" height="15" fill="rgb(229,146,28)" fg:x="38568" fg:w="101"/><text x="99.1170%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (20 samples, 0.05%)</title><rect x="99.1259%" y="181" width="0.0513%" height="15" fill="rgb(225,31,38)" fg:x="38669" fg:w="20"/><text x="99.3759%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20 samples, 0.05%)</title><rect x="99.1259%" y="165" width="0.0513%" height="15" fill="rgb(250,208,3)" fg:x="38669" fg:w="20"/><text x="99.3759%" y="175.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (19 samples, 0.05%)</title><rect x="99.1284%" y="149" width="0.0487%" height="15" fill="rgb(246,54,23)" fg:x="38670" fg:w="19"/><text x="99.3784%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (156 samples, 0.40%)</title><rect x="99.1771%" y="181" width="0.3999%" height="15" fill="rgb(243,76,11)" fg:x="38689" fg:w="156"/><text x="99.4271%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (156 samples, 0.40%)</title><rect x="99.1771%" y="165" width="0.3999%" height="15" fill="rgb(245,21,50)" fg:x="38689" fg:w="156"/><text x="99.4271%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (19 samples, 0.05%)</title><rect x="99.5770%" y="181" width="0.0487%" height="15" fill="rgb(228,9,43)" fg:x="38845" fg:w="19"/><text x="99.8270%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (19 samples, 0.05%)</title><rect x="99.5770%" y="165" width="0.0487%" height="15" fill="rgb(208,100,47)" fg:x="38845" fg:w="19"/><text x="99.8270%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (19 samples, 0.05%)</title><rect x="99.5770%" y="149" width="0.0487%" height="15" fill="rgb(232,26,8)" fg:x="38845" fg:w="19"/><text x="99.8270%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,089 samples, 2.79%)</title><rect x="96.8367%" y="197" width="2.7916%" height="15" fill="rgb(216,166,38)" fg:x="37776" fg:w="1089"/><text x="97.0867%" y="207.50">ha..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,497 samples, 3.84%)</title><rect x="95.7934%" y="229" width="3.8375%" height="15" fill="rgb(251,202,51)" fg:x="37369" fg:w="1497"/><text x="96.0434%" y="239.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,156 samples, 2.96%)</title><rect x="96.6675%" y="213" width="2.9633%" height="15" fill="rgb(254,216,34)" fg:x="37710" fg:w="1156"/><text x="96.9175%" y="223.50">has..</text></g><g><title>rayon_core::registry::WorkerThread::execute (38,848 samples, 99.58%)</title><rect x="0.0692%" y="1237" width="99.5847%" height="15" fill="rgb(251,32,27)" fg:x="27" fg:w="38848"/><text x="0.3192%" y="1247.50">rayon_core::registry::WorkerThread::execute</text></g><g><title>rayon_core::job::JobRef::execute (38,848 samples, 99.58%)</title><rect x="0.0692%" y="1221" width="99.5847%" height="15" fill="rgb(208,127,28)" fg:x="27" fg:w="38848"/><text x="0.3192%" y="1231.50">rayon_core::job::JobRef::execute</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (38,848 samples, 99.58%)</title><rect x="0.0692%" y="1205" width="99.5847%" height="15" fill="rgb(224,137,22)" fg:x="27" fg:w="38848"/><text x="0.3192%" y="1215.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (38,847 samples, 99.58%)</title><rect x="0.0718%" y="1189" width="99.5822%" height="15" fill="rgb(254,70,32)" fg:x="28" fg:w="38847"/><text x="0.3218%" y="1199.50">rayon_core::job::JobResult&lt;T&gt;::call</text></g><g><title>rayon_core::unwind::halt_unwinding (38,847 samples, 99.58%)</title><rect x="0.0718%" y="1173" width="99.5822%" height="15" fill="rgb(229,75,37)" fg:x="28" fg:w="38847"/><text x="0.3218%" y="1183.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (38,847 samples, 99.58%)</title><rect x="0.0718%" y="1157" width="99.5822%" height="15" fill="rgb(252,64,23)" fg:x="28" fg:w="38847"/><text x="0.3218%" y="1167.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,847 samples, 99.58%)</title><rect x="0.0718%" y="1141" width="99.5822%" height="15" fill="rgb(232,162,48)" fg:x="28" fg:w="38847"/><text x="0.3218%" y="1151.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,847 samples, 99.58%)</title><rect x="0.0718%" y="1125" width="99.5822%" height="15" fill="rgb(246,160,12)" fg:x="28" fg:w="38847"/><text x="0.3218%" y="1135.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38,847 samples, 99.58%)</title><rect x="0.0718%" y="1109" width="99.5822%" height="15" fill="rgb(247,166,0)" fg:x="28" fg:w="38847"/><text x="0.3218%" y="1119.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}} (38,847 samples, 99.58%)</title><rect x="0.0718%" y="1093" width="99.5822%" height="15" fill="rgb(249,219,21)" fg:x="28" fg:w="38847"/><text x="0.3218%" y="1103.50">rayon_core::job::JobResult&lt;T&gt;::call::_{{closure}}</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::_{{closure}}::_{{closure}} (2,702 samples, 6.93%)</title><rect x="92.7275%" y="1077" width="6.9264%" height="15" fill="rgb(205,209,3)" fg:x="36173" fg:w="2702"/><text x="92.9775%" y="1087.50">rayon_cor..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2,702 samples, 6.93%)</title><rect x="92.7275%" y="1061" width="6.9264%" height="15" fill="rgb(243,44,1)" fg:x="36173" fg:w="2702"/><text x="92.9775%" y="1071.50">rayon_cor..</text></g><g><title>rayon_core::unwind::halt_unwinding (2,699 samples, 6.92%)</title><rect x="92.7352%" y="1045" width="6.9187%" height="15" fill="rgb(206,159,16)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="1055.50">rayon_cor..</text></g><g><title>std::panic::catch_unwind (2,699 samples, 6.92%)</title><rect x="92.7352%" y="1029" width="6.9187%" height="15" fill="rgb(244,77,30)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="1039.50">std::pani..</text></g><g><title>std::panicking::try (2,699 samples, 6.92%)</title><rect x="92.7352%" y="1013" width="6.9187%" height="15" fill="rgb(218,69,12)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="1023.50">std::pani..</text></g><g><title>std::panicking::try::do_call (2,699 samples, 6.92%)</title><rect x="92.7352%" y="997" width="6.9187%" height="15" fill="rgb(212,87,7)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="1007.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,699 samples, 6.92%)</title><rect x="92.7352%" y="981" width="6.9187%" height="15" fill="rgb(245,114,25)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="991.50">&lt;core::pa..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="965" width="6.9187%" height="15" fill="rgb(210,61,42)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="975.50">rayon_cor..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="949" width="6.9187%" height="15" fill="rgb(211,52,33)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="959.50">rayon::it..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,699 samples, 6.92%)</title><rect x="92.7352%" y="933" width="6.9187%" height="15" fill="rgb(234,58,33)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="943.50">rayon::it..</text></g><g><title>rayon_core::join::join_context (2,699 samples, 6.92%)</title><rect x="92.7352%" y="917" width="6.9187%" height="15" fill="rgb(220,115,36)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="927.50">rayon_cor..</text></g><g><title>rayon_core::registry::in_worker (2,699 samples, 6.92%)</title><rect x="92.7352%" y="901" width="6.9187%" height="15" fill="rgb(243,153,54)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="911.50">rayon_cor..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="885" width="6.9187%" height="15" fill="rgb(251,47,18)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="895.50">rayon_cor..</text></g><g><title>rayon_core::unwind::halt_unwinding (2,699 samples, 6.92%)</title><rect x="92.7352%" y="869" width="6.9187%" height="15" fill="rgb(242,102,42)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="879.50">rayon_cor..</text></g><g><title>std::panic::catch_unwind (2,699 samples, 6.92%)</title><rect x="92.7352%" y="853" width="6.9187%" height="15" fill="rgb(234,31,38)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="863.50">std::pani..</text></g><g><title>std::panicking::try (2,699 samples, 6.92%)</title><rect x="92.7352%" y="837" width="6.9187%" height="15" fill="rgb(221,117,51)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="847.50">std::pani..</text></g><g><title>std::panicking::try::do_call (2,699 samples, 6.92%)</title><rect x="92.7352%" y="821" width="6.9187%" height="15" fill="rgb(212,20,18)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="831.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,699 samples, 6.92%)</title><rect x="92.7352%" y="805" width="6.9187%" height="15" fill="rgb(245,133,36)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="815.50">&lt;core::pa..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="789" width="6.9187%" height="15" fill="rgb(212,6,19)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="799.50">rayon_cor..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="773" width="6.9187%" height="15" fill="rgb(218,1,36)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="783.50">rayon::it..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,699 samples, 6.92%)</title><rect x="92.7352%" y="757" width="6.9187%" height="15" fill="rgb(246,84,54)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="767.50">rayon::it..</text></g><g><title>rayon_core::join::join_context (2,699 samples, 6.92%)</title><rect x="92.7352%" y="741" width="6.9187%" height="15" fill="rgb(242,110,6)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="751.50">rayon_cor..</text></g><g><title>rayon_core::registry::in_worker (2,699 samples, 6.92%)</title><rect x="92.7352%" y="725" width="6.9187%" height="15" fill="rgb(214,47,5)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="735.50">rayon_cor..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="709" width="6.9187%" height="15" fill="rgb(218,159,25)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="719.50">rayon_cor..</text></g><g><title>rayon_core::unwind::halt_unwinding (2,699 samples, 6.92%)</title><rect x="92.7352%" y="693" width="6.9187%" height="15" fill="rgb(215,211,28)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="703.50">rayon_cor..</text></g><g><title>std::panic::catch_unwind (2,699 samples, 6.92%)</title><rect x="92.7352%" y="677" width="6.9187%" height="15" fill="rgb(238,59,32)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="687.50">std::pani..</text></g><g><title>std::panicking::try (2,699 samples, 6.92%)</title><rect x="92.7352%" y="661" width="6.9187%" height="15" fill="rgb(226,82,3)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="671.50">std::pani..</text></g><g><title>std::panicking::try::do_call (2,699 samples, 6.92%)</title><rect x="92.7352%" y="645" width="6.9187%" height="15" fill="rgb(240,164,32)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="655.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,699 samples, 6.92%)</title><rect x="92.7352%" y="629" width="6.9187%" height="15" fill="rgb(232,46,7)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="639.50">&lt;core::pa..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="613" width="6.9187%" height="15" fill="rgb(229,129,53)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="623.50">rayon_cor..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="597" width="6.9187%" height="15" fill="rgb(234,188,29)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="607.50">rayon::it..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,699 samples, 6.92%)</title><rect x="92.7352%" y="581" width="6.9187%" height="15" fill="rgb(246,141,4)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="591.50">rayon::it..</text></g><g><title>rayon_core::join::join_context (2,699 samples, 6.92%)</title><rect x="92.7352%" y="565" width="6.9187%" height="15" fill="rgb(229,23,39)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="575.50">rayon_cor..</text></g><g><title>rayon_core::registry::in_worker (2,699 samples, 6.92%)</title><rect x="92.7352%" y="549" width="6.9187%" height="15" fill="rgb(206,12,3)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="559.50">rayon_cor..</text></g><g><title>rayon_core::join::join_context::_{{closure}} (2,699 samples, 6.92%)</title><rect x="92.7352%" y="533" width="6.9187%" height="15" fill="rgb(252,226,20)" fg:x="36176" fg:w="2699"/><text x="92.9852%" y="543.50">rayon_cor..</text></g><g><title>rayon_core::unwind::halt_unwinding (2,696 samples, 6.91%)</title><rect x="92.7429%" y="517" width="6.9110%" height="15" fill="rgb(216,123,35)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="527.50">rayon_cor..</text></g><g><title>std::panic::catch_unwind (2,696 samples, 6.91%)</title><rect x="92.7429%" y="501" width="6.9110%" height="15" fill="rgb(212,68,40)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="511.50">std::pani..</text></g><g><title>std::panicking::try (2,696 samples, 6.91%)</title><rect x="92.7429%" y="485" width="6.9110%" height="15" fill="rgb(254,125,32)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="495.50">std::pani..</text></g><g><title>std::panicking::try::do_call (2,696 samples, 6.91%)</title><rect x="92.7429%" y="469" width="6.9110%" height="15" fill="rgb(253,97,22)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="479.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,696 samples, 6.91%)</title><rect x="92.7429%" y="453" width="6.9110%" height="15" fill="rgb(241,101,14)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="463.50">&lt;core::pa..</text></g><g><title>rayon_core::join::join_context::call_a::_{{closure}} (2,696 samples, 6.91%)</title><rect x="92.7429%" y="437" width="6.9110%" height="15" fill="rgb(238,103,29)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="447.50">rayon_cor..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (2,696 samples, 6.91%)</title><rect x="92.7429%" y="421" width="6.9110%" height="15" fill="rgb(233,195,47)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="431.50">rayon::it..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2,696 samples, 6.91%)</title><rect x="92.7429%" y="405" width="6.9110%" height="15" fill="rgb(246,218,30)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="415.50">rayon::it..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (2,696 samples, 6.91%)</title><rect x="92.7429%" y="389" width="6.9110%" height="15" fill="rgb(219,145,47)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="399.50">rayon::it..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (2,696 samples, 6.91%)</title><rect x="92.7429%" y="373" width="6.9110%" height="15" fill="rgb(243,12,26)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="383.50">&lt;rayon::i..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (2,696 samples, 6.91%)</title><rect x="92.7429%" y="357" width="6.9110%" height="15" fill="rgb(214,87,16)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="367.50">rayon::it..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,696 samples, 6.91%)</title><rect x="92.7429%" y="341" width="6.9110%" height="15" fill="rgb(208,99,42)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="351.50">&lt;core::it..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,696 samples, 6.91%)</title><rect x="92.7429%" y="325" width="6.9110%" height="15" fill="rgb(253,99,2)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="335.50">core::opt..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,696 samples, 6.91%)</title><rect x="92.7429%" y="309" width="6.9110%" height="15" fill="rgb(220,168,23)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="319.50">core::ops..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (2,696 samples, 6.91%)</title><rect x="92.7429%" y="293" width="6.9110%" height="15" fill="rgb(242,38,24)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="303.50">core::ops..</text></g><g><title>rs_1brc::main::_{{closure}} (2,696 samples, 6.91%)</title><rect x="92.7429%" y="277" width="6.9110%" height="15" fill="rgb(225,182,9)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="287.50">rs_1brc::..</text></g><g><title>rs_1brc::process_chunk (2,696 samples, 6.91%)</title><rect x="92.7429%" y="261" width="6.9110%" height="15" fill="rgb(243,178,37)" fg:x="36179" fg:w="2696"/><text x="92.9929%" y="271.50">rs_1brc::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,506 samples, 3.86%)</title><rect x="95.7934%" y="245" width="3.8605%" height="15" fill="rgb(232,139,19)" fg:x="37369" fg:w="1506"/><text x="96.0434%" y="255.50">std:..</text></g><g><title>std::collections::hash::map::map_entry (9 samples, 0.02%)</title><rect x="99.6309%" y="229" width="0.0231%" height="15" fill="rgb(225,201,24)" fg:x="38866" fg:w="9"/><text x="99.8809%" y="239.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (5 samples, 0.01%)</title><rect x="99.6719%" y="1045" width="0.0128%" height="15" fill="rgb(221,47,46)" fg:x="38882" fg:w="5"/><text x="99.9219%" y="1055.50"></text></g><g><title>crossbeam_epoch::default::with_handle (5 samples, 0.01%)</title><rect x="99.6719%" y="1029" width="0.0128%" height="15" fill="rgb(249,23,13)" fg:x="38882" fg:w="5"/><text x="99.9219%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 0.01%)</title><rect x="99.6719%" y="1013" width="0.0128%" height="15" fill="rgb(219,9,5)" fg:x="38882" fg:w="5"/><text x="99.9219%" y="1023.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (5 samples, 0.01%)</title><rect x="99.6719%" y="997" width="0.0128%" height="15" fill="rgb(254,171,16)" fg:x="38882" fg:w="5"/><text x="99.9219%" y="1007.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (11 samples, 0.03%)</title><rect x="99.6668%" y="1109" width="0.0282%" height="15" fill="rgb(230,171,20)" fg:x="38880" fg:w="11"/><text x="99.9168%" y="1119.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (11 samples, 0.03%)</title><rect x="99.6668%" y="1093" width="0.0282%" height="15" fill="rgb(210,71,41)" fg:x="38880" fg:w="11"/><text x="99.9168%" y="1103.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (11 samples, 0.03%)</title><rect x="99.6668%" y="1077" width="0.0282%" height="15" fill="rgb(206,173,20)" fg:x="38880" fg:w="11"/><text x="99.9168%" y="1087.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (11 samples, 0.03%)</title><rect x="99.6668%" y="1061" width="0.0282%" height="15" fill="rgb(233,88,34)" fg:x="38880" fg:w="11"/><text x="99.9168%" y="1071.50"></text></g><g><title>crossbeam_epoch::default::pin (4 samples, 0.01%)</title><rect x="99.6847%" y="1045" width="0.0103%" height="15" fill="rgb(223,209,46)" fg:x="38887" fg:w="4"/><text x="99.9347%" y="1055.50"></text></g><g><title>crossbeam_epoch::default::with_handle (4 samples, 0.01%)</title><rect x="99.6847%" y="1029" width="0.0103%" height="15" fill="rgb(250,43,18)" fg:x="38887" fg:w="4"/><text x="99.9347%" y="1039.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.01%)</title><rect x="99.6847%" y="1013" width="0.0103%" height="15" fill="rgb(208,13,10)" fg:x="38887" fg:w="4"/><text x="99.9347%" y="1023.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (4 samples, 0.01%)</title><rect x="99.6847%" y="997" width="0.0103%" height="15" fill="rgb(212,200,36)" fg:x="38887" fg:w="4"/><text x="99.9347%" y="1007.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (4 samples, 0.01%)</title><rect x="99.6847%" y="981" width="0.0103%" height="15" fill="rgb(225,90,30)" fg:x="38887" fg:w="4"/><text x="99.9347%" y="991.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (4 samples, 0.01%)</title><rect x="99.6847%" y="965" width="0.0103%" height="15" fill="rgb(236,182,39)" fg:x="38887" fg:w="4"/><text x="99.9347%" y="975.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (4 samples, 0.01%)</title><rect x="99.6847%" y="949" width="0.0103%" height="15" fill="rgb(212,144,35)" fg:x="38887" fg:w="4"/><text x="99.9347%" y="959.50"></text></g><g><title>crossbeam_epoch::default::is_pinned (4 samples, 0.01%)</title><rect x="99.6975%" y="1029" width="0.0103%" height="15" fill="rgb(228,63,44)" fg:x="38892" fg:w="4"/><text x="99.9475%" y="1039.50"></text></g><g><title>crossbeam_epoch::default::with_handle (4 samples, 0.01%)</title><rect x="99.6975%" y="1013" width="0.0103%" height="15" fill="rgb(228,109,6)" fg:x="38892" fg:w="4"/><text x="99.9475%" y="1023.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.01%)</title><rect x="99.6975%" y="997" width="0.0103%" height="15" fill="rgb(238,117,24)" fg:x="38892" fg:w="4"/><text x="99.9475%" y="1007.50"></text></g><g><title>crossbeam_epoch::default::HANDLE::__getit (4 samples, 0.01%)</title><rect x="99.6975%" y="981" width="0.0103%" height="15" fill="rgb(242,26,26)" fg:x="38892" fg:w="4"/><text x="99.9475%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (23 samples, 0.06%)</title><rect x="99.6539%" y="1221" width="0.0590%" height="15" fill="rgb(221,92,48)" fg:x="38875" fg:w="23"/><text x="99.9039%" y="1231.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::_{{closure}} (23 samples, 0.06%)</title><rect x="99.6539%" y="1205" width="0.0590%" height="15" fill="rgb(209,209,32)" fg:x="38875" fg:w="23"/><text x="99.9039%" y="1215.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (21 samples, 0.05%)</title><rect x="99.6591%" y="1189" width="0.0538%" height="15" fill="rgb(221,70,22)" fg:x="38877" fg:w="21"/><text x="99.9091%" y="1199.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (20 samples, 0.05%)</title><rect x="99.6616%" y="1173" width="0.0513%" height="15" fill="rgb(248,145,5)" fg:x="38878" fg:w="20"/><text x="99.9116%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.05%)</title><rect x="99.6616%" y="1157" width="0.0513%" height="15" fill="rgb(226,116,26)" fg:x="38878" fg:w="20"/><text x="99.9116%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.05%)</title><rect x="99.6616%" y="1141" width="0.0513%" height="15" fill="rgb(244,5,17)" fg:x="38878" fg:w="20"/><text x="99.9116%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.05%)</title><rect x="99.6616%" y="1125" width="0.0513%" height="15" fill="rgb(252,159,33)" fg:x="38878" fg:w="20"/><text x="99.9116%" y="1135.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (7 samples, 0.02%)</title><rect x="99.6950%" y="1109" width="0.0179%" height="15" fill="rgb(206,71,0)" fg:x="38891" fg:w="7"/><text x="99.9450%" y="1119.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (7 samples, 0.02%)</title><rect x="99.6950%" y="1093" width="0.0179%" height="15" fill="rgb(233,118,54)" fg:x="38891" fg:w="7"/><text x="99.9450%" y="1103.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (7 samples, 0.02%)</title><rect x="99.6950%" y="1077" width="0.0179%" height="15" fill="rgb(234,83,48)" fg:x="38891" fg:w="7"/><text x="99.9450%" y="1087.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::_{{closure}} (7 samples, 0.02%)</title><rect x="99.6950%" y="1061" width="0.0179%" height="15" fill="rgb(228,3,54)" fg:x="38891" fg:w="7"/><text x="99.9450%" y="1071.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (7 samples, 0.02%)</title><rect x="99.6950%" y="1045" width="0.0179%" height="15" fill="rgb(226,155,13)" fg:x="38891" fg:w="7"/><text x="99.9450%" y="1055.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (8 samples, 0.02%)</title><rect x="99.7129%" y="1205" width="0.0205%" height="15" fill="rgb(241,28,37)" fg:x="38898" fg:w="8"/><text x="99.9629%" y="1215.50"></text></g><g><title>crossbeam_epoch::default::pin (6 samples, 0.02%)</title><rect x="99.7180%" y="1189" width="0.0154%" height="15" fill="rgb(233,93,10)" fg:x="38900" fg:w="6"/><text x="99.9680%" y="1199.50"></text></g><g><title>crossbeam_epoch::default::with_handle (6 samples, 0.02%)</title><rect x="99.7180%" y="1173" width="0.0154%" height="15" fill="rgb(225,113,19)" fg:x="38900" fg:w="6"/><text x="99.9680%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.02%)</title><rect x="99.7180%" y="1157" width="0.0154%" height="15" fill="rgb(241,2,18)" fg:x="38900" fg:w="6"/><text x="99.9680%" y="1167.50"></text></g><g><title>crossbeam_epoch::default::with_handle::_{{closure}} (4 samples, 0.01%)</title><rect x="99.7231%" y="1141" width="0.0103%" height="15" fill="rgb(228,207,21)" fg:x="38902" fg:w="4"/><text x="99.9731%" y="1151.50"></text></g><g><title>crossbeam_epoch::default::pin::_{{closure}} (4 samples, 0.01%)</title><rect x="99.7231%" y="1125" width="0.0103%" height="15" fill="rgb(213,211,35)" fg:x="38902" fg:w="4"/><text x="99.9731%" y="1135.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (4 samples, 0.01%)</title><rect x="99.7231%" y="1109" width="0.0103%" height="15" fill="rgb(209,83,10)" fg:x="38902" fg:w="4"/><text x="99.9731%" y="1119.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (4 samples, 0.01%)</title><rect x="99.7231%" y="1093" width="0.0103%" height="15" fill="rgb(209,164,1)" fg:x="38902" fg:w="4"/><text x="99.9731%" y="1103.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (32 samples, 0.08%)</title><rect x="99.6539%" y="1237" width="0.0820%" height="15" fill="rgb(213,184,43)" fg:x="38875" fg:w="32"/><text x="99.9039%" y="1247.50"></text></g><g><title>rayon_core::registry::WorkerThread::take_local_job (9 samples, 0.02%)</title><rect x="99.7129%" y="1221" width="0.0231%" height="15" fill="rgb(231,61,34)" fg:x="38898" fg:w="9"/><text x="99.9629%" y="1231.50"></text></g><g><title>__sched_yield (14 samples, 0.04%)</title><rect x="99.7411%" y="1221" width="0.0359%" height="15" fill="rgb(235,75,3)" fg:x="38909" fg:w="14"/><text x="99.9911%" y="1231.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="99.7488%" y="1205" width="0.0282%" height="15" fill="rgb(220,106,47)" fg:x="38912" fg:w="11"/><text x="99.9988%" y="1215.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="99.7539%" y="1189" width="0.0231%" height="15" fill="rgb(210,196,33)" fg:x="38914" fg:w="9"/><text x="100.0039%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="99.7565%" y="1173" width="0.0205%" height="15" fill="rgb(229,154,42)" fg:x="38915" fg:w="8"/><text x="100.0065%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="99.7565%" y="1157" width="0.0205%" height="15" fill="rgb(228,114,26)" fg:x="38915" fg:w="8"/><text x="100.0065%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="99.7590%" y="1141" width="0.0179%" height="15" fill="rgb(208,144,1)" fg:x="38916" fg:w="7"/><text x="100.0090%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.7616%" y="1125" width="0.0154%" height="15" fill="rgb(239,112,37)" fg:x="38917" fg:w="6"/><text x="100.0116%" y="1135.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (5 samples, 0.01%)</title><rect x="99.7770%" y="1221" width="0.0128%" height="15" fill="rgb(210,96,50)" fg:x="38923" fg:w="5"/><text x="100.0270%" y="1231.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (20 samples, 0.05%)</title><rect x="99.7411%" y="1237" width="0.0513%" height="15" fill="rgb(222,178,2)" fg:x="38909" fg:w="20"/><text x="99.9911%" y="1247.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (11 samples, 0.03%)</title><rect x="99.7949%" y="1189" width="0.0282%" height="15" fill="rgb(226,74,18)" fg:x="38930" fg:w="11"/><text x="100.0449%" y="1199.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock (11 samples, 0.03%)</title><rect x="99.7949%" y="1173" width="0.0282%" height="15" fill="rgb(225,67,54)" fg:x="38930" fg:w="11"/><text x="100.0449%" y="1183.50"></text></g><g><title>std::sys::pal::unix::locks::futex_mutex::Mutex::lock_contended (10 samples, 0.03%)</title><rect x="99.7975%" y="1157" width="0.0256%" height="15" fill="rgb(251,92,32)" fg:x="38931" fg:w="10"/><text x="100.0475%" y="1167.50"></text></g><g><title>std::panic::catch_unwind (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1429" width="99.7616%" height="15" fill="rgb(228,149,22)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1439.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1413" width="99.7616%" height="15" fill="rgb(243,54,13)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1423.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1397" width="99.7616%" height="15" fill="rgb(243,180,28)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1407.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1381" width="99.7616%" height="15" fill="rgb(208,167,24)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1391.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1365" width="99.7616%" height="15" fill="rgb(245,73,45)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1375.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1349" width="99.7616%" height="15" fill="rgb(237,203,48)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1359.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1333" width="99.7616%" height="15" fill="rgb(211,197,16)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1343.50">&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}}</text></g><g><title>rayon_core::registry::ThreadBuilder::run (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1317" width="99.7616%" height="15" fill="rgb(243,99,51)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1327.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (38,917 samples, 99.76%)</title><rect x="0.0666%" y="1301" width="99.7616%" height="15" fill="rgb(215,123,29)" fg:x="26" fg:w="38917"/><text x="0.3166%" y="1311.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (38,916 samples, 99.76%)</title><rect x="0.0692%" y="1285" width="99.7590%" height="15" fill="rgb(239,186,37)" fg:x="27" fg:w="38916"/><text x="0.3192%" y="1295.50">rayon_core::registry::WorkerThread::wait_until_out_of_work</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (38,916 samples, 99.76%)</title><rect x="0.0692%" y="1269" width="99.7590%" height="15" fill="rgb(252,136,39)" fg:x="27" fg:w="38916"/><text x="0.3192%" y="1279.50">rayon_core::registry::WorkerThread::wait_until</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (38,916 samples, 99.76%)</title><rect x="0.0692%" y="1253" width="99.7590%" height="15" fill="rgb(223,213,32)" fg:x="27" fg:w="38916"/><text x="0.3192%" y="1263.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::work_found (14 samples, 0.04%)</title><rect x="99.7924%" y="1237" width="0.0359%" height="15" fill="rgb(233,115,5)" fg:x="38929" fg:w="14"/><text x="100.0424%" y="1247.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (14 samples, 0.04%)</title><rect x="99.7924%" y="1221" width="0.0359%" height="15" fill="rgb(207,226,44)" fg:x="38929" fg:w="14"/><text x="100.0424%" y="1231.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (14 samples, 0.04%)</title><rect x="99.7924%" y="1205" width="0.0359%" height="15" fill="rgb(208,126,0)" fg:x="38929" fg:w="14"/><text x="100.0424%" y="1215.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (38,923 samples, 99.78%)</title><rect x="0.0666%" y="1461" width="99.7770%" height="15" fill="rgb(244,66,21)" fg:x="26" fg:w="38923"/><text x="0.3166%" y="1471.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (38,923 samples, 99.78%)</title><rect x="0.0666%" y="1445" width="99.7770%" height="15" fill="rgb(222,97,12)" fg:x="26" fg:w="38923"/><text x="0.3166%" y="1455.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::sys::pal::unix::thread::guard::current (6 samples, 0.02%)</title><rect x="99.8282%" y="1429" width="0.0154%" height="15" fill="rgb(219,213,19)" fg:x="38943" fg:w="6"/><text x="100.0782%" y="1439.50"></text></g><g><title>pthread_getattr_np (6 samples, 0.02%)</title><rect x="99.8282%" y="1413" width="0.0154%" height="15" fill="rgb(252,169,30)" fg:x="38943" fg:w="6"/><text x="100.0782%" y="1423.50"></text></g><g><title>__sysconf (5 samples, 0.01%)</title><rect x="99.8513%" y="1445" width="0.0128%" height="15" fill="rgb(206,32,51)" fg:x="38952" fg:w="5"/><text x="100.1013%" y="1455.50"></text></g><g><title>[libc.so.6] (38,956 samples, 99.86%)</title><rect x="0.0205%" y="1509" width="99.8616%" height="15" fill="rgb(250,172,42)" fg:x="8" fg:w="38956"/><text x="0.2705%" y="1519.50">[libc.so.6]</text></g><g><title>[libc.so.6] (38,956 samples, 99.86%)</title><rect x="0.0205%" y="1493" width="99.8616%" height="15" fill="rgb(209,34,43)" fg:x="8" fg:w="38956"/><text x="0.2705%" y="1503.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (38,938 samples, 99.82%)</title><rect x="0.0666%" y="1477" width="99.8154%" height="15" fill="rgb(223,11,35)" fg:x="26" fg:w="38938"/><text x="0.3166%" y="1487.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (15 samples, 0.04%)</title><rect x="99.8436%" y="1461" width="0.0385%" height="15" fill="rgb(251,219,26)" fg:x="38949" fg:w="15"/><text x="100.0936%" y="1471.50"></text></g><g><title>sigaltstack (7 samples, 0.02%)</title><rect x="99.8641%" y="1445" width="0.0179%" height="15" fill="rgb(231,119,3)" fg:x="38957" fg:w="7"/><text x="100.1141%" y="1455.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.8667%" y="1429" width="0.0154%" height="15" fill="rgb(216,97,11)" fg:x="38958" fg:w="6"/><text x="100.1167%" y="1439.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.8718%" y="1413" width="0.0103%" height="15" fill="rgb(223,59,9)" fg:x="38960" fg:w="4"/><text x="100.1218%" y="1423.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="99.8821%" y="1509" width="0.0333%" height="15" fill="rgb(233,93,31)" fg:x="38964" fg:w="13"/><text x="100.1321%" y="1519.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="99.8923%" y="1493" width="0.0231%" height="15" fill="rgb(239,81,33)" fg:x="38968" fg:w="9"/><text x="100.1423%" y="1503.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="99.8949%" y="1477" width="0.0205%" height="15" fill="rgb(213,120,34)" fg:x="38969" fg:w="8"/><text x="100.1449%" y="1487.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9000%" y="1461" width="0.0154%" height="15" fill="rgb(243,49,53)" fg:x="38971" fg:w="6"/><text x="100.1500%" y="1471.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (24 samples, 0.06%)</title><rect x="99.9180%" y="1365" width="0.0615%" height="15" fill="rgb(247,216,33)" fg:x="38978" fg:w="24"/><text x="100.1680%" y="1375.50"></text></g><g><title>std::io::default_read_to_end (24 samples, 0.06%)</title><rect x="99.9180%" y="1349" width="0.0615%" height="15" fill="rgb(226,26,14)" fg:x="38978" fg:w="24"/><text x="100.1680%" y="1359.50"></text></g><g><title>read (11 samples, 0.03%)</title><rect x="99.9513%" y="1333" width="0.0282%" height="15" fill="rgb(215,49,53)" fg:x="38991" fg:w="11"/><text x="100.2013%" y="1343.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9641%" y="1317" width="0.0154%" height="15" fill="rgb(245,162,40)" fg:x="38996" fg:w="6"/><text x="100.2141%" y="1327.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9667%" y="1301" width="0.0128%" height="15" fill="rgb(229,68,17)" fg:x="38997" fg:w="5"/><text x="100.2167%" y="1311.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9667%" y="1285" width="0.0128%" height="15" fill="rgb(213,182,10)" fg:x="38997" fg:w="5"/><text x="100.2167%" y="1295.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9667%" y="1269" width="0.0128%" height="15" fill="rgb(245,125,30)" fg:x="38997" fg:w="5"/><text x="100.2167%" y="1279.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9667%" y="1253" width="0.0128%" height="15" fill="rgb(232,202,2)" fg:x="38997" fg:w="5"/><text x="100.2167%" y="1263.50"></text></g><g><title>all (39,010 samples, 100%)</title><rect x="0.0000%" y="1541" width="100.0000%" height="15" fill="rgb(237,140,51)" fg:x="0" fg:w="39010"/><text x="0.2500%" y="1551.50"></text></g><g><title>rs-1brc (39,010 samples, 100.00%)</title><rect x="0.0000%" y="1525" width="100.0000%" height="15" fill="rgb(236,157,25)" fg:x="0" fg:w="39010"/><text x="0.2500%" y="1535.50">rs-1brc</text></g><g><title>_start (33 samples, 0.08%)</title><rect x="99.9154%" y="1509" width="0.0846%" height="15" fill="rgb(219,209,0)" fg:x="38977" fg:w="33"/><text x="100.1654%" y="1519.50"></text></g><g><title>__libc_start_main (33 samples, 0.08%)</title><rect x="99.9154%" y="1493" width="0.0846%" height="15" fill="rgb(240,116,54)" fg:x="38977" fg:w="33"/><text x="100.1654%" y="1503.50"></text></g><g><title>[libc.so.6] (33 samples, 0.08%)</title><rect x="99.9154%" y="1477" width="0.0846%" height="15" fill="rgb(216,10,36)" fg:x="38977" fg:w="33"/><text x="100.1654%" y="1487.50"></text></g><g><title>main (33 samples, 0.08%)</title><rect x="99.9154%" y="1461" width="0.0846%" height="15" fill="rgb(222,72,44)" fg:x="38977" fg:w="33"/><text x="100.1654%" y="1471.50"></text></g><g><title>std::rt::lang_start_internal (33 samples, 0.08%)</title><rect x="99.9154%" y="1445" width="0.0846%" height="15" fill="rgb(232,159,9)" fg:x="38977" fg:w="33"/><text x="100.1654%" y="1455.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (32 samples, 0.08%)</title><rect x="99.9180%" y="1429" width="0.0820%" height="15" fill="rgb(210,39,32)" fg:x="38978" fg:w="32"/><text x="100.1680%" y="1439.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (32 samples, 0.08%)</title><rect x="99.9180%" y="1413" width="0.0820%" height="15" fill="rgb(216,194,45)" fg:x="38978" fg:w="32"/><text x="100.1680%" y="1423.50"></text></g><g><title>core::ops::function::FnOnce::call_once (32 samples, 0.08%)</title><rect x="99.9180%" y="1397" width="0.0820%" height="15" fill="rgb(218,18,35)" fg:x="38978" fg:w="32"/><text x="100.1680%" y="1407.50"></text></g><g><title>rs_1brc::main (32 samples, 0.08%)</title><rect x="99.9180%" y="1381" width="0.0820%" height="15" fill="rgb(207,83,51)" fg:x="38978" fg:w="32"/><text x="100.1680%" y="1391.50"></text></g></svg></svg>