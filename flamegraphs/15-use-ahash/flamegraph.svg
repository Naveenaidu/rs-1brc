<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="33841"><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0148%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0207%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (30 samples, 0.09%)</title><rect x="0.0236%" y="437" width="0.0886%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="30"/><text x="0.2736%" y="447.50"></text></g><g><title>[unknown] (26 samples, 0.08%)</title><rect x="0.0355%" y="421" width="0.0768%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="26"/><text x="0.2855%" y="431.50"></text></g><g><title>[unknown] (13 samples, 0.04%)</title><rect x="0.0739%" y="405" width="0.0384%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="13"/><text x="0.3239%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="0.0916%" y="389" width="0.0207%" height="15" fill="rgb(232,128,0)" fg:x="31" fg:w="7"/><text x="0.3416%" y="399.50"></text></g><g><title>_setjmp (9 samples, 0.03%)</title><rect x="0.1212%" y="437" width="0.0266%" height="15" fill="rgb(207,160,47)" fg:x="41" fg:w="9"/><text x="0.3712%" y="447.50"></text></g><g><title>std::io::stdio::set_output_capture (4 samples, 0.01%)</title><rect x="0.1477%" y="389" width="0.0118%" height="15" fill="rgb(228,23,34)" fg:x="50" fg:w="4"/><text x="0.3977%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (146 samples, 0.43%)</title><rect x="1.2913%" y="245" width="0.4314%" height="15" fill="rgb(218,30,26)" fg:x="437" fg:w="146"/><text x="1.5413%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (651 samples, 1.92%)</title><rect x="1.2913%" y="261" width="1.9237%" height="15" fill="rgb(220,122,19)" fg:x="437" fg:w="651"/><text x="1.5413%" y="271.50">c..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (505 samples, 1.49%)</title><rect x="1.7228%" y="245" width="1.4923%" height="15" fill="rgb(250,228,42)" fg:x="583" fg:w="505"/><text x="1.9728%" y="255.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,179 samples, 9.39%)</title><rect x="6.7167%" y="181" width="9.3939%" height="15" fill="rgb(240,193,28)" fg:x="2273" fg:w="3179"/><text x="6.9667%" y="191.50">&lt;f32 as core:..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (70 samples, 0.21%)</title><rect x="16.1106%" y="181" width="0.2068%" height="15" fill="rgb(216,20,37)" fg:x="5452" fg:w="70"/><text x="16.3606%" y="191.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (21 samples, 0.06%)</title><rect x="16.3175%" y="181" width="0.0621%" height="15" fill="rgb(206,188,39)" fg:x="5522" fg:w="21"/><text x="16.5675%" y="191.50"></text></g><g><title>fast_float::number::Number::try_fast_path (4,220 samples, 12.47%)</title><rect x="4.6689%" y="197" width="12.4701%" height="15" fill="rgb(217,207,13)" fg:x="1580" fg:w="4220"/><text x="4.9189%" y="207.50">fast_float::number:..</text></g><g><title>fast_float::number::Number::is_fast_path (257 samples, 0.76%)</title><rect x="16.3795%" y="181" width="0.7594%" height="15" fill="rgb(231,73,38)" fg:x="5543" fg:w="257"/><text x="16.6295%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (221 samples, 0.65%)</title><rect x="20.1442%" y="181" width="0.6531%" height="15" fill="rgb(225,20,46)" fg:x="6817" fg:w="221"/><text x="20.3942%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (207 samples, 0.61%)</title><rect x="20.1856%" y="165" width="0.6117%" height="15" fill="rgb(210,31,41)" fg:x="6831" fg:w="207"/><text x="20.4356%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (11 samples, 0.03%)</title><rect x="20.7973%" y="181" width="0.0325%" height="15" fill="rgb(221,200,47)" fg:x="7038" fg:w="11"/><text x="21.0473%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::first (26 samples, 0.08%)</title><rect x="20.8298%" y="181" width="0.0768%" height="15" fill="rgb(226,26,5)" fg:x="7049" fg:w="26"/><text x="21.0798%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (13 samples, 0.04%)</title><rect x="20.9066%" y="181" width="0.0384%" height="15" fill="rgb(249,33,26)" fg:x="7075" fg:w="13"/><text x="21.1566%" y="191.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (13 samples, 0.04%)</title><rect x="20.9066%" y="165" width="0.0384%" height="15" fill="rgb(235,183,28)" fg:x="7075" fg:w="13"/><text x="21.1566%" y="175.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (215 samples, 0.64%)</title><rect x="20.9450%" y="181" width="0.6353%" height="15" fill="rgb(221,5,38)" fg:x="7088" fg:w="215"/><text x="21.1950%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (215 samples, 0.64%)</title><rect x="20.9450%" y="165" width="0.6353%" height="15" fill="rgb(247,18,42)" fg:x="7088" fg:w="215"/><text x="21.1950%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (104 samples, 0.31%)</title><rect x="21.2730%" y="149" width="0.3073%" height="15" fill="rgb(241,131,45)" fg:x="7199" fg:w="104"/><text x="21.5230%" y="159.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (642 samples, 1.90%)</title><rect x="23.0578%" y="149" width="1.8971%" height="15" fill="rgb(249,31,29)" fg:x="7803" fg:w="642"/><text x="23.3078%" y="159.50">c..</text></g><g><title>fast_float::common::AsciiStr::first (34 samples, 0.10%)</title><rect x="24.9549%" y="149" width="0.1005%" height="15" fill="rgb(225,111,53)" fg:x="8445" fg:w="34"/><text x="25.2049%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (453 samples, 1.34%)</title><rect x="25.0554%" y="149" width="1.3386%" height="15" fill="rgb(238,160,17)" fg:x="8479" fg:w="453"/><text x="25.3054%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::step (105 samples, 0.31%)</title><rect x="26.3940%" y="149" width="0.3103%" height="15" fill="rgb(214,148,48)" fg:x="8932" fg:w="105"/><text x="26.6440%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (105 samples, 0.31%)</title><rect x="26.3940%" y="133" width="0.3103%" height="15" fill="rgb(232,36,49)" fg:x="8932" fg:w="105"/><text x="26.6440%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (105 samples, 0.31%)</title><rect x="26.3940%" y="117" width="0.3103%" height="15" fill="rgb(209,103,24)" fg:x="8932" fg:w="105"/><text x="26.6440%" y="127.50"></text></g><g><title>fast_float::parse (8,159 samples, 24.11%)</title><rect x="3.2150%" y="261" width="24.1098%" height="15" fill="rgb(229,88,8)" fg:x="1088" fg:w="8159"/><text x="3.4650%" y="271.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (8,159 samples, 24.11%)</title><rect x="3.2150%" y="245" width="24.1098%" height="15" fill="rgb(213,181,19)" fg:x="1088" fg:w="8159"/><text x="3.4650%" y="255.50">fast_float::FastFloat::parse_float</text></g><g><title>fast_float::FastFloat::parse_float_partial (8,159 samples, 24.11%)</title><rect x="3.2150%" y="229" width="24.1098%" height="15" fill="rgb(254,191,54)" fg:x="1088" fg:w="8159"/><text x="3.4650%" y="239.50">fast_float::FastFloat::parse_float_par..</text></g><g><title>fast_float::parse::parse_float (8,159 samples, 24.11%)</title><rect x="3.2150%" y="213" width="24.1098%" height="15" fill="rgb(241,83,37)" fg:x="1088" fg:w="8159"/><text x="3.4650%" y="223.50">fast_float::parse::parse_float</text></g><g><title>fast_float::number::parse_number (3,447 samples, 10.19%)</title><rect x="17.1390%" y="197" width="10.1859%" height="15" fill="rgb(233,36,39)" fg:x="5800" fg:w="3447"/><text x="17.3890%" y="207.50">fast_float::num..</text></g><g><title>fast_float::number::try_parse_digits (1,944 samples, 5.74%)</title><rect x="21.5803%" y="181" width="5.7445%" height="15" fill="rgb(226,3,54)" fg:x="7303" fg:w="1944"/><text x="21.8303%" y="191.50">fast_fl..</text></g><g><title>fast_float::common::AsciiStr::parse_digits (1,944 samples, 5.74%)</title><rect x="21.5803%" y="165" width="5.7445%" height="15" fill="rgb(245,192,40)" fg:x="7303" fg:w="1944"/><text x="21.8303%" y="175.50">fast_fl..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (210 samples, 0.62%)</title><rect x="26.7043%" y="149" width="0.6205%" height="15" fill="rgb(238,167,29)" fg:x="9037" fg:w="210"/><text x="26.9543%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (88 samples, 0.26%)</title><rect x="27.0648%" y="133" width="0.2600%" height="15" fill="rgb(232,182,51)" fg:x="9159" fg:w="88"/><text x="27.3148%" y="143.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (8 samples, 0.02%)</title><rect x="27.3455%" y="229" width="0.0236%" height="15" fill="rgb(231,60,39)" fg:x="9254" fg:w="8"/><text x="27.5955%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (8 samples, 0.02%)</title><rect x="27.3455%" y="213" width="0.0236%" height="15" fill="rgb(208,69,12)" fg:x="9254" fg:w="8"/><text x="27.5955%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (259 samples, 0.77%)</title><rect x="27.3692%" y="229" width="0.7653%" height="15" fill="rgb(235,93,37)" fg:x="9262" fg:w="259"/><text x="27.6192%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (278 samples, 0.82%)</title><rect x="28.1345%" y="229" width="0.8215%" height="15" fill="rgb(213,116,39)" fg:x="9521" fg:w="278"/><text x="28.3845%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (6 samples, 0.02%)</title><rect x="29.9134%" y="181" width="0.0177%" height="15" fill="rgb(222,207,29)" fg:x="10123" fg:w="6"/><text x="30.1634%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.02%)</title><rect x="29.9134%" y="165" width="0.0177%" height="15" fill="rgb(206,96,30)" fg:x="10123" fg:w="6"/><text x="30.1634%" y="175.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (12 samples, 0.04%)</title><rect x="33.0546%" y="149" width="0.0355%" height="15" fill="rgb(218,138,4)" fg:x="11186" fg:w="12"/><text x="33.3046%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (12 samples, 0.04%)</title><rect x="33.0546%" y="133" width="0.0355%" height="15" fill="rgb(250,191,14)" fg:x="11186" fg:w="12"/><text x="33.3046%" y="143.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (6 samples, 0.02%)</title><rect x="33.2201%" y="117" width="0.0177%" height="15" fill="rgb(239,60,40)" fg:x="11242" fg:w="6"/><text x="33.4701%" y="127.50"></text></g><g><title>[unknown] (71 samples, 0.21%)</title><rect x="36.0273%" y="101" width="0.2098%" height="15" fill="rgb(206,27,48)" fg:x="12192" fg:w="71"/><text x="36.2773%" y="111.50"></text></g><g><title>[unknown] (34 samples, 0.10%)</title><rect x="36.1366%" y="85" width="0.1005%" height="15" fill="rgb(225,35,8)" fg:x="12229" fg:w="34"/><text x="36.3866%" y="95.50"></text></g><g><title>[unknown] (31 samples, 0.09%)</title><rect x="36.1455%" y="69" width="0.0916%" height="15" fill="rgb(250,213,24)" fg:x="12232" fg:w="31"/><text x="36.3955%" y="79.50"></text></g><g><title>[unknown] (27 samples, 0.08%)</title><rect x="36.1573%" y="53" width="0.0798%" height="15" fill="rgb(247,123,22)" fg:x="12236" fg:w="27"/><text x="36.4073%" y="63.50"></text></g><g><title>[unknown] (18 samples, 0.05%)</title><rect x="36.1839%" y="37" width="0.0532%" height="15" fill="rgb(231,138,38)" fg:x="12245" fg:w="18"/><text x="36.4339%" y="47.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (88 samples, 0.26%)</title><rect x="36.2371%" y="101" width="0.2600%" height="15" fill="rgb(231,145,46)" fg:x="12263" fg:w="88"/><text x="36.4871%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (88 samples, 0.26%)</title><rect x="36.2371%" y="85" width="0.2600%" height="15" fill="rgb(251,118,11)" fg:x="12263" fg:w="88"/><text x="36.4871%" y="95.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1,351 samples, 3.99%)</title><rect x="33.2378%" y="117" width="3.9922%" height="15" fill="rgb(217,147,25)" fg:x="11248" fg:w="1351"/><text x="33.4878%" y="127.50">memc..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (248 samples, 0.73%)</title><rect x="36.4971%" y="101" width="0.7328%" height="15" fill="rgb(247,81,37)" fg:x="12351" fg:w="248"/><text x="36.7471%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (248 samples, 0.73%)</title><rect x="36.4971%" y="85" width="0.7328%" height="15" fill="rgb(209,12,38)" fg:x="12351" fg:w="248"/><text x="36.7471%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (14 samples, 0.04%)</title><rect x="37.2300%" y="101" width="0.0414%" height="15" fill="rgb(227,1,9)" fg:x="12599" fg:w="14"/><text x="37.4800%" y="111.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (30 samples, 0.09%)</title><rect x="37.2300%" y="117" width="0.0886%" height="15" fill="rgb(248,47,43)" fg:x="12599" fg:w="30"/><text x="37.4800%" y="127.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (16 samples, 0.05%)</title><rect x="37.2714%" y="101" width="0.0473%" height="15" fill="rgb(221,10,30)" fg:x="12613" fg:w="16"/><text x="37.5214%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="37.3039%" y="85" width="0.0148%" height="15" fill="rgb(210,229,1)" fg:x="12624" fg:w="5"/><text x="37.5539%" y="95.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3,393 samples, 10.03%)</title><rect x="27.3248%" y="245" width="10.0263%" height="15" fill="rgb(222,148,37)" fg:x="9247" fg:w="3393"/><text x="27.5748%" y="255.50">memchr::arch::..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (2,841 samples, 8.40%)</title><rect x="28.9560%" y="229" width="8.3951%" height="15" fill="rgb(234,67,33)" fg:x="9799" fg:w="2841"/><text x="29.2060%" y="239.50">memchr::memc..</text></g><g><title>memchr::memchr::memchr_raw (2,841 samples, 8.40%)</title><rect x="28.9560%" y="213" width="8.3951%" height="15" fill="rgb(247,98,35)" fg:x="9799" fg:w="2841"/><text x="29.2060%" y="223.50">memchr::memc..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2,841 samples, 8.40%)</title><rect x="28.9560%" y="197" width="8.3951%" height="15" fill="rgb(247,138,52)" fg:x="9799" fg:w="2841"/><text x="29.2060%" y="207.50">memchr::arch..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2,510 samples, 7.42%)</title><rect x="29.9341%" y="181" width="7.4170%" height="15" fill="rgb(213,79,30)" fg:x="10130" fg:w="2510"/><text x="30.1841%" y="191.50">memchr::ar..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (1,780 samples, 5.26%)</title><rect x="32.0913%" y="165" width="5.2599%" height="15" fill="rgb(246,177,23)" fg:x="10860" fg:w="1780"/><text x="32.3413%" y="175.50">memchr..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (1,442 samples, 4.26%)</title><rect x="33.0900%" y="149" width="4.2611%" height="15" fill="rgb(230,62,27)" fg:x="11198" fg:w="1442"/><text x="33.3400%" y="159.50">memch..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1,442 samples, 4.26%)</title><rect x="33.0900%" y="133" width="4.2611%" height="15" fill="rgb(216,154,8)" fg:x="11198" fg:w="1442"/><text x="33.3400%" y="143.50">memch..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (11 samples, 0.03%)</title><rect x="37.3186%" y="117" width="0.0325%" height="15" fill="rgb(244,35,45)" fg:x="12629" fg:w="11"/><text x="37.5686%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (11 samples, 0.03%)</title><rect x="37.3186%" y="101" width="0.0325%" height="15" fill="rgb(251,115,12)" fg:x="12629" fg:w="11"/><text x="37.5686%" y="111.50"></text></g><g><title>memchr::memchr::memchr (3,667 samples, 10.84%)</title><rect x="27.3248%" y="261" width="10.8360%" height="15" fill="rgb(240,54,50)" fg:x="9247" fg:w="3667"/><text x="27.5748%" y="271.50">memchr::memchr::..</text></g><g><title>rs_1brc::process_chunk (274 samples, 0.81%)</title><rect x="37.3511%" y="245" width="0.8097%" height="15" fill="rgb(233,84,52)" fg:x="12640" fg:w="274"/><text x="37.6011%" y="255.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (686 samples, 2.03%)</title><rect x="38.1608%" y="261" width="2.0271%" height="15" fill="rgb(207,117,47)" fg:x="12914" fg:w="686"/><text x="38.4108%" y="271.50">s..</text></g><g><title>rs_1brc::process_chunk::_{{closure}} (686 samples, 2.03%)</title><rect x="38.1608%" y="245" width="2.0271%" height="15" fill="rgb(249,43,39)" fg:x="12914" fg:w="686"/><text x="38.4108%" y="255.50">r..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (74 samples, 0.22%)</title><rect x="43.8492%" y="229" width="0.2187%" height="15" fill="rgb(209,38,44)" fg:x="14839" fg:w="74"/><text x="44.0992%" y="239.50"></text></g><g><title>ahash::operations::folded_multiply (410 samples, 1.21%)</title><rect x="45.1346%" y="181" width="1.2115%" height="15" fill="rgb(236,212,23)" fg:x="15274" fg:w="410"/><text x="45.3846%" y="191.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (229 samples, 0.68%)</title><rect x="45.6695%" y="165" width="0.6767%" height="15" fill="rgb(242,79,21)" fg:x="15455" fg:w="229"/><text x="45.9195%" y="175.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (934 samples, 2.76%)</title><rect x="45.1346%" y="197" width="2.7600%" height="15" fill="rgb(211,96,35)" fg:x="15274" fg:w="934"/><text x="45.3846%" y="207.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (524 samples, 1.55%)</title><rect x="46.3461%" y="181" width="1.5484%" height="15" fill="rgb(253,215,40)" fg:x="15684" fg:w="524"/><text x="46.5961%" y="191.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (71 samples, 0.21%)</title><rect x="47.8946%" y="197" width="0.2098%" height="15" fill="rgb(211,81,21)" fg:x="16208" fg:w="71"/><text x="48.1446%" y="207.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (71 samples, 0.21%)</title><rect x="47.8946%" y="181" width="0.2098%" height="15" fill="rgb(208,190,38)" fg:x="16208" fg:w="71"/><text x="48.1446%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (70 samples, 0.21%)</title><rect x="48.1280%" y="101" width="0.2068%" height="15" fill="rgb(235,213,38)" fg:x="16287" fg:w="70"/><text x="48.3780%" y="111.50"></text></g><g><title>ahash::operations::folded_multiply (69 samples, 0.20%)</title><rect x="48.1310%" y="85" width="0.2039%" height="15" fill="rgb(237,122,38)" fg:x="16288" fg:w="69"/><text x="48.3810%" y="95.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (69 samples, 0.20%)</title><rect x="48.1310%" y="69" width="0.2039%" height="15" fill="rgb(244,218,35)" fg:x="16288" fg:w="69"/><text x="48.3810%" y="79.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (312 samples, 0.92%)</title><rect x="48.1280%" y="149" width="0.9220%" height="15" fill="rgb(240,68,47)" fg:x="16287" fg:w="312"/><text x="48.3780%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (312 samples, 0.92%)</title><rect x="48.1280%" y="133" width="0.9220%" height="15" fill="rgb(210,16,53)" fg:x="16287" fg:w="312"/><text x="48.3780%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (312 samples, 0.92%)</title><rect x="48.1280%" y="117" width="0.9220%" height="15" fill="rgb(235,124,12)" fg:x="16287" fg:w="312"/><text x="48.3780%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (242 samples, 0.72%)</title><rect x="48.3349%" y="101" width="0.7151%" height="15" fill="rgb(224,169,11)" fg:x="16357" fg:w="242"/><text x="48.5849%" y="111.50"></text></g><g><title>ahash::operations::folded_multiply (124 samples, 0.37%)</title><rect x="52.1645%" y="101" width="0.3664%" height="15" fill="rgb(250,166,2)" fg:x="17653" fg:w="124"/><text x="52.4145%" y="111.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (101 samples, 0.30%)</title><rect x="52.2325%" y="85" width="0.2985%" height="15" fill="rgb(242,216,29)" fg:x="17676" fg:w="101"/><text x="52.4825%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (42 samples, 0.12%)</title><rect x="52.5310%" y="101" width="0.1241%" height="15" fill="rgb(230,116,27)" fg:x="17777" fg:w="42"/><text x="52.7810%" y="111.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1,075 samples, 3.18%)</title><rect x="50.1374%" y="117" width="3.1766%" height="15" fill="rgb(228,99,48)" fg:x="16967" fg:w="1075"/><text x="50.3874%" y="127.50">aha..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (223 samples, 0.66%)</title><rect x="52.6551%" y="101" width="0.6590%" height="15" fill="rgb(253,11,6)" fg:x="17819" fg:w="223"/><text x="52.9051%" y="111.50"></text></g><g><title>ahash::operations::read_small (78 samples, 0.23%)</title><rect x="53.3140%" y="117" width="0.2305%" height="15" fill="rgb(247,143,39)" fg:x="18042" fg:w="78"/><text x="53.5640%" y="127.50"></text></g><g><title>&lt;[u8] as ahash::convert::ReadFromSlice&gt;::read_last_u32 (11 samples, 0.03%)</title><rect x="53.5120%" y="101" width="0.0325%" height="15" fill="rgb(236,97,10)" fg:x="18109" fg:w="11"/><text x="53.7620%" y="111.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1,524 samples, 4.50%)</title><rect x="49.0500%" y="133" width="4.5034%" height="15" fill="rgb(233,208,19)" fg:x="16599" fg:w="1524"/><text x="49.3000%" y="143.50">&lt;ahas..</text></g><g><title>hashbrown::map::make_hash (3,211 samples, 9.49%)</title><rect x="44.0678%" y="229" width="9.4885%" height="15" fill="rgb(216,164,2)" fg:x="14913" fg:w="3211"/><text x="44.3178%" y="239.50">hashbrown::map..</text></g><g><title>core::hash::BuildHasher::hash_one (2,959 samples, 8.74%)</title><rect x="44.8125%" y="213" width="8.7438%" height="15" fill="rgb(220,129,5)" fg:x="15165" fg:w="2959"/><text x="45.0625%" y="223.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,843 samples, 5.45%)</title><rect x="48.1103%" y="197" width="5.4461%" height="15" fill="rgb(242,17,10)" fg:x="16281" fg:w="1843"/><text x="48.3603%" y="207.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,837 samples, 5.43%)</title><rect x="48.1280%" y="181" width="5.4283%" height="15" fill="rgb(242,107,0)" fg:x="16287" fg:w="1837"/><text x="48.3780%" y="191.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,837 samples, 5.43%)</title><rect x="48.1280%" y="165" width="5.4283%" height="15" fill="rgb(251,28,31)" fg:x="16287" fg:w="1837"/><text x="48.3780%" y="175.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1,525 samples, 4.51%)</title><rect x="49.0500%" y="149" width="4.5064%" height="15" fill="rgb(233,223,10)" fg:x="16599" fg:w="1525"/><text x="49.3000%" y="159.50">core:..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.04%)</title><rect x="59.6525%" y="197" width="0.0355%" height="15" fill="rgb(215,21,27)" fg:x="20187" fg:w="12"/><text x="59.9025%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.04%)</title><rect x="59.6525%" y="181" width="0.0355%" height="15" fill="rgb(232,23,21)" fg:x="20187" fg:w="12"/><text x="59.9025%" y="191.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (12 samples, 0.04%)</title><rect x="59.6525%" y="165" width="0.0355%" height="15" fill="rgb(244,5,23)" fg:x="20187" fg:w="12"/><text x="59.9025%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (570 samples, 1.68%)</title><rect x="59.6909%" y="181" width="1.6843%" height="15" fill="rgb(226,81,46)" fg:x="20200" fg:w="570"/><text x="59.9409%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (570 samples, 1.68%)</title><rect x="59.6909%" y="165" width="1.6843%" height="15" fill="rgb(247,70,30)" fg:x="20200" fg:w="570"/><text x="59.9409%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (570 samples, 1.68%)</title><rect x="59.6909%" y="149" width="1.6843%" height="15" fill="rgb(212,68,19)" fg:x="20200" fg:w="570"/><text x="59.9409%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (570 samples, 1.68%)</title><rect x="59.6909%" y="133" width="1.6843%" height="15" fill="rgb(240,187,13)" fg:x="20200" fg:w="570"/><text x="59.9409%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8,739 samples, 25.82%)</title><rect x="59.6880%" y="197" width="25.8237%" height="15" fill="rgb(223,113,26)" fg:x="20199" fg:w="8739"/><text x="59.9380%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{c..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (8,168 samples, 24.14%)</title><rect x="61.3753%" y="181" width="24.1364%" height="15" fill="rgb(206,192,2)" fg:x="20770" fg:w="8168"/><text x="61.6253%" y="191.50">hashbrown::rustc_entry::_&lt;impl hashbro..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,168 samples, 24.14%)</title><rect x="61.3753%" y="165" width="24.1364%" height="15" fill="rgb(241,108,4)" fg:x="20770" fg:w="8168"/><text x="61.6253%" y="175.50">core::cmp::impls::&lt;impl core::cmp::Par..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8,168 samples, 24.14%)</title><rect x="61.3753%" y="149" width="24.1364%" height="15" fill="rgb(247,173,49)" fg:x="20770" fg:w="8168"/><text x="61.6253%" y="159.50">core::slice::cmp::&lt;impl core::cmp::Par..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,168 samples, 24.14%)</title><rect x="61.3753%" y="133" width="24.1364%" height="15" fill="rgb(224,114,35)" fg:x="20770" fg:w="8168"/><text x="61.6253%" y="143.50">&lt;[A] as core::slice::cmp::SlicePartial..</text></g><g><title>[libc.so.6] (5,752 samples, 17.00%)</title><rect x="68.5145%" y="117" width="16.9971%" height="15" fill="rgb(245,159,27)" fg:x="23186" fg:w="5752"/><text x="68.7645%" y="127.50">[libc.so.6]</text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="85.4998%" y="101" width="0.0118%" height="15" fill="rgb(245,172,44)" fg:x="28934" fg:w="4"/><text x="85.7498%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (1,389 samples, 4.10%)</title><rect x="85.5117%" y="197" width="4.1045%" height="15" fill="rgb(236,23,11)" fg:x="28938" fg:w="1389"/><text x="85.7617%" y="207.50">hash..</text></g><g><title>core::intrinsics::copy_nonoverlapping (281 samples, 0.83%)</title><rect x="89.6161%" y="165" width="0.8304%" height="15" fill="rgb(205,117,38)" fg:x="30327" fg:w="281"/><text x="89.8661%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (351 samples, 1.04%)</title><rect x="89.6161%" y="197" width="1.0372%" height="15" fill="rgb(237,72,25)" fg:x="30327" fg:w="351"/><text x="89.8661%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (351 samples, 1.04%)</title><rect x="89.6161%" y="181" width="1.0372%" height="15" fill="rgb(244,70,9)" fg:x="30327" fg:w="351"/><text x="89.8661%" y="191.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (70 samples, 0.21%)</title><rect x="90.4465%" y="165" width="0.2068%" height="15" fill="rgb(217,125,39)" fg:x="30608" fg:w="70"/><text x="90.6965%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,395 samples, 7.08%)</title><rect x="90.6533%" y="197" width="7.0772%" height="15" fill="rgb(235,36,10)" fg:x="30678" fg:w="2395"/><text x="90.9033%" y="207.50">hashbrown..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,395 samples, 7.08%)</title><rect x="90.6533%" y="181" width="7.0772%" height="15" fill="rgb(251,123,47)" fg:x="30678" fg:w="2395"/><text x="90.9033%" y="191.50">core::cor..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (241 samples, 0.71%)</title><rect x="97.7306%" y="197" width="0.7122%" height="15" fill="rgb(221,13,13)" fg:x="33073" fg:w="241"/><text x="97.9806%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (241 samples, 0.71%)</title><rect x="97.7306%" y="181" width="0.7122%" height="15" fill="rgb(238,131,9)" fg:x="33073" fg:w="241"/><text x="97.9806%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (241 samples, 0.71%)</title><rect x="97.7306%" y="165" width="0.7122%" height="15" fill="rgb(211,50,8)" fg:x="33073" fg:w="241"/><text x="97.9806%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15,085 samples, 44.58%)</title><rect x="54.0144%" y="213" width="44.5761%" height="15" fill="rgb(245,182,24)" fg:x="18279" fg:w="15085"/><text x="54.2644%" y="223.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (50 samples, 0.15%)</title><rect x="98.4427%" y="197" width="0.1477%" height="15" fill="rgb(242,14,37)" fg:x="33314" fg:w="50"/><text x="98.6927%" y="207.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (19,769 samples, 58.42%)</title><rect x="40.1938%" y="245" width="58.4173%" height="15" fill="rgb(246,228,12)" fg:x="13602" fg:w="19769"/><text x="40.4438%" y="255.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15,247 samples, 45.05%)</title><rect x="53.5563%" y="229" width="45.0548%" height="15" fill="rgb(213,55,15)" fg:x="18124" fg:w="15247"/><text x="53.8063%" y="239.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 0.02%)</title><rect x="98.5905%" y="213" width="0.0207%" height="15" fill="rgb(209,9,3)" fg:x="33364" fg:w="7"/><text x="98.8405%" y="223.50"></text></g><g><title>std::panic::catch_unwind (33,743 samples, 99.71%)</title><rect x="0.1596%" y="389" width="99.7104%" height="15" fill="rgb(230,59,30)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (33,743 samples, 99.71%)</title><rect x="0.1596%" y="373" width="99.7104%" height="15" fill="rgb(209,121,21)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (33,743 samples, 99.71%)</title><rect x="0.1596%" y="357" width="99.7104%" height="15" fill="rgb(220,109,13)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="367.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (33,743 samples, 99.71%)</title><rect x="0.1596%" y="341" width="99.7104%" height="15" fill="rgb(232,18,1)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="351.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (33,743 samples, 99.71%)</title><rect x="0.1596%" y="325" width="99.7104%" height="15" fill="rgb(215,41,42)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="335.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (33,743 samples, 99.71%)</title><rect x="0.1596%" y="309" width="99.7104%" height="15" fill="rgb(224,123,36)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="319.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rs_1brc::main::_{{closure}}::_{{closure}} (33,743 samples, 99.71%)</title><rect x="0.1596%" y="293" width="99.7104%" height="15" fill="rgb(240,125,3)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="303.50">rs_1brc::main::_{{closure}}::_{{closure}}</text></g><g><title>rs_1brc::process_chunk (33,743 samples, 99.71%)</title><rect x="0.1596%" y="277" width="99.7104%" height="15" fill="rgb(205,98,50)" fg:x="54" fg:w="33743"/><text x="0.4096%" y="287.50">rs_1brc::process_chunk</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (20,195 samples, 59.68%)</title><rect x="40.1938%" y="261" width="59.6761%" height="15" fill="rgb(205,185,37)" fg:x="13602" fg:w="20195"/><text x="40.4438%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (425 samples, 1.26%)</title><rect x="98.6141%" y="245" width="1.2559%" height="15" fill="rgb(238,207,15)" fg:x="33372" fg:w="425"/><text x="98.8641%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (33,756 samples, 99.75%)</title><rect x="0.1477%" y="421" width="99.7488%" height="15" fill="rgb(213,199,42)" fg:x="50" fg:w="33756"/><text x="0.3977%" y="431.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (33,756 samples, 99.75%)</title><rect x="0.1477%" y="405" width="99.7488%" height="15" fill="rgb(235,201,11)" fg:x="50" fg:w="33756"/><text x="0.3977%" y="415.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::sys::pal::unix::thread::guard::current (9 samples, 0.03%)</title><rect x="99.8700%" y="389" width="0.0266%" height="15" fill="rgb(207,46,11)" fg:x="33797" fg:w="9"/><text x="100.1200%" y="399.50"></text></g><g><title>pthread_getattr_np (8 samples, 0.02%)</title><rect x="99.8729%" y="373" width="0.0236%" height="15" fill="rgb(241,35,35)" fg:x="33798" fg:w="8"/><text x="100.1229%" y="383.50"></text></g><g><title>[libc.so.6] (33,818 samples, 99.93%)</title><rect x="0.0207%" y="469" width="99.9320%" height="15" fill="rgb(243,32,47)" fg:x="7" fg:w="33818"/><text x="0.2707%" y="479.50">[libc.so.6]</text></g><g><title>[libc.so.6] (33,818 samples, 99.93%)</title><rect x="0.0207%" y="453" width="99.9320%" height="15" fill="rgb(247,202,23)" fg:x="7" fg:w="33818"/><text x="0.2707%" y="463.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (33,775 samples, 99.80%)</title><rect x="0.1477%" y="437" width="99.8050%" height="15" fill="rgb(219,102,11)" fg:x="50" fg:w="33775"/><text x="0.3977%" y="447.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (19 samples, 0.06%)</title><rect x="99.8966%" y="421" width="0.0561%" height="15" fill="rgb(243,110,44)" fg:x="33806" fg:w="19"/><text x="100.1466%" y="431.50"></text></g><g><title>sigaltstack (15 samples, 0.04%)</title><rect x="99.9084%" y="405" width="0.0443%" height="15" fill="rgb(222,74,54)" fg:x="33810" fg:w="15"/><text x="100.1584%" y="415.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="99.9084%" y="389" width="0.0443%" height="15" fill="rgb(216,99,12)" fg:x="33810" fg:w="15"/><text x="100.1584%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="99.9084%" y="373" width="0.0443%" height="15" fill="rgb(226,22,26)" fg:x="33810" fg:w="15"/><text x="100.1584%" y="383.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="99.9084%" y="357" width="0.0443%" height="15" fill="rgb(217,163,10)" fg:x="33810" fg:w="15"/><text x="100.1584%" y="367.50"></text></g><g><title>[unknown] (15 samples, 0.04%)</title><rect x="99.9527%" y="469" width="0.0443%" height="15" fill="rgb(213,25,53)" fg:x="33825" fg:w="15"/><text x="100.2027%" y="479.50"></text></g><g><title>all (33,841 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="33841"/><text x="0.2500%" y="511.50"></text></g><g><title>rs-1brc (33,841 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="33841"/><text x="0.2500%" y="495.50">rs-1brc</text></g></svg></svg>