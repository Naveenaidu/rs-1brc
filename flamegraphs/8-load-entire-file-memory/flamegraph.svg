<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="47747"><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0126%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0168%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,734 samples, 3.63%)</title><rect x="2.5405%" y="197" width="3.6316%" height="15" fill="rgb(221,193,54)" fg:x="1213" fg:w="1734"/><text x="2.7905%" y="207.50">&lt;cor..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,668 samples, 3.49%)</title><rect x="2.6787%" y="181" width="3.4934%" height="15" fill="rgb(248,212,6)" fg:x="1279" fg:w="1668"/><text x="2.9287%" y="191.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (4,547 samples, 9.52%)</title><rect x="2.1635%" y="213" width="9.5231%" height="15" fill="rgb(208,68,35)" fg:x="1033" fg:w="4547"/><text x="2.4135%" y="223.50">&lt;core::slice::..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2,633 samples, 5.51%)</title><rect x="6.1721%" y="197" width="5.5145%" height="15" fill="rgb(232,128,0)" fg:x="2947" fg:w="2633"/><text x="6.4221%" y="207.50">&lt;core::..</text></g><g><title>rs_1brc::main::_{{closure}} (2,633 samples, 5.51%)</title><rect x="6.1721%" y="181" width="5.5145%" height="15" fill="rgb(207,160,47)" fg:x="2947" fg:w="2633"/><text x="6.4221%" y="191.50">rs_1brc..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (789 samples, 1.65%)</title><rect x="11.6866%" y="213" width="1.6525%" height="15" fill="rgb(228,23,34)" fg:x="5580" fg:w="789"/><text x="11.9366%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (789 samples, 1.65%)</title><rect x="11.6866%" y="197" width="1.6525%" height="15" fill="rgb(218,30,26)" fg:x="5580" fg:w="789"/><text x="11.9366%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (789 samples, 1.65%)</title><rect x="11.6866%" y="181" width="1.6525%" height="15" fill="rgb(220,122,19)" fg:x="5580" fg:w="789"/><text x="11.9366%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (789 samples, 1.65%)</title><rect x="11.6866%" y="165" width="1.6525%" height="15" fill="rgb(250,228,42)" fg:x="5580" fg:w="789"/><text x="11.9366%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,649 samples, 11.83%)</title><rect x="1.9897%" y="229" width="11.8311%" height="15" fill="rgb(240,193,28)" fg:x="950" fg:w="5649"/><text x="2.2397%" y="239.50">&lt;core::slice::iter..</text></g><g><title>rs_1brc::main (230 samples, 0.48%)</title><rect x="13.3391%" y="213" width="0.4817%" height="15" fill="rgb(216,20,37)" fg:x="6369" fg:w="230"/><text x="13.5891%" y="223.50"></text></g><g><title>read (8 samples, 0.02%)</title><rect x="13.8396%" y="197" width="0.0168%" height="15" fill="rgb(206,188,39)" fg:x="6608" fg:w="8"/><text x="14.0896%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="13.8459%" y="181" width="0.0105%" height="15" fill="rgb(217,207,13)" fg:x="6611" fg:w="5"/><text x="14.0959%" y="191.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (19 samples, 0.04%)</title><rect x="13.8208%" y="229" width="0.0398%" height="15" fill="rgb(231,73,38)" fg:x="6599" fg:w="19"/><text x="14.0708%" y="239.50"></text></g><g><title>std::io::default_read_to_end (19 samples, 0.04%)</title><rect x="13.8208%" y="213" width="0.0398%" height="15" fill="rgb(225,20,46)" fg:x="6599" fg:w="19"/><text x="14.0708%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,058 samples, 2.22%)</title><rect x="16.9079%" y="165" width="2.2158%" height="15" fill="rgb(210,31,41)" fg:x="8073" fg:w="1058"/><text x="17.1579%" y="175.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (392 samples, 0.82%)</title><rect x="18.3027%" y="149" width="0.8210%" height="15" fill="rgb(221,200,47)" fg:x="8739" fg:w="392"/><text x="18.5527%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (3,163 samples, 6.62%)</title><rect x="15.5277%" y="181" width="6.6245%" height="15" fill="rgb(226,26,5)" fg:x="7414" fg:w="3163"/><text x="15.7777%" y="191.50">&lt;core::sl..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::_{{closure}} (1,446 samples, 3.03%)</title><rect x="19.1237%" y="165" width="3.0285%" height="15" fill="rgb(249,33,26)" fg:x="9131" fg:w="1446"/><text x="19.3737%" y="175.50">&lt;co..</text></g><g><title>rs_1brc::read_line::_{{closure}} (1,446 samples, 3.03%)</title><rect x="19.1237%" y="149" width="3.0285%" height="15" fill="rgb(235,183,28)" fg:x="9131" fg:w="1446"/><text x="19.3737%" y="159.50">rs_..</text></g><g><title>&lt;core::slice::iter::RSplit&lt;T,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,072 samples, 8.53%)</title><rect x="13.8752%" y="213" width="8.5283%" height="15" fill="rgb(221,5,38)" fg:x="6625" fg:w="4072"/><text x="14.1252%" y="223.50">&lt;core::slice..</text></g><g><title>&lt;core::slice::iter::Split&lt;T,P&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,072 samples, 8.53%)</title><rect x="13.8752%" y="197" width="8.5283%" height="15" fill="rgb(247,18,42)" fg:x="6625" fg:w="4072"/><text x="14.1252%" y="207.50">&lt;core::slice..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (120 samples, 0.25%)</title><rect x="22.1522%" y="181" width="0.2513%" height="15" fill="rgb(241,131,45)" fg:x="10577" fg:w="120"/><text x="22.4022%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (120 samples, 0.25%)</title><rect x="22.1522%" y="165" width="0.2513%" height="15" fill="rgb(249,31,29)" fg:x="10577" fg:w="120"/><text x="22.4022%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (120 samples, 0.25%)</title><rect x="22.1522%" y="149" width="0.2513%" height="15" fill="rgb(225,111,53)" fg:x="10577" fg:w="120"/><text x="22.4022%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (120 samples, 0.25%)</title><rect x="22.1522%" y="133" width="0.2513%" height="15" fill="rgb(238,160,17)" fg:x="10577" fg:w="120"/><text x="22.4022%" y="143.50"></text></g><g><title>__rdl_alloc (257 samples, 0.54%)</title><rect x="23.6769%" y="53" width="0.5383%" height="15" fill="rgb(214,148,48)" fg:x="11305" fg:w="257"/><text x="23.9269%" y="63.50"></text></g><g><title>__rust_alloc (404 samples, 0.85%)</title><rect x="24.2151%" y="53" width="0.8461%" height="15" fill="rgb(232,36,49)" fg:x="11562" fg:w="404"/><text x="24.4651%" y="63.50"></text></g><g><title>core::ptr::read_volatile (37 samples, 0.08%)</title><rect x="25.0613%" y="53" width="0.0775%" height="15" fill="rgb(209,103,24)" fg:x="11966" fg:w="37"/><text x="25.3113%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,603 samples, 7.55%)</title><rect x="22.4035%" y="149" width="7.5460%" height="15" fill="rgb(229,88,8)" fg:x="10697" fg:w="3603"/><text x="22.6535%" y="159.50">alloc::vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,603 samples, 7.55%)</title><rect x="22.4035%" y="133" width="7.5460%" height="15" fill="rgb(213,181,19)" fg:x="10697" fg:w="3603"/><text x="22.6535%" y="143.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,603 samples, 7.55%)</title><rect x="22.4035%" y="117" width="7.5460%" height="15" fill="rgb(254,191,54)" fg:x="10697" fg:w="3603"/><text x="22.6535%" y="127.50">alloc::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,381 samples, 7.08%)</title><rect x="22.8685%" y="101" width="7.0811%" height="15" fill="rgb(241,83,37)" fg:x="10919" fg:w="3381"/><text x="23.1185%" y="111.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,381 samples, 7.08%)</title><rect x="22.8685%" y="85" width="7.0811%" height="15" fill="rgb(233,36,39)" fg:x="10919" fg:w="3381"/><text x="23.1185%" y="95.50">alloc::all..</text></g><g><title>alloc::alloc::alloc (3,381 samples, 7.08%)</title><rect x="22.8685%" y="69" width="7.0811%" height="15" fill="rgb(226,3,54)" fg:x="10919" fg:w="3381"/><text x="23.1185%" y="79.50">alloc::all..</text></g><g><title>malloc (2,297 samples, 4.81%)</title><rect x="25.1388%" y="53" width="4.8108%" height="15" fill="rgb(245,192,40)" fg:x="12003" fg:w="2297"/><text x="25.3888%" y="63.50">malloc</text></g><g><title>[libc.so.6] (1,811 samples, 3.79%)</title><rect x="29.9495%" y="117" width="3.7929%" height="15" fill="rgb(238,167,29)" fg:x="14300" fg:w="1811"/><text x="30.1995%" y="127.50">[lib..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5,416 samples, 11.34%)</title><rect x="22.4035%" y="213" width="11.3431%" height="15" fill="rgb(232,182,51)" fg:x="10697" fg:w="5416"/><text x="22.6535%" y="223.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,416 samples, 11.34%)</title><rect x="22.4035%" y="197" width="11.3431%" height="15" fill="rgb(231,60,39)" fg:x="10697" fg:w="5416"/><text x="22.6535%" y="207.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (5,416 samples, 11.34%)</title><rect x="22.4035%" y="181" width="11.3431%" height="15" fill="rgb(208,69,12)" fg:x="10697" fg:w="5416"/><text x="22.6535%" y="191.50">alloc::slice::hac..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,416 samples, 11.34%)</title><rect x="22.4035%" y="165" width="11.3431%" height="15" fill="rgb(235,93,37)" fg:x="10697" fg:w="5416"/><text x="22.6535%" y="175.50">&lt;T as alloc::slic..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,813 samples, 3.80%)</title><rect x="29.9495%" y="149" width="3.7971%" height="15" fill="rgb(213,116,39)" fg:x="14300" fg:w="1813"/><text x="30.1995%" y="159.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,813 samples, 3.80%)</title><rect x="29.9495%" y="133" width="3.7971%" height="15" fill="rgb(222,207,29)" fg:x="14300" fg:w="1813"/><text x="30.1995%" y="143.50">core..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (5 samples, 0.01%)</title><rect x="35.9897%" y="133" width="0.0105%" height="15" fill="rgb(206,96,30)" fg:x="17184" fg:w="5"/><text x="36.2397%" y="143.50"></text></g><g><title>fast_float::number::Number::try_fast_path (1,144 samples, 2.40%)</title><rect x="34.1487%" y="149" width="2.3960%" height="15" fill="rgb(218,138,4)" fg:x="16305" fg:w="1144"/><text x="34.3987%" y="159.50">fa..</text></g><g><title>fast_float::number::Number::is_fast_path (260 samples, 0.54%)</title><rect x="36.0002%" y="133" width="0.5445%" height="15" fill="rgb(250,191,14)" fg:x="17189" fg:w="260"/><text x="36.2502%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (13 samples, 0.03%)</title><rect x="45.7809%" y="133" width="0.0272%" height="15" fill="rgb(239,60,40)" fg:x="21859" fg:w="13"/><text x="46.0309%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (12 samples, 0.03%)</title><rect x="45.7830%" y="117" width="0.0251%" height="15" fill="rgb(206,27,48)" fg:x="21860" fg:w="12"/><text x="46.0330%" y="127.50"></text></g><g><title>fast_float::common::AsciiStr::first (162 samples, 0.34%)</title><rect x="45.8102%" y="133" width="0.3393%" height="15" fill="rgb(225,35,8)" fg:x="21873" fg:w="162"/><text x="46.0602%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (6 samples, 0.01%)</title><rect x="46.1495%" y="133" width="0.0126%" height="15" fill="rgb(250,213,24)" fg:x="22035" fg:w="6"/><text x="46.3995%" y="143.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (233 samples, 0.49%)</title><rect x="46.1663%" y="133" width="0.4880%" height="15" fill="rgb(247,123,22)" fg:x="22043" fg:w="233"/><text x="46.4163%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (233 samples, 0.49%)</title><rect x="46.1663%" y="117" width="0.4880%" height="15" fill="rgb(231,138,38)" fg:x="22043" fg:w="233"/><text x="46.4163%" y="127.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (226 samples, 0.47%)</title><rect x="46.1809%" y="101" width="0.4733%" height="15" fill="rgb(231,145,46)" fg:x="22050" fg:w="226"/><text x="46.4309%" y="111.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (966 samples, 2.02%)</title><rect x="48.9643%" y="101" width="2.0232%" height="15" fill="rgb(251,118,11)" fg:x="23379" fg:w="966"/><text x="49.2143%" y="111.50">c..</text></g><g><title>fast_float::common::AsciiStr::is_empty (367 samples, 0.77%)</title><rect x="50.9959%" y="101" width="0.7686%" height="15" fill="rgb(217,147,25)" fg:x="24349" fg:w="367"/><text x="51.2459%" y="111.50"></text></g><g><title>fast_float::common::AsciiStr::step (253 samples, 0.53%)</title><rect x="51.7645%" y="101" width="0.5299%" height="15" fill="rgb(247,81,37)" fg:x="24716" fg:w="253"/><text x="52.0145%" y="111.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (253 samples, 0.53%)</title><rect x="51.7645%" y="85" width="0.5299%" height="15" fill="rgb(209,12,38)" fg:x="24716" fg:w="253"/><text x="52.0145%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (253 samples, 0.53%)</title><rect x="51.7645%" y="69" width="0.5299%" height="15" fill="rgb(227,1,9)" fg:x="24716" fg:w="253"/><text x="52.0145%" y="79.50"></text></g><g><title>rs_1brc::read_line (18,388 samples, 38.51%)</title><rect x="13.8752%" y="229" width="38.5113%" height="15" fill="rgb(248,47,43)" fg:x="6625" fg:w="18388"/><text x="14.1252%" y="239.50">rs_1brc::read_line</text></g><g><title>fast_float::parse (8,900 samples, 18.64%)</title><rect x="33.7466%" y="213" width="18.6399%" height="15" fill="rgb(221,10,30)" fg:x="16113" fg:w="8900"/><text x="33.9966%" y="223.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (8,900 samples, 18.64%)</title><rect x="33.7466%" y="197" width="18.6399%" height="15" fill="rgb(210,229,1)" fg:x="16113" fg:w="8900"/><text x="33.9966%" y="207.50">fast_float::FastFloat::parse_..</text></g><g><title>fast_float::FastFloat::parse_float_partial (8,900 samples, 18.64%)</title><rect x="33.7466%" y="181" width="18.6399%" height="15" fill="rgb(222,148,37)" fg:x="16113" fg:w="8900"/><text x="33.9966%" y="191.50">fast_float::FastFloat::parse_..</text></g><g><title>fast_float::parse::parse_float (8,900 samples, 18.64%)</title><rect x="33.7466%" y="165" width="18.6399%" height="15" fill="rgb(234,67,33)" fg:x="16113" fg:w="8900"/><text x="33.9966%" y="175.50">fast_float::parse::parse_float</text></g><g><title>fast_float::number::parse_number (7,564 samples, 15.84%)</title><rect x="36.5447%" y="149" width="15.8418%" height="15" fill="rgb(247,98,35)" fg:x="17449" fg:w="7564"/><text x="36.7947%" y="159.50">fast_float::number::pars..</text></g><g><title>fast_float::number::try_parse_digits (2,737 samples, 5.73%)</title><rect x="46.6542%" y="133" width="5.7323%" height="15" fill="rgb(247,138,52)" fg:x="22276" fg:w="2737"/><text x="46.9042%" y="143.50">fast_fl..</text></g><g><title>fast_float::common::AsciiStr::parse_digits (2,737 samples, 5.73%)</title><rect x="46.6542%" y="117" width="5.7323%" height="15" fill="rgb(213,79,30)" fg:x="22276" fg:w="2737"/><text x="46.9042%" y="127.50">fast_fl..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (44 samples, 0.09%)</title><rect x="52.2944%" y="101" width="0.0922%" height="15" fill="rgb(246,177,23)" fg:x="24969" fg:w="44"/><text x="52.5444%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.06%)</title><rect x="52.3237%" y="85" width="0.0628%" height="15" fill="rgb(230,62,27)" fg:x="24983" fg:w="30"/><text x="52.5737%" y="95.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (271 samples, 0.57%)</title><rect x="52.3865%" y="229" width="0.5676%" height="15" fill="rgb(216,154,8)" fg:x="25013" fg:w="271"/><text x="52.6365%" y="239.50"></text></g><g><title>rs_1brc::main::_{{closure}} (271 samples, 0.57%)</title><rect x="52.3865%" y="213" width="0.5676%" height="15" fill="rgb(244,35,45)" fg:x="25013" fg:w="271"/><text x="52.6365%" y="223.50"></text></g><g><title>__rdl_dealloc (291 samples, 0.61%)</title><rect x="53.4924%" y="69" width="0.6095%" height="15" fill="rgb(251,115,12)" fg:x="25541" fg:w="291"/><text x="53.7424%" y="79.50"></text></g><g><title>__rust_dealloc (272 samples, 0.57%)</title><rect x="54.1018%" y="69" width="0.5697%" height="15" fill="rgb(240,54,50)" fg:x="25832" fg:w="272"/><text x="54.3518%" y="79.50"></text></g><g><title>cfree (2,694 samples, 5.64%)</title><rect x="54.6715%" y="69" width="5.6422%" height="15" fill="rgb(233,84,52)" fg:x="26104" fg:w="2694"/><text x="54.9215%" y="79.50">cfree</text></g><g><title>[libc.so.6] (1,903 samples, 3.99%)</title><rect x="56.3281%" y="53" width="3.9856%" height="15" fill="rgb(207,117,47)" fg:x="26895" fg:w="1903"/><text x="56.5781%" y="63.50">[lib..</text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (3,515 samples, 7.36%)</title><rect x="52.9541%" y="229" width="7.3617%" height="15" fill="rgb(249,43,39)" fg:x="25284" fg:w="3515"/><text x="53.2041%" y="239.50">std::colle..</text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (3,515 samples, 7.36%)</title><rect x="52.9541%" y="213" width="7.3617%" height="15" fill="rgb(209,38,44)" fg:x="25284" fg:w="3515"/><text x="53.2041%" y="223.50">std::colle..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (3,515 samples, 7.36%)</title><rect x="52.9541%" y="197" width="7.3617%" height="15" fill="rgb(236,212,23)" fg:x="25284" fg:w="3515"/><text x="53.2041%" y="207.50">hashbrown:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::vec::Vec&lt;u8&gt;,rs_1brc::StationValues&gt;&gt; (3,515 samples, 7.36%)</title><rect x="52.9541%" y="181" width="7.3617%" height="15" fill="rgb(242,79,21)" fg:x="25284" fg:w="3515"/><text x="53.2041%" y="191.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (3,515 samples, 7.36%)</title><rect x="52.9541%" y="165" width="7.3617%" height="15" fill="rgb(211,96,35)" fg:x="25284" fg:w="3515"/><text x="53.2041%" y="175.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,502 samples, 7.33%)</title><rect x="52.9813%" y="149" width="7.3345%" height="15" fill="rgb(253,215,40)" fg:x="25297" fg:w="3502"/><text x="53.2313%" y="159.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,502 samples, 7.33%)</title><rect x="52.9813%" y="133" width="7.3345%" height="15" fill="rgb(211,81,21)" fg:x="25297" fg:w="3502"/><text x="53.2313%" y="143.50">core::ptr:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,502 samples, 7.33%)</title><rect x="52.9813%" y="117" width="7.3345%" height="15" fill="rgb(208,190,38)" fg:x="25297" fg:w="3502"/><text x="53.2313%" y="127.50">&lt;alloc::ra..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,502 samples, 7.33%)</title><rect x="52.9813%" y="101" width="7.3345%" height="15" fill="rgb(235,213,38)" fg:x="25297" fg:w="3502"/><text x="53.2313%" y="111.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::dealloc (3,502 samples, 7.33%)</title><rect x="52.9813%" y="85" width="7.3345%" height="15" fill="rgb(237,122,38)" fg:x="25297" fg:w="3502"/><text x="53.2313%" y="95.50">alloc::all..</text></g><g><title>core::hash::Hasher::write_length_prefix (59 samples, 0.12%)</title><rect x="63.7506%" y="117" width="0.1236%" height="15" fill="rgb(244,218,35)" fg:x="30439" fg:w="59"/><text x="64.0006%" y="127.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (59 samples, 0.12%)</title><rect x="63.7506%" y="101" width="0.1236%" height="15" fill="rgb(240,68,47)" fg:x="30439" fg:w="59"/><text x="64.0006%" y="111.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (59 samples, 0.12%)</title><rect x="63.7506%" y="85" width="0.1236%" height="15" fill="rgb(210,16,53)" fg:x="30439" fg:w="59"/><text x="64.0006%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (59 samples, 0.12%)</title><rect x="63.7506%" y="69" width="0.1236%" height="15" fill="rgb(235,124,12)" fg:x="30439" fg:w="59"/><text x="64.0006%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (166 samples, 0.35%)</title><rect x="64.9276%" y="85" width="0.3477%" height="15" fill="rgb(224,169,11)" fg:x="31001" fg:w="166"/><text x="65.1776%" y="95.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (166 samples, 0.35%)</title><rect x="64.9276%" y="69" width="0.3477%" height="15" fill="rgb(250,166,2)" fg:x="31001" fg:w="166"/><text x="65.1776%" y="79.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (166 samples, 0.35%)</title><rect x="64.9276%" y="53" width="0.3477%" height="15" fill="rgb(242,216,29)" fg:x="31001" fg:w="166"/><text x="65.1776%" y="63.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (166 samples, 0.35%)</title><rect x="64.9276%" y="37" width="0.3477%" height="15" fill="rgb(230,116,27)" fg:x="31001" fg:w="166"/><text x="65.1776%" y="47.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (317 samples, 0.66%)</title><rect x="65.2753%" y="69" width="0.6639%" height="15" fill="rgb(228,99,48)" fg:x="31167" fg:w="317"/><text x="65.5253%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (564 samples, 1.18%)</title><rect x="65.9392%" y="69" width="1.1812%" height="15" fill="rgb(253,11,6)" fg:x="31484" fg:w="564"/><text x="66.1892%" y="79.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (3,024 samples, 6.33%)</title><rect x="63.8742%" y="101" width="6.3334%" height="15" fill="rgb(247,143,39)" fg:x="30498" fg:w="3024"/><text x="64.1242%" y="111.50">&lt;rustc_h..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (2,355 samples, 4.93%)</title><rect x="65.2753%" y="85" width="4.9322%" height="15" fill="rgb(236,97,10)" fg:x="31167" fg:w="2355"/><text x="65.5253%" y="95.50">rustc_..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1,474 samples, 3.09%)</title><rect x="67.1204%" y="69" width="3.0871%" height="15" fill="rgb(233,208,19)" fg:x="32048" fg:w="1474"/><text x="67.3704%" y="79.50">cor..</text></g><g><title>hashbrown::map::make_hash (3,142 samples, 6.58%)</title><rect x="63.6459%" y="197" width="6.5805%" height="15" fill="rgb(216,164,2)" fg:x="30389" fg:w="3142"/><text x="63.8959%" y="207.50">hashbrown..</text></g><g><title>core::hash::BuildHasher::hash_one (3,142 samples, 6.58%)</title><rect x="63.6459%" y="181" width="6.5805%" height="15" fill="rgb(220,129,5)" fg:x="30389" fg:w="3142"/><text x="63.8959%" y="191.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,142 samples, 6.58%)</title><rect x="63.6459%" y="165" width="6.5805%" height="15" fill="rgb(242,17,10)" fg:x="30389" fg:w="3142"/><text x="63.8959%" y="175.50">core::has..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (3,092 samples, 6.48%)</title><rect x="63.7506%" y="149" width="6.4758%" height="15" fill="rgb(242,107,0)" fg:x="30439" fg:w="3092"/><text x="64.0006%" y="159.50">&lt;alloc::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3,092 samples, 6.48%)</title><rect x="63.7506%" y="133" width="6.4758%" height="15" fill="rgb(251,28,31)" fg:x="30439" fg:w="3092"/><text x="64.0006%" y="143.50">core::ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (3,033 samples, 6.35%)</title><rect x="63.8742%" y="117" width="6.3522%" height="15" fill="rgb(233,223,10)" fg:x="30498" fg:w="3033"/><text x="64.1242%" y="127.50">core::ha..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.02%)</title><rect x="70.2076%" y="101" width="0.0188%" height="15" fill="rgb(215,21,27)" fg:x="33522" fg:w="9"/><text x="70.4576%" y="111.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (32 samples, 0.07%)</title><rect x="73.7785%" y="133" width="0.0670%" height="15" fill="rgb(232,23,21)" fg:x="35227" fg:w="32"/><text x="74.0285%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.08%)</title><rect x="73.7743%" y="165" width="0.0796%" height="15" fill="rgb(244,5,23)" fg:x="35225" fg:w="38"/><text x="74.0243%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (38 samples, 0.08%)</title><rect x="73.7743%" y="149" width="0.0796%" height="15" fill="rgb(226,81,46)" fg:x="35225" fg:w="38"/><text x="74.0243%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (516 samples, 1.08%)</title><rect x="73.8539%" y="149" width="1.0807%" height="15" fill="rgb(247,70,30)" fg:x="35263" fg:w="516"/><text x="74.1039%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (516 samples, 1.08%)</title><rect x="73.8539%" y="133" width="1.0807%" height="15" fill="rgb(212,68,19)" fg:x="35263" fg:w="516"/><text x="74.1039%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (516 samples, 1.08%)</title><rect x="73.8539%" y="117" width="1.0807%" height="15" fill="rgb(240,187,13)" fg:x="35263" fg:w="516"/><text x="74.1039%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (265 samples, 0.56%)</title><rect x="74.3795%" y="101" width="0.5550%" height="15" fill="rgb(223,113,26)" fg:x="35514" fg:w="265"/><text x="74.6295%" y="111.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,843 samples, 14.33%)</title><rect x="74.9346%" y="101" width="14.3318%" height="15" fill="rgb(206,192,2)" fg:x="35779" fg:w="6843"/><text x="75.1846%" y="111.50">&lt;[A] as core::slice::c..</text></g><g><title>[libc.so.6] (4,386 samples, 9.19%)</title><rect x="80.0804%" y="85" width="9.1859%" height="15" fill="rgb(241,108,4)" fg:x="38236" fg:w="4386"/><text x="80.3304%" y="95.50">[libc.so.6]</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (7,360 samples, 15.41%)</title><rect x="73.8539%" y="165" width="15.4146%" height="15" fill="rgb(247,173,49)" fg:x="35263" fg:w="7360"/><text x="74.1039%" y="175.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (6,844 samples, 14.33%)</title><rect x="74.9346%" y="149" width="14.3339%" height="15" fill="rgb(224,114,35)" fg:x="35779" fg:w="6844"/><text x="75.1846%" y="159.50">hashbrown::rustc_entry..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (6,844 samples, 14.33%)</title><rect x="74.9346%" y="133" width="14.3339%" height="15" fill="rgb(245,159,27)" fg:x="35779" fg:w="6844"/><text x="75.1846%" y="143.50">alloc::vec::partial_eq..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6,844 samples, 14.33%)</title><rect x="74.9346%" y="117" width="14.3339%" height="15" fill="rgb(245,172,44)" fg:x="35779" fg:w="6844"/><text x="75.1846%" y="127.50">core::slice::cmp::&lt;imp..</text></g><g><title>hashbrown::raw::h2 (1,835 samples, 3.84%)</title><rect x="89.2684%" y="165" width="3.8432%" height="15" fill="rgb(236,23,11)" fg:x="42623" fg:w="1835"/><text x="89.5184%" y="175.50">hash..</text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.03%)</title><rect x="93.1116%" y="133" width="0.0251%" height="15" fill="rgb(205,117,38)" fg:x="44458" fg:w="12"/><text x="93.3616%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (197 samples, 0.41%)</title><rect x="93.1116%" y="165" width="0.4126%" height="15" fill="rgb(237,72,25)" fg:x="44458" fg:w="197"/><text x="93.3616%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (197 samples, 0.41%)</title><rect x="93.1116%" y="149" width="0.4126%" height="15" fill="rgb(244,70,9)" fg:x="44458" fg:w="197"/><text x="93.3616%" y="159.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (185 samples, 0.39%)</title><rect x="93.1367%" y="133" width="0.3875%" height="15" fill="rgb(217,125,39)" fg:x="44470" fg:w="185"/><text x="93.3867%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,382 samples, 4.99%)</title><rect x="93.5242%" y="165" width="4.9888%" height="15" fill="rgb(235,36,10)" fg:x="44655" fg:w="2382"/><text x="93.7742%" y="175.50">hashbr..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,382 samples, 4.99%)</title><rect x="93.5242%" y="149" width="4.9888%" height="15" fill="rgb(251,123,47)" fg:x="44655" fg:w="2382"/><text x="93.7742%" y="159.50">core::..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (336 samples, 0.70%)</title><rect x="98.5130%" y="165" width="0.7037%" height="15" fill="rgb(221,13,13)" fg:x="47037" fg:w="336"/><text x="98.7630%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (336 samples, 0.70%)</title><rect x="98.5130%" y="149" width="0.7037%" height="15" fill="rgb(238,131,9)" fg:x="47037" fg:w="336"/><text x="98.7630%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (336 samples, 0.70%)</title><rect x="98.5130%" y="133" width="0.7037%" height="15" fill="rgb(211,50,8)" fg:x="47037" fg:w="336"/><text x="98.7630%" y="143.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (18,440 samples, 38.62%)</title><rect x="60.7892%" y="213" width="38.6202%" height="15" fill="rgb(245,182,24)" fg:x="29025" fg:w="18440"/><text x="61.0392%" y="223.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13,934 samples, 29.18%)</title><rect x="70.2264%" y="197" width="29.1830%" height="15" fill="rgb(242,14,37)" fg:x="33531" fg:w="13934"/><text x="70.4764%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (13,913 samples, 29.14%)</title><rect x="70.2704%" y="181" width="29.1390%" height="15" fill="rgb(246,228,12)" fg:x="33552" fg:w="13913"/><text x="70.5204%" y="191.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (92 samples, 0.19%)</title><rect x="99.2167%" y="165" width="0.1927%" height="15" fill="rgb(213,55,15)" fg:x="47373" fg:w="92"/><text x="99.4667%" y="175.50"></text></g><g><title>rs_1brc::main (6 samples, 0.01%)</title><rect x="99.4115%" y="213" width="0.0126%" height="15" fill="rgb(209,9,3)" fg:x="47466" fg:w="6"/><text x="99.6615%" y="223.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (47,738 samples, 99.98%)</title><rect x="0.0168%" y="293" width="99.9812%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="47738"/><text x="0.2668%" y="303.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (47,738 samples, 99.98%)</title><rect x="0.0168%" y="277" width="99.9812%" height="15" fill="rgb(209,121,21)" fg:x="8" fg:w="47738"/><text x="0.2668%" y="287.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (47,738 samples, 99.98%)</title><rect x="0.0168%" y="261" width="99.9812%" height="15" fill="rgb(220,109,13)" fg:x="8" fg:w="47738"/><text x="0.2668%" y="271.50">core::ops::function::FnOnce::call_once</text></g><g><title>rs_1brc::main (47,738 samples, 99.98%)</title><rect x="0.0168%" y="245" width="99.9812%" height="15" fill="rgb(232,18,1)" fg:x="8" fg:w="47738"/><text x="0.2668%" y="255.50">rs_1brc::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (18,947 samples, 39.68%)</title><rect x="60.3158%" y="229" width="39.6821%" height="15" fill="rgb(215,41,42)" fg:x="28799" fg:w="18947"/><text x="60.5658%" y="239.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (274 samples, 0.57%)</title><rect x="99.4240%" y="213" width="0.5739%" height="15" fill="rgb(224,123,36)" fg:x="47472" fg:w="274"/><text x="99.6740%" y="223.50"></text></g><g><title>all (47,747 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="47747"/><text x="0.2500%" y="415.50"></text></g><g><title>rs-1brc (47,747 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="47747"/><text x="0.2500%" y="399.50">rs-1brc</text></g><g><title>_start (47,739 samples, 99.98%)</title><rect x="0.0168%" y="373" width="99.9832%" height="15" fill="rgb(205,185,37)" fg:x="8" fg:w="47739"/><text x="0.2668%" y="383.50">_start</text></g><g><title>__libc_start_main (47,739 samples, 99.98%)</title><rect x="0.0168%" y="357" width="99.9832%" height="15" fill="rgb(238,207,15)" fg:x="8" fg:w="47739"/><text x="0.2668%" y="367.50">__libc_start_main</text></g><g><title>[libc.so.6] (47,739 samples, 99.98%)</title><rect x="0.0168%" y="341" width="99.9832%" height="15" fill="rgb(213,199,42)" fg:x="8" fg:w="47739"/><text x="0.2668%" y="351.50">[libc.so.6]</text></g><g><title>main (47,739 samples, 99.98%)</title><rect x="0.0168%" y="325" width="99.9832%" height="15" fill="rgb(235,201,11)" fg:x="8" fg:w="47739"/><text x="0.2668%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (47,739 samples, 99.98%)</title><rect x="0.0168%" y="309" width="99.9832%" height="15" fill="rgb(207,46,11)" fg:x="8" fg:w="47739"/><text x="0.2668%" y="319.50">std::rt::lang_start_internal</text></g></svg></svg>