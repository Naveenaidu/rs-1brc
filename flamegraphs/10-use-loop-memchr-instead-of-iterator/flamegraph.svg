<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="29096"><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0206%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="0.0103%" y="357" width="0.0103%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="3"/><text x="0.2603%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0241%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="399.50"></text></g><g><title>read (10 samples, 0.03%)</title><rect x="0.7389%" y="213" width="0.0344%" height="15" fill="rgb(248,212,6)" fg:x="215" fg:w="10"/><text x="0.9889%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="0.7561%" y="197" width="0.0172%" height="15" fill="rgb(208,68,35)" fg:x="220" fg:w="5"/><text x="1.0061%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7596%" y="181" width="0.0137%" height="15" fill="rgb(232,128,0)" fg:x="221" fg:w="4"/><text x="1.0096%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7596%" y="165" width="0.0137%" height="15" fill="rgb(207,160,47)" fg:x="221" fg:w="4"/><text x="1.0096%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7596%" y="149" width="0.0137%" height="15" fill="rgb(228,23,34)" fg:x="221" fg:w="4"/><text x="1.0096%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7596%" y="133" width="0.0137%" height="15" fill="rgb(218,30,26)" fg:x="221" fg:w="4"/><text x="1.0096%" y="143.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (20 samples, 0.07%)</title><rect x="0.7080%" y="245" width="0.0687%" height="15" fill="rgb(220,122,19)" fg:x="206" fg:w="20"/><text x="0.9580%" y="255.50"></text></g><g><title>std::io::default_read_to_end (19 samples, 0.07%)</title><rect x="0.7114%" y="229" width="0.0653%" height="15" fill="rgb(250,228,42)" fg:x="207" fg:w="19"/><text x="0.9614%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (178 samples, 0.61%)</title><rect x="0.7767%" y="229" width="0.6118%" height="15" fill="rgb(240,193,28)" fg:x="226" fg:w="178"/><text x="1.0267%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (711 samples, 2.44%)</title><rect x="0.7767%" y="245" width="2.4436%" height="15" fill="rgb(216,20,37)" fg:x="226" fg:w="711"/><text x="1.0267%" y="255.50">co..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (533 samples, 1.83%)</title><rect x="1.3885%" y="229" width="1.8319%" height="15" fill="rgb(206,188,39)" fg:x="404" fg:w="533"/><text x="1.6385%" y="239.50">&lt;..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (432 samples, 1.48%)</title><rect x="1.7356%" y="213" width="1.4847%" height="15" fill="rgb(217,207,13)" fg:x="505" fg:w="432"/><text x="1.9856%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (432 samples, 1.48%)</title><rect x="1.7356%" y="197" width="1.4847%" height="15" fill="rgb(231,73,38)" fg:x="505" fg:w="432"/><text x="1.9856%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (432 samples, 1.48%)</title><rect x="1.7356%" y="181" width="1.4847%" height="15" fill="rgb(225,20,46)" fg:x="505" fg:w="432"/><text x="1.9856%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,702 samples, 12.72%)</title><rect x="5.3719%" y="165" width="12.7234%" height="15" fill="rgb(210,31,41)" fg:x="1563" fg:w="3702"/><text x="5.6219%" y="175.50">&lt;f32 as core::ops::..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (131 samples, 0.45%)</title><rect x="18.0953%" y="165" width="0.4502%" height="15" fill="rgb(221,200,47)" fg:x="5265" fg:w="131"/><text x="18.3453%" y="175.50"></text></g><g><title>fast_float::number::Number::try_fast_path (4,444 samples, 15.27%)</title><rect x="3.9181%" y="181" width="15.2736%" height="15" fill="rgb(226,26,5)" fg:x="1140" fg:w="4444"/><text x="4.1681%" y="191.50">fast_float::number::Num..</text></g><g><title>fast_float::number::Number::is_fast_path (188 samples, 0.65%)</title><rect x="18.5455%" y="165" width="0.6461%" height="15" fill="rgb(249,33,26)" fg:x="5396" fg:w="188"/><text x="18.7955%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (131 samples, 0.45%)</title><rect x="21.1266%" y="165" width="0.4502%" height="15" fill="rgb(235,183,28)" fg:x="6147" fg:w="131"/><text x="21.3766%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (122 samples, 0.42%)</title><rect x="21.1575%" y="149" width="0.4193%" height="15" fill="rgb(221,5,38)" fg:x="6156" fg:w="122"/><text x="21.4075%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (135 samples, 0.46%)</title><rect x="21.5768%" y="165" width="0.4640%" height="15" fill="rgb(247,18,42)" fg:x="6278" fg:w="135"/><text x="21.8268%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::first (197 samples, 0.68%)</title><rect x="22.0408%" y="165" width="0.6771%" height="15" fill="rgb(241,131,45)" fg:x="6413" fg:w="197"/><text x="22.2908%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::offset_from (70 samples, 0.24%)</title><rect x="22.7179%" y="165" width="0.2406%" height="15" fill="rgb(249,31,29)" fg:x="6610" fg:w="70"/><text x="22.9679%" y="175.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (70 samples, 0.24%)</title><rect x="22.7179%" y="149" width="0.2406%" height="15" fill="rgb(225,111,53)" fg:x="6610" fg:w="70"/><text x="22.9679%" y="159.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (287 samples, 0.99%)</title><rect x="22.9585%" y="165" width="0.9864%" height="15" fill="rgb(238,160,17)" fg:x="6680" fg:w="287"/><text x="23.2085%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (287 samples, 0.99%)</title><rect x="22.9585%" y="149" width="0.9864%" height="15" fill="rgb(214,148,48)" fg:x="6680" fg:w="287"/><text x="23.2085%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (225 samples, 0.77%)</title><rect x="23.1716%" y="133" width="0.7733%" height="15" fill="rgb(232,36,49)" fg:x="6742" fg:w="225"/><text x="23.4216%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (158 samples, 0.54%)</title><rect x="23.4018%" y="117" width="0.5430%" height="15" fill="rgb(209,103,24)" fg:x="6809" fg:w="158"/><text x="23.6518%" y="127.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (424 samples, 1.46%)</title><rect x="25.9658%" y="133" width="1.4572%" height="15" fill="rgb(229,88,8)" fg:x="7555" fg:w="424"/><text x="26.2158%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (417 samples, 1.43%)</title><rect x="27.4299%" y="133" width="1.4332%" height="15" fill="rgb(213,181,19)" fg:x="7981" fg:w="417"/><text x="27.6799%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::step (65 samples, 0.22%)</title><rect x="28.8631%" y="133" width="0.2234%" height="15" fill="rgb(254,191,54)" fg:x="8398" fg:w="65"/><text x="29.1131%" y="143.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (65 samples, 0.22%)</title><rect x="28.8631%" y="117" width="0.2234%" height="15" fill="rgb(241,83,37)" fg:x="8398" fg:w="65"/><text x="29.1131%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (65 samples, 0.22%)</title><rect x="28.8631%" y="101" width="0.2234%" height="15" fill="rgb(233,36,39)" fg:x="8398" fg:w="65"/><text x="29.1131%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (130 samples, 0.45%)</title><rect x="29.3717%" y="117" width="0.4468%" height="15" fill="rgb(226,3,54)" fg:x="8546" fg:w="130"/><text x="29.6217%" y="127.50"></text></g><g><title>fast_float::parse (7,740 samples, 26.60%)</title><rect x="3.2204%" y="245" width="26.6016%" height="15" fill="rgb(245,192,40)" fg:x="937" fg:w="7740"/><text x="3.4704%" y="255.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (7,740 samples, 26.60%)</title><rect x="3.2204%" y="229" width="26.6016%" height="15" fill="rgb(238,167,29)" fg:x="937" fg:w="7740"/><text x="3.4704%" y="239.50">fast_float::FastFloat::parse_float</text></g><g><title>fast_float::FastFloat::parse_float_partial (7,740 samples, 26.60%)</title><rect x="3.2204%" y="213" width="26.6016%" height="15" fill="rgb(232,182,51)" fg:x="937" fg:w="7740"/><text x="3.4704%" y="223.50">fast_float::FastFloat::parse_float_partial</text></g><g><title>fast_float::parse::parse_float (7,740 samples, 26.60%)</title><rect x="3.2204%" y="197" width="26.6016%" height="15" fill="rgb(231,60,39)" fg:x="937" fg:w="7740"/><text x="3.4704%" y="207.50">fast_float::parse::parse_float</text></g><g><title>fast_float::number::parse_number (3,093 samples, 10.63%)</title><rect x="19.1916%" y="181" width="10.6303%" height="15" fill="rgb(208,69,12)" fg:x="5584" fg:w="3093"/><text x="19.4416%" y="191.50">fast_float::numb..</text></g><g><title>fast_float::number::try_parse_digits (1,710 samples, 5.88%)</title><rect x="23.9449%" y="165" width="5.8771%" height="15" fill="rgb(235,93,37)" fg:x="6967" fg:w="1710"/><text x="24.1949%" y="175.50">fast_fl..</text></g><g><title>fast_float::common::AsciiStr::parse_digits (1,710 samples, 5.88%)</title><rect x="23.9449%" y="149" width="5.8771%" height="15" fill="rgb(213,116,39)" fg:x="6967" fg:w="1710"/><text x="24.1949%" y="159.50">fast_fl..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (214 samples, 0.74%)</title><rect x="29.0865%" y="133" width="0.7355%" height="15" fill="rgb(222,207,29)" fg:x="8463" fg:w="214"/><text x="29.3365%" y="143.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (8 samples, 0.03%)</title><rect x="30.4303%" y="213" width="0.0275%" height="15" fill="rgb(206,96,30)" fg:x="8854" fg:w="8"/><text x="30.6803%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (8 samples, 0.03%)</title><rect x="30.4303%" y="197" width="0.0275%" height="15" fill="rgb(218,138,4)" fg:x="8854" fg:w="8"/><text x="30.6803%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (220 samples, 0.76%)</title><rect x="30.4578%" y="213" width="0.7561%" height="15" fill="rgb(250,191,14)" fg:x="8862" fg:w="220"/><text x="30.7078%" y="223.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (4 samples, 0.01%)</title><rect x="35.1079%" y="133" width="0.0137%" height="15" fill="rgb(239,60,40)" fg:x="10215" fg:w="4"/><text x="35.3579%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (4 samples, 0.01%)</title><rect x="35.1079%" y="117" width="0.0137%" height="15" fill="rgb(206,27,48)" fg:x="10215" fg:w="4"/><text x="35.3579%" y="127.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (14 samples, 0.05%)</title><rect x="35.2729%" y="101" width="0.0481%" height="15" fill="rgb(225,35,8)" fg:x="10263" fg:w="14"/><text x="35.5229%" y="111.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (100 samples, 0.34%)</title><rect x="38.0946%" y="85" width="0.3437%" height="15" fill="rgb(250,213,24)" fg:x="11084" fg:w="100"/><text x="38.3446%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (100 samples, 0.34%)</title><rect x="38.0946%" y="69" width="0.3437%" height="15" fill="rgb(247,123,22)" fg:x="11084" fg:w="100"/><text x="38.3446%" y="79.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1,130 samples, 3.88%)</title><rect x="35.3210%" y="101" width="3.8837%" height="15" fill="rgb(231,138,38)" fg:x="10277" fg:w="1130"/><text x="35.5710%" y="111.50">memc..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (223 samples, 0.77%)</title><rect x="38.4383%" y="85" width="0.7664%" height="15" fill="rgb(231,145,46)" fg:x="11184" fg:w="223"/><text x="38.6883%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (223 samples, 0.77%)</title><rect x="38.4383%" y="69" width="0.7664%" height="15" fill="rgb(251,118,11)" fg:x="11184" fg:w="223"/><text x="38.6883%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (9 samples, 0.03%)</title><rect x="39.2116%" y="85" width="0.0309%" height="15" fill="rgb(217,147,25)" fg:x="11409" fg:w="9"/><text x="39.4616%" y="95.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (24 samples, 0.08%)</title><rect x="39.2116%" y="101" width="0.0825%" height="15" fill="rgb(247,81,37)" fg:x="11409" fg:w="24"/><text x="39.4616%" y="111.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (15 samples, 0.05%)</title><rect x="39.2425%" y="85" width="0.0516%" height="15" fill="rgb(209,12,38)" fg:x="11418" fg:w="15"/><text x="39.4925%" y="95.50"></text></g><g><title>memchr::memchr::memchr (2,780 samples, 9.55%)</title><rect x="29.8220%" y="245" width="9.5546%" height="15" fill="rgb(227,1,9)" fg:x="8677" fg:w="2780"/><text x="30.0720%" y="255.50">memchr::memchr..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (2,780 samples, 9.55%)</title><rect x="29.8220%" y="229" width="9.5546%" height="15" fill="rgb(248,47,43)" fg:x="8677" fg:w="2780"/><text x="30.0720%" y="239.50">memchr::arch::..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (2,375 samples, 8.16%)</title><rect x="31.2139%" y="213" width="8.1626%" height="15" fill="rgb(221,10,30)" fg:x="9082" fg:w="2375"/><text x="31.4639%" y="223.50">memchr::mem..</text></g><g><title>memchr::memchr::memchr_raw (2,375 samples, 8.16%)</title><rect x="31.2139%" y="197" width="8.1626%" height="15" fill="rgb(210,229,1)" fg:x="9082" fg:w="2375"/><text x="31.4639%" y="207.50">memchr::mem..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (2,375 samples, 8.16%)</title><rect x="31.2139%" y="181" width="8.1626%" height="15" fill="rgb(222,148,37)" fg:x="9082" fg:w="2375"/><text x="31.4639%" y="191.50">memchr::arc..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2,139 samples, 7.35%)</title><rect x="32.0250%" y="165" width="7.3515%" height="15" fill="rgb(234,67,33)" fg:x="9318" fg:w="2139"/><text x="32.2750%" y="175.50">memchr::ar..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (1,524 samples, 5.24%)</title><rect x="34.1387%" y="149" width="5.2378%" height="15" fill="rgb(247,98,35)" fg:x="9933" fg:w="1524"/><text x="34.3887%" y="159.50">memchr..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (1,238 samples, 4.25%)</title><rect x="35.1217%" y="133" width="4.2549%" height="15" fill="rgb(247,138,52)" fg:x="10219" fg:w="1238"/><text x="35.3717%" y="143.50">memch..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1,238 samples, 4.25%)</title><rect x="35.1217%" y="117" width="4.2549%" height="15" fill="rgb(213,79,30)" fg:x="10219" fg:w="1238"/><text x="35.3717%" y="127.50">memch..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (24 samples, 0.08%)</title><rect x="39.2941%" y="101" width="0.0825%" height="15" fill="rgb(246,177,23)" fg:x="11433" fg:w="24"/><text x="39.5441%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (24 samples, 0.08%)</title><rect x="39.2941%" y="85" width="0.0825%" height="15" fill="rgb(230,62,27)" fg:x="11433" fg:w="24"/><text x="39.5441%" y="95.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (536 samples, 1.84%)</title><rect x="39.3765%" y="245" width="1.8422%" height="15" fill="rgb(216,154,8)" fg:x="11457" fg:w="536"/><text x="39.6265%" y="255.50">s..</text></g><g><title>rs_1brc::main::_{{closure}} (536 samples, 1.84%)</title><rect x="39.3765%" y="229" width="1.8422%" height="15" fill="rgb(244,35,45)" fg:x="11457" fg:w="536"/><text x="39.6265%" y="239.50">r..</text></g><g><title>core::hash::Hasher::write_length_prefix (16 samples, 0.05%)</title><rect x="44.9203%" y="133" width="0.0550%" height="15" fill="rgb(251,115,12)" fg:x="13070" fg:w="16"/><text x="45.1703%" y="143.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (16 samples, 0.05%)</title><rect x="44.9203%" y="117" width="0.0550%" height="15" fill="rgb(240,54,50)" fg:x="13070" fg:w="16"/><text x="45.1703%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (16 samples, 0.05%)</title><rect x="44.9203%" y="101" width="0.0550%" height="15" fill="rgb(233,84,52)" fg:x="13070" fg:w="16"/><text x="45.1703%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (16 samples, 0.05%)</title><rect x="44.9203%" y="85" width="0.0550%" height="15" fill="rgb(207,117,47)" fg:x="13070" fg:w="16"/><text x="45.1703%" y="95.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (227 samples, 0.78%)</title><rect x="47.3398%" y="101" width="0.7802%" height="15" fill="rgb(249,43,39)" fg:x="13774" fg:w="227"/><text x="47.5898%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (227 samples, 0.78%)</title><rect x="47.3398%" y="85" width="0.7802%" height="15" fill="rgb(209,38,44)" fg:x="13774" fg:w="227"/><text x="47.5898%" y="95.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (227 samples, 0.78%)</title><rect x="47.3398%" y="69" width="0.7802%" height="15" fill="rgb(236,212,23)" fg:x="13774" fg:w="227"/><text x="47.5898%" y="79.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (227 samples, 0.78%)</title><rect x="47.3398%" y="53" width="0.7802%" height="15" fill="rgb(242,79,21)" fg:x="13774" fg:w="227"/><text x="47.5898%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (60 samples, 0.21%)</title><rect x="47.9138%" y="37" width="0.2062%" height="15" fill="rgb(211,96,35)" fg:x="13941" fg:w="60"/><text x="48.1638%" y="47.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (49 samples, 0.17%)</title><rect x="48.1200%" y="85" width="0.1684%" height="15" fill="rgb(253,215,40)" fg:x="14001" fg:w="49"/><text x="48.3700%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1,139 samples, 3.91%)</title><rect x="48.2884%" y="85" width="3.9146%" height="15" fill="rgb(211,81,21)" fg:x="14050" fg:w="1139"/><text x="48.5384%" y="95.50">core..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (2,240 samples, 7.70%)</title><rect x="44.9753%" y="117" width="7.6987%" height="15" fill="rgb(208,190,38)" fg:x="13086" fg:w="2240"/><text x="45.2253%" y="127.50">&lt;rustc_hash..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (1,325 samples, 4.55%)</title><rect x="48.1200%" y="101" width="4.5539%" height="15" fill="rgb(235,213,38)" fg:x="14001" fg:w="1325"/><text x="48.3700%" y="111.50">rustc..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (137 samples, 0.47%)</title><rect x="52.2031%" y="85" width="0.4709%" height="15" fill="rgb(237,122,38)" fg:x="15189" fg:w="137"/><text x="52.4531%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (2,316 samples, 7.96%)</title><rect x="44.9203%" y="213" width="7.9599%" height="15" fill="rgb(244,218,35)" fg:x="13070" fg:w="2316"/><text x="45.1703%" y="223.50">hashbrown::..</text></g><g><title>core::hash::BuildHasher::hash_one (2,316 samples, 7.96%)</title><rect x="44.9203%" y="197" width="7.9599%" height="15" fill="rgb(240,68,47)" fg:x="13070" fg:w="2316"/><text x="45.1703%" y="207.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,316 samples, 7.96%)</title><rect x="44.9203%" y="181" width="7.9599%" height="15" fill="rgb(210,16,53)" fg:x="13070" fg:w="2316"/><text x="45.1703%" y="191.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,316 samples, 7.96%)</title><rect x="44.9203%" y="165" width="7.9599%" height="15" fill="rgb(235,124,12)" fg:x="13070" fg:w="2316"/><text x="45.1703%" y="175.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2,316 samples, 7.96%)</title><rect x="44.9203%" y="149" width="7.9599%" height="15" fill="rgb(224,169,11)" fg:x="13070" fg:w="2316"/><text x="45.1703%" y="159.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2,300 samples, 7.90%)</title><rect x="44.9753%" y="133" width="7.9049%" height="15" fill="rgb(250,166,2)" fg:x="13086" fg:w="2300"/><text x="45.2253%" y="143.50">core::hash:..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (60 samples, 0.21%)</title><rect x="52.6739%" y="117" width="0.2062%" height="15" fill="rgb(242,216,29)" fg:x="15326" fg:w="60"/><text x="52.9239%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,135 samples, 3.90%)</title><rect x="56.6710%" y="181" width="3.9009%" height="15" fill="rgb(230,116,27)" fg:x="16489" fg:w="1135"/><text x="56.9210%" y="191.50">&lt;has..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,135 samples, 3.90%)</title><rect x="56.6710%" y="165" width="3.9009%" height="15" fill="rgb(228,99,48)" fg:x="16489" fg:w="1135"/><text x="56.9210%" y="175.50">hash..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (917 samples, 3.15%)</title><rect x="57.4203%" y="149" width="3.1516%" height="15" fill="rgb(253,11,6)" fg:x="16707" fg:w="917"/><text x="57.6703%" y="159.50">cor..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (493 samples, 1.69%)</title><rect x="60.5753%" y="165" width="1.6944%" height="15" fill="rgb(247,143,39)" fg:x="17625" fg:w="493"/><text x="60.8253%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (493 samples, 1.69%)</title><rect x="60.5753%" y="149" width="1.6944%" height="15" fill="rgb(236,97,10)" fg:x="17625" fg:w="493"/><text x="60.8253%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (493 samples, 1.69%)</title><rect x="60.5753%" y="133" width="1.6944%" height="15" fill="rgb(233,208,19)" fg:x="17625" fg:w="493"/><text x="60.8253%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (493 samples, 1.69%)</title><rect x="60.5753%" y="117" width="1.6944%" height="15" fill="rgb(216,164,2)" fg:x="17625" fg:w="493"/><text x="60.8253%" y="127.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,971 samples, 23.96%)</title><rect x="62.2697%" y="117" width="23.9586%" height="15" fill="rgb(220,129,5)" fg:x="18118" fg:w="6971"/><text x="62.5197%" y="127.50">&lt;[A] as core::slice::cmp::SlicePartial..</text></g><g><title>[libc.so.6] (4,701 samples, 16.16%)</title><rect x="70.0715%" y="101" width="16.1569%" height="15" fill="rgb(242,17,10)" fg:x="20388" fg:w="4701"/><text x="70.3215%" y="111.50">[libc.so.6]</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (7,482 samples, 25.71%)</title><rect x="60.5719%" y="181" width="25.7149%" height="15" fill="rgb(242,107,0)" fg:x="17624" fg:w="7482"/><text x="60.8219%" y="191.50">hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{c..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (6,988 samples, 24.02%)</title><rect x="62.2697%" y="165" width="24.0170%" height="15" fill="rgb(251,28,31)" fg:x="18118" fg:w="6988"/><text x="62.5197%" y="175.50">hashbrown::rustc_entry::_&lt;impl hashbro..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,988 samples, 24.02%)</title><rect x="62.2697%" y="149" width="24.0170%" height="15" fill="rgb(233,223,10)" fg:x="18118" fg:w="6988"/><text x="62.5197%" y="159.50">core::cmp::impls::&lt;impl core::cmp::Par..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6,988 samples, 24.02%)</title><rect x="62.2697%" y="133" width="24.0170%" height="15" fill="rgb(215,21,27)" fg:x="18118" fg:w="6988"/><text x="62.5197%" y="143.50">core::slice::cmp::&lt;impl core::cmp::Par..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (17 samples, 0.06%)</title><rect x="86.2283%" y="117" width="0.0584%" height="15" fill="rgb(232,23,21)" fg:x="25089" fg:w="17"/><text x="86.4783%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (1,332 samples, 4.58%)</title><rect x="86.2902%" y="181" width="4.5779%" height="15" fill="rgb(244,5,23)" fg:x="25107" fg:w="1332"/><text x="86.5402%" y="191.50">hashb..</text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.03%)</title><rect x="90.8682%" y="149" width="0.0309%" height="15" fill="rgb(226,81,46)" fg:x="26439" fg:w="9"/><text x="91.1182%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (163 samples, 0.56%)</title><rect x="90.8682%" y="181" width="0.5602%" height="15" fill="rgb(247,70,30)" fg:x="26439" fg:w="163"/><text x="91.1182%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (163 samples, 0.56%)</title><rect x="90.8682%" y="165" width="0.5602%" height="15" fill="rgb(212,68,19)" fg:x="26439" fg:w="163"/><text x="91.1182%" y="175.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (154 samples, 0.53%)</title><rect x="90.8991%" y="149" width="0.5293%" height="15" fill="rgb(240,187,13)" fg:x="26448" fg:w="154"/><text x="91.1491%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,979 samples, 6.80%)</title><rect x="91.4284%" y="181" width="6.8016%" height="15" fill="rgb(223,113,26)" fg:x="26602" fg:w="1979"/><text x="91.6784%" y="191.50">hashbrown..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,979 samples, 6.80%)</title><rect x="91.4284%" y="165" width="6.8016%" height="15" fill="rgb(206,192,2)" fg:x="26602" fg:w="1979"/><text x="91.6784%" y="175.50">core::cor..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (328 samples, 1.13%)</title><rect x="98.2300%" y="181" width="1.1273%" height="15" fill="rgb(241,108,4)" fg:x="28581" fg:w="328"/><text x="98.4800%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (328 samples, 1.13%)</title><rect x="98.2300%" y="165" width="1.1273%" height="15" fill="rgb(247,173,49)" fg:x="28581" fg:w="328"/><text x="98.4800%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (328 samples, 1.13%)</title><rect x="98.2300%" y="149" width="1.1273%" height="15" fill="rgb(224,114,35)" fg:x="28581" fg:w="328"/><text x="98.4800%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12,903 samples, 44.35%)</title><rect x="55.1004%" y="197" width="44.3463%" height="15" fill="rgb(245,159,27)" fg:x="16032" fg:w="12903"/><text x="55.3504%" y="207.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (26 samples, 0.09%)</title><rect x="99.3573%" y="181" width="0.0894%" height="15" fill="rgb(245,172,44)" fg:x="28909" fg:w="26"/><text x="99.6073%" y="191.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (16,718 samples, 57.46%)</title><rect x="41.9920%" y="229" width="57.4581%" height="15" fill="rgb(236,23,11)" fg:x="12218" fg:w="16718"/><text x="42.2420%" y="239.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (13,550 samples, 46.57%)</title><rect x="52.8801%" y="213" width="46.5700%" height="15" fill="rgb(205,117,38)" fg:x="15386" fg:w="13550"/><text x="53.1301%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>rs_1brc::main (157 samples, 0.54%)</title><rect x="99.4501%" y="229" width="0.5396%" height="15" fill="rgb(237,72,25)" fg:x="28936" fg:w="157"/><text x="99.7001%" y="239.50"></text></g><g><title>all (29,096 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="29096"/><text x="0.2500%" y="431.50"></text></g><g><title>rs-1brc (29,096 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="29096"/><text x="0.2500%" y="415.50">rs-1brc</text></g><g><title>_start (29,089 samples, 99.98%)</title><rect x="0.0241%" y="389" width="99.9759%" height="15" fill="rgb(235,36,10)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="399.50">_start</text></g><g><title>__libc_start_main (29,089 samples, 99.98%)</title><rect x="0.0241%" y="373" width="99.9759%" height="15" fill="rgb(251,123,47)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="383.50">__libc_start_main</text></g><g><title>[libc.so.6] (29,089 samples, 99.98%)</title><rect x="0.0241%" y="357" width="99.9759%" height="15" fill="rgb(221,13,13)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="367.50">[libc.so.6]</text></g><g><title>main (29,089 samples, 99.98%)</title><rect x="0.0241%" y="341" width="99.9759%" height="15" fill="rgb(238,131,9)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="351.50">main</text></g><g><title>std::rt::lang_start_internal (29,089 samples, 99.98%)</title><rect x="0.0241%" y="325" width="99.9759%" height="15" fill="rgb(211,50,8)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="335.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (29,089 samples, 99.98%)</title><rect x="0.0241%" y="309" width="99.9759%" height="15" fill="rgb(245,182,24)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="319.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (29,089 samples, 99.98%)</title><rect x="0.0241%" y="293" width="99.9759%" height="15" fill="rgb(242,14,37)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (29,089 samples, 99.98%)</title><rect x="0.0241%" y="277" width="99.9759%" height="15" fill="rgb(246,228,12)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="287.50">core::ops::function::FnOnce::call_once</text></g><g><title>rs_1brc::main (29,089 samples, 99.98%)</title><rect x="0.0241%" y="261" width="99.9759%" height="15" fill="rgb(213,55,15)" fg:x="7" fg:w="29089"/><text x="0.2741%" y="271.50">rs_1brc::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (17,103 samples, 58.78%)</title><rect x="41.2187%" y="245" width="58.7813%" height="15" fill="rgb(209,9,3)" fg:x="11993" fg:w="17103"/><text x="41.4687%" y="255.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (3 samples, 0.01%)</title><rect x="99.9897%" y="229" width="0.0103%" height="15" fill="rgb(230,59,30)" fg:x="29093" fg:w="3"/><text x="100.2397%" y="239.50"></text></g></svg></svg>