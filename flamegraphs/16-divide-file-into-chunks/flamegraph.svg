<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="153745"><g><title>[unknown] (31 samples, 0.02%)</title><rect x="0.0195%" y="501" width="0.0202%" height="15" fill="rgb(227,0,7)" fg:x="30" fg:w="31"/><text x="0.2695%" y="511.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="0.0267%" y="485" width="0.0130%" height="15" fill="rgb(217,0,24)" fg:x="41" fg:w="20"/><text x="0.2767%" y="495.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="0.0293%" y="469" width="0.0104%" height="15" fill="rgb(221,193,54)" fg:x="45" fg:w="16"/><text x="0.2793%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (34 samples, 0.02%)</title><rect x="0.0748%" y="309" width="0.0221%" height="15" fill="rgb(248,212,6)" fg:x="115" fg:w="34"/><text x="0.3248%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (24 samples, 0.02%)</title><rect x="0.1041%" y="245" width="0.0156%" height="15" fill="rgb(208,68,35)" fg:x="160" fg:w="24"/><text x="0.3541%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.02%)</title><rect x="0.1041%" y="229" width="0.0156%" height="15" fill="rgb(232,128,0)" fg:x="160" fg:w="24"/><text x="0.3541%" y="239.50"></text></g><g><title>core::mem::replace (24 samples, 0.02%)</title><rect x="0.1041%" y="213" width="0.0156%" height="15" fill="rgb(207,160,47)" fg:x="160" fg:w="24"/><text x="0.3541%" y="223.50"></text></g><g><title>core::ptr::read (24 samples, 0.02%)</title><rect x="0.1041%" y="197" width="0.0156%" height="15" fill="rgb(228,23,34)" fg:x="160" fg:w="24"/><text x="0.3541%" y="207.50"></text></g><g><title>&lt;crossbeam_channel::select::Selected as core::convert::From&lt;usize&gt;&gt;::from (111 samples, 0.07%)</title><rect x="0.1307%" y="197" width="0.0722%" height="15" fill="rgb(218,30,26)" fg:x="201" fg:w="111"/><text x="0.3807%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.01%)</title><rect x="0.2029%" y="197" width="0.0111%" height="15" fill="rgb(220,122,19)" fg:x="312" fg:w="17"/><text x="0.4529%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="0.2029%" y="181" width="0.0111%" height="15" fill="rgb(250,228,42)" fg:x="312" fg:w="17"/><text x="0.4529%" y="191.50"></text></g><g><title>__sched_yield (79 samples, 0.05%)</title><rect x="0.2140%" y="181" width="0.0514%" height="15" fill="rgb(240,193,28)" fg:x="329" fg:w="79"/><text x="0.4640%" y="191.50"></text></g><g><title>[unknown] (79 samples, 0.05%)</title><rect x="0.2140%" y="165" width="0.0514%" height="15" fill="rgb(216,20,37)" fg:x="329" fg:w="79"/><text x="0.4640%" y="175.50"></text></g><g><title>[unknown] (74 samples, 0.05%)</title><rect x="0.2172%" y="149" width="0.0481%" height="15" fill="rgb(206,188,39)" fg:x="334" fg:w="74"/><text x="0.4672%" y="159.50"></text></g><g><title>[unknown] (71 samples, 0.05%)</title><rect x="0.2192%" y="133" width="0.0462%" height="15" fill="rgb(217,207,13)" fg:x="337" fg:w="71"/><text x="0.4692%" y="143.50"></text></g><g><title>[unknown] (71 samples, 0.05%)</title><rect x="0.2192%" y="117" width="0.0462%" height="15" fill="rgb(231,73,38)" fg:x="337" fg:w="71"/><text x="0.4692%" y="127.50"></text></g><g><title>[unknown] (62 samples, 0.04%)</title><rect x="0.2250%" y="101" width="0.0403%" height="15" fill="rgb(225,20,46)" fg:x="346" fg:w="62"/><text x="0.4750%" y="111.50"></text></g><g><title>[unknown] (56 samples, 0.04%)</title><rect x="0.2290%" y="85" width="0.0364%" height="15" fill="rgb(210,31,41)" fg:x="352" fg:w="56"/><text x="0.4790%" y="95.50"></text></g><g><title>[unknown] (45 samples, 0.03%)</title><rect x="0.2361%" y="69" width="0.0293%" height="15" fill="rgb(221,200,47)" fg:x="363" fg:w="45"/><text x="0.4861%" y="79.50"></text></g><g><title>[unknown] (36 samples, 0.02%)</title><rect x="0.2420%" y="53" width="0.0234%" height="15" fill="rgb(226,26,5)" fg:x="372" fg:w="36"/><text x="0.4920%" y="63.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="0.2511%" y="37" width="0.0143%" height="15" fill="rgb(249,33,26)" fg:x="386" fg:w="22"/><text x="0.5011%" y="47.50"></text></g><g><title>core::hint::spin_loop (483 samples, 0.31%)</title><rect x="0.2654%" y="181" width="0.3142%" height="15" fill="rgb(235,183,28)" fg:x="408" fg:w="483"/><text x="0.5154%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (483 samples, 0.31%)</title><rect x="0.2654%" y="165" width="0.3142%" height="15" fill="rgb(221,5,38)" fg:x="408" fg:w="483"/><text x="0.5154%" y="175.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (565 samples, 0.37%)</title><rect x="0.2140%" y="197" width="0.3675%" height="15" fill="rgb(247,18,42)" fg:x="329" fg:w="565"/><text x="0.4640%" y="207.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (932 samples, 0.61%)</title><rect x="0.1294%" y="213" width="0.6062%" height="15" fill="rgb(241,131,45)" fg:x="199" fg:w="932"/><text x="0.3794%" y="223.50"></text></g><g><title>std::thread::park (237 samples, 0.15%)</title><rect x="0.5815%" y="197" width="0.1542%" height="15" fill="rgb(249,31,29)" fg:x="894" fg:w="237"/><text x="0.8315%" y="207.50"></text></g><g><title>syscall (33 samples, 0.02%)</title><rect x="0.7142%" y="181" width="0.0215%" height="15" fill="rgb(225,111,53)" fg:x="1098" fg:w="33"/><text x="0.9642%" y="191.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="0.7142%" y="165" width="0.0215%" height="15" fill="rgb(238,160,17)" fg:x="1098" fg:w="33"/><text x="0.9642%" y="175.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="0.7155%" y="149" width="0.0202%" height="15" fill="rgb(214,148,48)" fg:x="1100" fg:w="31"/><text x="0.9655%" y="159.50"></text></g><g><title>[unknown] (30 samples, 0.02%)</title><rect x="0.7161%" y="133" width="0.0195%" height="15" fill="rgb(232,36,49)" fg:x="1101" fg:w="30"/><text x="0.9661%" y="143.50"></text></g><g><title>[unknown] (29 samples, 0.02%)</title><rect x="0.7168%" y="117" width="0.0189%" height="15" fill="rgb(209,103,24)" fg:x="1102" fg:w="29"/><text x="0.9668%" y="127.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="0.7213%" y="101" width="0.0143%" height="15" fill="rgb(229,88,8)" fg:x="1109" fg:w="22"/><text x="0.9713%" y="111.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="0.7252%" y="85" width="0.0104%" height="15" fill="rgb(213,181,19)" fg:x="1115" fg:w="16"/><text x="0.9752%" y="95.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (979 samples, 0.64%)</title><rect x="0.1041%" y="261" width="0.6368%" height="15" fill="rgb(254,191,54)" fg:x="160" fg:w="979"/><text x="0.3541%" y="271.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (955 samples, 0.62%)</title><rect x="0.1197%" y="245" width="0.6212%" height="15" fill="rgb(241,83,37)" fg:x="184" fg:w="955"/><text x="0.3697%" y="255.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::_{{closure}} (945 samples, 0.61%)</title><rect x="0.1262%" y="229" width="0.6147%" height="15" fill="rgb(233,36,39)" fg:x="194" fg:w="945"/><text x="0.3762%" y="239.50"></text></g><g><title>crossbeam_channel::context::Context::with (989 samples, 0.64%)</title><rect x="0.1034%" y="293" width="0.6433%" height="15" fill="rgb(226,3,54)" fg:x="159" fg:w="989"/><text x="0.3534%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (989 samples, 0.64%)</title><rect x="0.1034%" y="277" width="0.6433%" height="15" fill="rgb(245,192,40)" fg:x="159" fg:w="989"/><text x="0.3534%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::_{{closure}} (20 samples, 0.01%)</title><rect x="0.7506%" y="277" width="0.0130%" height="15" fill="rgb(238,167,29)" fg:x="1154" fg:w="20"/><text x="1.0006%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (20 samples, 0.01%)</title><rect x="0.7506%" y="261" width="0.0130%" height="15" fill="rgb(232,182,51)" fg:x="1154" fg:w="20"/><text x="1.0006%" y="271.50"></text></g><g><title>std::thread::park (20 samples, 0.01%)</title><rect x="0.7506%" y="245" width="0.0130%" height="15" fill="rgb(231,60,39)" fg:x="1154" fg:w="20"/><text x="1.0006%" y="255.50"></text></g><g><title>syscall (20 samples, 0.01%)</title><rect x="0.7506%" y="229" width="0.0130%" height="15" fill="rgb(208,69,12)" fg:x="1154" fg:w="20"/><text x="1.0006%" y="239.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="0.7506%" y="213" width="0.0130%" height="15" fill="rgb(235,93,37)" fg:x="1154" fg:w="20"/><text x="1.0006%" y="223.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::read (42 samples, 0.03%)</title><rect x="0.7467%" y="293" width="0.0273%" height="15" fill="rgb(213,116,39)" fg:x="1148" fg:w="42"/><text x="0.9967%" y="303.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (16 samples, 0.01%)</title><rect x="0.7636%" y="277" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="1174" fg:w="16"/><text x="1.0136%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_recv (207 samples, 0.13%)</title><rect x="0.7747%" y="293" width="0.1346%" height="15" fill="rgb(206,96,30)" fg:x="1191" fg:w="207"/><text x="1.0247%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (77 samples, 0.05%)</title><rect x="0.8592%" y="277" width="0.0501%" height="15" fill="rgb(218,138,4)" fg:x="1321" fg:w="77"/><text x="1.1092%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (76 samples, 0.05%)</title><rect x="0.8599%" y="261" width="0.0494%" height="15" fill="rgb(250,191,14)" fg:x="1322" fg:w="76"/><text x="1.1099%" y="271.50"></text></g><g><title>__sched_yield (129 samples, 0.08%)</title><rect x="0.9178%" y="277" width="0.0839%" height="15" fill="rgb(239,60,40)" fg:x="1411" fg:w="129"/><text x="1.1678%" y="287.50"></text></g><g><title>[unknown] (103 samples, 0.07%)</title><rect x="0.9347%" y="261" width="0.0670%" height="15" fill="rgb(206,27,48)" fg:x="1437" fg:w="103"/><text x="1.1847%" y="271.50"></text></g><g><title>[unknown] (93 samples, 0.06%)</title><rect x="0.9412%" y="245" width="0.0605%" height="15" fill="rgb(225,35,8)" fg:x="1447" fg:w="93"/><text x="1.1912%" y="255.50"></text></g><g><title>[unknown] (87 samples, 0.06%)</title><rect x="0.9451%" y="229" width="0.0566%" height="15" fill="rgb(250,213,24)" fg:x="1453" fg:w="87"/><text x="1.1951%" y="239.50"></text></g><g><title>[unknown] (81 samples, 0.05%)</title><rect x="0.9490%" y="213" width="0.0527%" height="15" fill="rgb(247,123,22)" fg:x="1459" fg:w="81"/><text x="1.1990%" y="223.50"></text></g><g><title>[unknown] (60 samples, 0.04%)</title><rect x="0.9626%" y="197" width="0.0390%" height="15" fill="rgb(231,138,38)" fg:x="1480" fg:w="60"/><text x="1.2126%" y="207.50"></text></g><g><title>[unknown] (49 samples, 0.03%)</title><rect x="0.9698%" y="181" width="0.0319%" height="15" fill="rgb(231,145,46)" fg:x="1491" fg:w="49"/><text x="1.2198%" y="191.50"></text></g><g><title>[unknown] (41 samples, 0.03%)</title><rect x="0.9750%" y="165" width="0.0267%" height="15" fill="rgb(251,118,11)" fg:x="1499" fg:w="41"/><text x="1.2250%" y="175.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="0.9802%" y="149" width="0.0215%" height="15" fill="rgb(217,147,25)" fg:x="1507" fg:w="33"/><text x="1.2302%" y="159.50"></text></g><g><title>[unknown] (22 samples, 0.01%)</title><rect x="0.9873%" y="133" width="0.0143%" height="15" fill="rgb(247,81,37)" fg:x="1518" fg:w="22"/><text x="1.2373%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (664 samples, 0.43%)</title><rect x="1.0017%" y="277" width="0.4319%" height="15" fill="rgb(209,12,38)" fg:x="1540" fg:w="664"/><text x="1.2517%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (664 samples, 0.43%)</title><rect x="1.0017%" y="261" width="0.4319%" height="15" fill="rgb(227,1,9)" fg:x="1540" fg:w="664"/><text x="1.2517%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (629 samples, 0.41%)</title><rect x="1.0244%" y="245" width="0.4091%" height="15" fill="rgb(248,47,43)" fg:x="1575" fg:w="629"/><text x="1.2744%" y="255.50"></text></g><g><title>&lt;crossbeam_channel::channel::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,111 samples, 1.37%)</title><rect x="0.0624%" y="341" width="1.3731%" height="15" fill="rgb(221,10,30)" fg:x="96" fg:w="2111"/><text x="0.3124%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (2,096 samples, 1.36%)</title><rect x="0.0722%" y="325" width="1.3633%" height="15" fill="rgb(210,229,1)" fg:x="111" fg:w="2096"/><text x="0.3222%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (2,058 samples, 1.34%)</title><rect x="0.0969%" y="309" width="1.3386%" height="15" fill="rgb(222,148,37)" fg:x="149" fg:w="2058"/><text x="0.3469%" y="319.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (809 samples, 0.53%)</title><rect x="0.9093%" y="293" width="0.5262%" height="15" fill="rgb(234,67,33)" fg:x="1398" fg:w="809"/><text x="1.1593%" y="303.50"></text></g><g><title>[libc.so.6] (52 samples, 0.03%)</title><rect x="1.4433%" y="261" width="0.0338%" height="15" fill="rgb(247,98,35)" fg:x="2219" fg:w="52"/><text x="1.6933%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (65 samples, 0.04%)</title><rect x="1.4355%" y="341" width="0.0423%" height="15" fill="rgb(247,138,52)" fg:x="2207" fg:w="65"/><text x="1.6855%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.04%)</title><rect x="1.4355%" y="325" width="0.0423%" height="15" fill="rgb(213,79,30)" fg:x="2207" fg:w="65"/><text x="1.6855%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (63 samples, 0.04%)</title><rect x="1.4368%" y="309" width="0.0410%" height="15" fill="rgb(246,177,23)" fg:x="2209" fg:w="63"/><text x="1.6868%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (63 samples, 0.04%)</title><rect x="1.4368%" y="293" width="0.0410%" height="15" fill="rgb(230,62,27)" fg:x="2209" fg:w="63"/><text x="1.6868%" y="303.50"></text></g><g><title>cfree (63 samples, 0.04%)</title><rect x="1.4368%" y="277" width="0.0410%" height="15" fill="rgb(216,154,8)" fg:x="2209" fg:w="63"/><text x="1.6868%" y="287.50"></text></g><g><title>__rdl_alloc (724 samples, 0.47%)</title><rect x="2.4248%" y="181" width="0.4709%" height="15" fill="rgb(244,35,45)" fg:x="3728" fg:w="724"/><text x="2.6748%" y="191.50"></text></g><g><title>__rust_alloc (663 samples, 0.43%)</title><rect x="2.8957%" y="181" width="0.4312%" height="15" fill="rgb(251,115,12)" fg:x="4452" fg:w="663"/><text x="3.1457%" y="191.50"></text></g><g><title>core::ptr::read_volatile (39 samples, 0.03%)</title><rect x="3.3269%" y="181" width="0.0254%" height="15" fill="rgb(240,54,50)" fg:x="5115" fg:w="39"/><text x="3.5769%" y="191.50"></text></g><g><title>[libc.so.6] (20 samples, 0.01%)</title><rect x="9.2393%" y="165" width="0.0130%" height="15" fill="rgb(233,84,52)" fg:x="14205" fg:w="20"/><text x="9.4893%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (11,837 samples, 7.70%)</title><rect x="1.5578%" y="277" width="7.6991%" height="15" fill="rgb(207,117,47)" fg:x="2395" fg:w="11837"/><text x="1.8078%" y="287.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11,837 samples, 7.70%)</title><rect x="1.5578%" y="261" width="7.6991%" height="15" fill="rgb(249,43,39)" fg:x="2395" fg:w="11837"/><text x="1.8078%" y="271.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11,837 samples, 7.70%)</title><rect x="1.5578%" y="245" width="7.6991%" height="15" fill="rgb(209,38,44)" fg:x="2395" fg:w="11837"/><text x="1.8078%" y="255.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,805 samples, 7.68%)</title><rect x="1.5786%" y="229" width="7.6783%" height="15" fill="rgb(236,212,23)" fg:x="2427" fg:w="11805"/><text x="1.8286%" y="239.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (11,805 samples, 7.68%)</title><rect x="1.5786%" y="213" width="7.6783%" height="15" fill="rgb(242,79,21)" fg:x="2427" fg:w="11805"/><text x="1.8286%" y="223.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (11,805 samples, 7.68%)</title><rect x="1.5786%" y="197" width="7.6783%" height="15" fill="rgb(211,96,35)" fg:x="2427" fg:w="11805"/><text x="1.8286%" y="207.50">alloc::allo..</text></g><g><title>malloc (9,078 samples, 5.90%)</title><rect x="3.3523%" y="181" width="5.9046%" height="15" fill="rgb(253,215,40)" fg:x="5154" fg:w="9078"/><text x="3.6023%" y="191.50">malloc</text></g><g><title>[libc.so.6] (4,758 samples, 3.09%)</title><rect x="9.2901%" y="261" width="3.0947%" height="15" fill="rgb(211,81,21)" fg:x="14283" fg:w="4758"/><text x="9.5401%" y="271.50">[li..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16,647 samples, 10.83%)</title><rect x="1.5578%" y="325" width="10.8277%" height="15" fill="rgb(208,190,38)" fg:x="2395" fg:w="16647"/><text x="1.8078%" y="335.50">&lt;T as core::conv..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (16,647 samples, 10.83%)</title><rect x="1.5578%" y="309" width="10.8277%" height="15" fill="rgb(235,213,38)" fg:x="2395" fg:w="16647"/><text x="1.8078%" y="319.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (16,647 samples, 10.83%)</title><rect x="1.5578%" y="293" width="10.8277%" height="15" fill="rgb(237,122,38)" fg:x="2395" fg:w="16647"/><text x="1.8078%" y="303.50">&lt;alloc::boxed::B..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4,810 samples, 3.13%)</title><rect x="9.2569%" y="277" width="3.1286%" height="15" fill="rgb(244,218,35)" fg:x="14232" fg:w="4810"/><text x="9.5069%" y="287.50">cor..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,249 samples, 0.81%)</title><rect x="12.3880%" y="309" width="0.8124%" height="15" fill="rgb(240,68,47)" fg:x="19046" fg:w="1249"/><text x="12.6380%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,452 samples, 1.59%)</title><rect x="12.3880%" y="325" width="1.5948%" height="15" fill="rgb(210,16,53)" fg:x="19046" fg:w="2452"/><text x="12.6380%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,203 samples, 0.78%)</title><rect x="13.2004%" y="309" width="0.7825%" height="15" fill="rgb(235,124,12)" fg:x="20295" fg:w="1203"/><text x="13.4504%" y="319.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (150 samples, 0.10%)</title><rect x="14.7270%" y="245" width="0.0976%" height="15" fill="rgb(224,169,11)" fg:x="22642" fg:w="150"/><text x="14.9770%" y="255.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (1,323 samples, 0.86%)</title><rect x="14.8245%" y="245" width="0.8605%" height="15" fill="rgb(250,166,2)" fg:x="22792" fg:w="1323"/><text x="15.0745%" y="255.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (129 samples, 0.08%)</title><rect x="15.6851%" y="245" width="0.0839%" height="15" fill="rgb(242,216,29)" fg:x="24115" fg:w="129"/><text x="15.9351%" y="255.50"></text></g><g><title>fast_float::number::Number::try_fast_path (2,525 samples, 1.64%)</title><rect x="14.4616%" y="261" width="1.6423%" height="15" fill="rgb(230,116,27)" fg:x="22234" fg:w="2525"/><text x="14.7116%" y="271.50"></text></g><g><title>fast_float::number::Number::is_fast_path (515 samples, 0.33%)</title><rect x="15.7690%" y="245" width="0.3350%" height="15" fill="rgb(228,99,48)" fg:x="24244" fg:w="515"/><text x="16.0190%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (881 samples, 0.57%)</title><rect x="22.3819%" y="245" width="0.5730%" height="15" fill="rgb(253,11,6)" fg:x="34411" fg:w="881"/><text x="22.6319%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (815 samples, 0.53%)</title><rect x="22.4248%" y="229" width="0.5301%" height="15" fill="rgb(247,143,39)" fg:x="34477" fg:w="815"/><text x="22.6748%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (268 samples, 0.17%)</title><rect x="22.9549%" y="245" width="0.1743%" height="15" fill="rgb(236,97,10)" fg:x="35292" fg:w="268"/><text x="23.2049%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (239 samples, 0.16%)</title><rect x="22.9738%" y="229" width="0.1555%" height="15" fill="rgb(233,208,19)" fg:x="35321" fg:w="239"/><text x="23.2238%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::first (91 samples, 0.06%)</title><rect x="23.1292%" y="245" width="0.0592%" height="15" fill="rgb(216,164,2)" fg:x="35560" fg:w="91"/><text x="23.3792%" y="255.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (532 samples, 0.35%)</title><rect x="23.1975%" y="245" width="0.3460%" height="15" fill="rgb(220,129,5)" fg:x="35665" fg:w="532"/><text x="23.4475%" y="255.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (532 samples, 0.35%)</title><rect x="23.1975%" y="229" width="0.3460%" height="15" fill="rgb(242,17,10)" fg:x="35665" fg:w="532"/><text x="23.4475%" y="239.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (366 samples, 0.24%)</title><rect x="23.3055%" y="213" width="0.2381%" height="15" fill="rgb(242,107,0)" fg:x="35831" fg:w="366"/><text x="23.5555%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (61 samples, 0.04%)</title><rect x="23.5039%" y="197" width="0.0397%" height="15" fill="rgb(251,28,31)" fg:x="36136" fg:w="61"/><text x="23.7539%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (1,529 samples, 0.99%)</title><rect x="24.2811%" y="213" width="0.9945%" height="15" fill="rgb(233,223,10)" fg:x="37331" fg:w="1529"/><text x="24.5311%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::first (369 samples, 0.24%)</title><rect x="25.2756%" y="213" width="0.2400%" height="15" fill="rgb(215,21,27)" fg:x="38860" fg:w="369"/><text x="25.5256%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (1,239 samples, 0.81%)</title><rect x="25.5156%" y="213" width="0.8059%" height="15" fill="rgb(232,23,21)" fg:x="39229" fg:w="1239"/><text x="25.7656%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::step (247 samples, 0.16%)</title><rect x="26.3215%" y="213" width="0.1607%" height="15" fill="rgb(244,5,23)" fg:x="40468" fg:w="247"/><text x="26.5715%" y="223.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (247 samples, 0.16%)</title><rect x="26.3215%" y="197" width="0.1607%" height="15" fill="rgb(226,81,46)" fg:x="40468" fg:w="247"/><text x="26.5715%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (247 samples, 0.16%)</title><rect x="26.3215%" y="181" width="0.1607%" height="15" fill="rgb(247,70,30)" fg:x="40468" fg:w="247"/><text x="26.5715%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::parse_digits (5,240 samples, 3.41%)</title><rect x="23.5435%" y="229" width="3.4082%" height="15" fill="rgb(212,68,19)" fg:x="36197" fg:w="5240"/><text x="23.7935%" y="239.50">fas..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (722 samples, 0.47%)</title><rect x="26.4822%" y="213" width="0.4696%" height="15" fill="rgb(240,187,13)" fg:x="40715" fg:w="722"/><text x="26.7322%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (252 samples, 0.16%)</title><rect x="26.7879%" y="197" width="0.1639%" height="15" fill="rgb(223,113,26)" fg:x="41185" fg:w="252"/><text x="27.0379%" y="207.50"></text></g><g><title>fast_float::number::parse_number (16,684 samples, 10.85%)</title><rect x="16.1039%" y="261" width="10.8517%" height="15" fill="rgb(206,192,2)" fg:x="24759" fg:w="16684"/><text x="16.3539%" y="271.50">fast_float::numb..</text></g><g><title>fast_float::number::try_parse_digits (5,246 samples, 3.41%)</title><rect x="23.5435%" y="245" width="3.4121%" height="15" fill="rgb(241,108,4)" fg:x="36197" fg:w="5246"/><text x="23.7935%" y="255.50">fas..</text></g><g><title>fast_float::parse::parse_float (20,724 samples, 13.48%)</title><rect x="13.9829%" y="277" width="13.4795%" height="15" fill="rgb(247,173,49)" fg:x="21498" fg:w="20724"/><text x="14.2329%" y="287.50">fast_float::parse::p..</text></g><g><title>rs_1brc::process_chunk (779 samples, 0.51%)</title><rect x="26.9557%" y="261" width="0.5067%" height="15" fill="rgb(224,114,35)" fg:x="41443" fg:w="779"/><text x="27.2057%" y="271.50"></text></g><g><title>fast_float::parse (20,987 samples, 13.65%)</title><rect x="13.9829%" y="325" width="13.6505%" height="15" fill="rgb(245,159,27)" fg:x="21498" fg:w="20987"/><text x="14.2329%" y="335.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (20,987 samples, 13.65%)</title><rect x="13.9829%" y="309" width="13.6505%" height="15" fill="rgb(245,172,44)" fg:x="21498" fg:w="20987"/><text x="14.2329%" y="319.50">fast_float::FastFloat..</text></g><g><title>fast_float::FastFloat::parse_float_partial (20,987 samples, 13.65%)</title><rect x="13.9829%" y="293" width="13.6505%" height="15" fill="rgb(236,23,11)" fg:x="21498" fg:w="20987"/><text x="14.2329%" y="303.50">fast_float::FastFloat..</text></g><g><title>rs_1brc::process_chunk (263 samples, 0.17%)</title><rect x="27.4624%" y="277" width="0.1711%" height="15" fill="rgb(205,117,38)" fg:x="42222" fg:w="263"/><text x="27.7124%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (27 samples, 0.02%)</title><rect x="27.6471%" y="293" width="0.0176%" height="15" fill="rgb(237,72,25)" fg:x="42506" fg:w="27"/><text x="27.8971%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (98 samples, 0.06%)</title><rect x="27.8032%" y="245" width="0.0637%" height="15" fill="rgb(244,70,9)" fg:x="42746" fg:w="98"/><text x="28.0532%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (98 samples, 0.06%)</title><rect x="27.8032%" y="229" width="0.0637%" height="15" fill="rgb(217,125,39)" fg:x="42746" fg:w="98"/><text x="28.0532%" y="239.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (96 samples, 0.06%)</title><rect x="31.5601%" y="213" width="0.0624%" height="15" fill="rgb(235,36,10)" fg:x="48522" fg:w="96"/><text x="31.8101%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (96 samples, 0.06%)</title><rect x="31.5601%" y="197" width="0.0624%" height="15" fill="rgb(251,123,47)" fg:x="48522" fg:w="96"/><text x="31.8101%" y="207.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (8,355 samples, 5.43%)</title><rect x="31.6257%" y="213" width="5.4343%" height="15" fill="rgb(221,13,13)" fg:x="48623" fg:w="8355"/><text x="31.8757%" y="223.50">memchr:..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (6,631 samples, 4.31%)</title><rect x="32.7471%" y="197" width="4.3130%" height="15" fill="rgb(238,131,9)" fg:x="50347" fg:w="6631"/><text x="32.9971%" y="207.50">memch..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (6,559 samples, 4.27%)</title><rect x="32.7939%" y="181" width="4.2662%" height="15" fill="rgb(211,50,8)" fg:x="50419" fg:w="6559"/><text x="33.0439%" y="191.50">memch..</text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::movemask (3,497 samples, 2.27%)</title><rect x="34.7855%" y="165" width="2.2745%" height="15" fill="rgb(245,182,24)" fg:x="53481" fg:w="3497"/><text x="35.0355%" y="175.50">m..</text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (3,497 samples, 2.27%)</title><rect x="34.7855%" y="149" width="2.2745%" height="15" fill="rgb(242,14,37)" fg:x="53481" fg:w="3497"/><text x="35.0355%" y="159.50">c..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::find_raw (11,158 samples, 7.26%)</title><rect x="29.8058%" y="229" width="7.2575%" height="15" fill="rgb(246,228,12)" fg:x="45825" fg:w="11158"/><text x="30.0558%" y="239.50">memchr::ar..</text></g><g><title>memchr::memchr::memchr (16,182 samples, 10.53%)</title><rect x="27.6334%" y="325" width="10.5252%" height="15" fill="rgb(213,55,15)" fg:x="42485" fg:w="16182"/><text x="27.8834%" y="335.50">memchr::memchr:..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (16,182 samples, 10.53%)</title><rect x="27.6334%" y="309" width="10.5252%" height="15" fill="rgb(209,9,3)" fg:x="42485" fg:w="16182"/><text x="27.8834%" y="319.50">memchr::arch::g..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (16,130 samples, 10.49%)</title><rect x="27.6672%" y="293" width="10.4914%" height="15" fill="rgb(230,59,30)" fg:x="42537" fg:w="16130"/><text x="27.9172%" y="303.50">memchr::memchr:..</text></g><g><title>memchr::memchr::memchr_raw (16,130 samples, 10.49%)</title><rect x="27.6672%" y="277" width="10.4914%" height="15" fill="rgb(209,121,21)" fg:x="42537" fg:w="16130"/><text x="27.9172%" y="287.50">memchr::memchr:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (16,130 samples, 10.49%)</title><rect x="27.6672%" y="261" width="10.4914%" height="15" fill="rgb(220,109,13)" fg:x="42537" fg:w="16130"/><text x="27.9172%" y="271.50">memchr::arch::x..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (15,816 samples, 10.29%)</title><rect x="27.8715%" y="245" width="10.2872%" height="15" fill="rgb(232,18,1)" fg:x="42851" fg:w="15816"/><text x="28.1215%" y="255.50">memchr::arch::x..</text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::new_unchecked (1,684 samples, 1.10%)</title><rect x="37.0633%" y="229" width="1.0953%" height="15" fill="rgb(215,41,42)" fg:x="56983" fg:w="1684"/><text x="37.3133%" y="239.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::new (25 samples, 0.02%)</title><rect x="38.1424%" y="213" width="0.0163%" height="15" fill="rgb(224,123,36)" fg:x="58642" fg:w="25"/><text x="38.3924%" y="223.50"></text></g><g><title>memchr::vector::x86avx2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m256i&gt;::splat (25 samples, 0.02%)</title><rect x="38.1424%" y="197" width="0.0163%" height="15" fill="rgb(240,125,3)" fg:x="58642" fg:w="25"/><text x="38.3924%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set1_epi8 (25 samples, 0.02%)</title><rect x="38.1424%" y="181" width="0.0163%" height="15" fill="rgb(205,98,50)" fg:x="58642" fg:w="25"/><text x="38.3924%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi8 (25 samples, 0.02%)</title><rect x="38.1424%" y="165" width="0.0163%" height="15" fill="rgb(205,185,37)" fg:x="58642" fg:w="25"/><text x="38.3924%" y="175.50"></text></g><g><title>core::core_arch::simd::i8x32::new (25 samples, 0.02%)</title><rect x="38.1424%" y="149" width="0.0163%" height="15" fill="rgb(238,207,15)" fg:x="58642" fg:w="25"/><text x="38.3924%" y="159.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1,621 samples, 1.05%)</title><rect x="38.1586%" y="325" width="1.0543%" height="15" fill="rgb(213,199,42)" fg:x="58667" fg:w="1621"/><text x="38.4086%" y="335.50"></text></g><g><title>rs_1brc::process_chunk::_{{closure}} (1,621 samples, 1.05%)</title><rect x="38.1586%" y="309" width="1.0543%" height="15" fill="rgb(235,201,11)" fg:x="58667" fg:w="1621"/><text x="38.4086%" y="319.50"></text></g><g><title>__rdl_dealloc (700 samples, 0.46%)</title><rect x="39.2735%" y="181" width="0.4553%" height="15" fill="rgb(207,46,11)" fg:x="60381" fg:w="700"/><text x="39.5235%" y="191.50"></text></g><g><title>__rust_dealloc (1,290 samples, 0.84%)</title><rect x="39.7288%" y="181" width="0.8391%" height="15" fill="rgb(241,35,35)" fg:x="61081" fg:w="1290"/><text x="39.9788%" y="191.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (11,570 samples, 7.53%)</title><rect x="39.2130%" y="309" width="7.5254%" height="15" fill="rgb(243,32,47)" fg:x="60288" fg:w="11570"/><text x="39.4630%" y="319.50">std::colle..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (11,570 samples, 7.53%)</title><rect x="39.2130%" y="293" width="7.5254%" height="15" fill="rgb(247,202,23)" fg:x="60288" fg:w="11570"/><text x="39.4630%" y="303.50">hashbrown:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::boxed::Box&lt;[u8]&gt;,rs_1brc::StationValues&gt;&gt; (11,570 samples, 7.53%)</title><rect x="39.2130%" y="277" width="7.5254%" height="15" fill="rgb(219,102,11)" fg:x="60288" fg:w="11570"/><text x="39.4630%" y="287.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;[u8]&gt;&gt;&gt; (11,570 samples, 7.53%)</title><rect x="39.2130%" y="261" width="7.5254%" height="15" fill="rgb(243,110,44)" fg:x="60288" fg:w="11570"/><text x="39.4630%" y="271.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (11,532 samples, 7.50%)</title><rect x="39.2377%" y="245" width="7.5007%" height="15" fill="rgb(222,74,54)" fg:x="60326" fg:w="11532"/><text x="39.4877%" y="255.50">core::ptr:..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,532 samples, 7.50%)</title><rect x="39.2377%" y="229" width="7.5007%" height="15" fill="rgb(216,99,12)" fg:x="60326" fg:w="11532"/><text x="39.4877%" y="239.50">&lt;alloc::bo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,532 samples, 7.50%)</title><rect x="39.2377%" y="213" width="7.5007%" height="15" fill="rgb(226,22,26)" fg:x="60326" fg:w="11532"/><text x="39.4877%" y="223.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::dealloc (11,532 samples, 7.50%)</title><rect x="39.2377%" y="197" width="7.5007%" height="15" fill="rgb(217,163,10)" fg:x="60326" fg:w="11532"/><text x="39.4877%" y="207.50">alloc::all..</text></g><g><title>cfree (9,487 samples, 6.17%)</title><rect x="40.5678%" y="181" width="6.1706%" height="15" fill="rgb(213,25,53)" fg:x="62371" fg:w="9487"/><text x="40.8178%" y="191.50">cfree</text></g><g><title>[libc.so.6] (5,974 samples, 3.89%)</title><rect x="42.8528%" y="165" width="3.8857%" height="15" fill="rgb(252,105,26)" fg:x="65884" fg:w="5974"/><text x="43.1028%" y="175.50">[lib..</text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (11,576 samples, 7.53%)</title><rect x="39.2130%" y="325" width="7.5294%" height="15" fill="rgb(220,39,43)" fg:x="60288" fg:w="11576"/><text x="39.4630%" y="335.50">std::colle..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (259 samples, 0.17%)</title><rect x="49.4826%" y="293" width="0.1685%" height="15" fill="rgb(229,68,48)" fg:x="76077" fg:w="259"/><text x="49.7326%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (2,257 samples, 1.47%)</title><rect x="49.6589%" y="245" width="1.4680%" height="15" fill="rgb(252,8,32)" fg:x="76348" fg:w="2257"/><text x="49.9089%" y="255.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1,736 samples, 1.13%)</title><rect x="49.9977%" y="229" width="1.1291%" height="15" fill="rgb(223,20,43)" fg:x="76869" fg:w="1736"/><text x="50.2477%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (4,884 samples, 3.18%)</title><rect x="49.6589%" y="261" width="3.1767%" height="15" fill="rgb(229,81,49)" fg:x="76348" fg:w="4884"/><text x="49.9089%" y="271.50">&lt;ah..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,627 samples, 1.71%)</title><rect x="51.1269%" y="245" width="1.7087%" height="15" fill="rgb(236,28,36)" fg:x="78605" fg:w="2627"/><text x="51.3769%" y="255.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (980 samples, 0.64%)</title><rect x="52.8355%" y="245" width="0.6374%" height="15" fill="rgb(249,185,26)" fg:x="81232" fg:w="980"/><text x="53.0855%" y="255.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,168 samples, 0.76%)</title><rect x="52.8355%" y="261" width="0.7597%" height="15" fill="rgb(249,174,33)" fg:x="81232" fg:w="1168"/><text x="53.0855%" y="271.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (188 samples, 0.12%)</title><rect x="53.4730%" y="245" width="0.1223%" height="15" fill="rgb(233,201,37)" fg:x="82212" fg:w="188"/><text x="53.7230%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (387 samples, 0.25%)</title><rect x="54.5826%" y="165" width="0.2517%" height="15" fill="rgb(221,78,26)" fg:x="83918" fg:w="387"/><text x="54.8326%" y="175.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,935 samples, 1.26%)</title><rect x="54.5826%" y="213" width="1.2586%" height="15" fill="rgb(250,127,30)" fg:x="83918" fg:w="1935"/><text x="54.8326%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1,935 samples, 1.26%)</title><rect x="54.5826%" y="197" width="1.2586%" height="15" fill="rgb(230,49,44)" fg:x="83918" fg:w="1935"/><text x="54.8326%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1,935 samples, 1.26%)</title><rect x="54.5826%" y="181" width="1.2586%" height="15" fill="rgb(229,67,23)" fg:x="83918" fg:w="1935"/><text x="54.8326%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1,548 samples, 1.01%)</title><rect x="54.8343%" y="165" width="1.0069%" height="15" fill="rgb(249,83,47)" fg:x="84305" fg:w="1548"/><text x="55.0843%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (485 samples, 0.32%)</title><rect x="55.5257%" y="149" width="0.3155%" height="15" fill="rgb(215,43,3)" fg:x="85368" fg:w="485"/><text x="55.7757%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (485 samples, 0.32%)</title><rect x="55.5257%" y="133" width="0.3155%" height="15" fill="rgb(238,154,13)" fg:x="85368" fg:w="485"/><text x="55.7757%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (56 samples, 0.04%)</title><rect x="56.1833%" y="181" width="0.0364%" height="15" fill="rgb(219,56,2)" fg:x="86379" fg:w="56"/><text x="56.4333%" y="191.50"></text></g><g><title>ahash::operations::folded_multiply (839 samples, 0.55%)</title><rect x="58.5691%" y="165" width="0.5457%" height="15" fill="rgb(233,0,4)" fg:x="90047" fg:w="839"/><text x="58.8191%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (430 samples, 0.28%)</title><rect x="58.8351%" y="149" width="0.2797%" height="15" fill="rgb(235,30,7)" fg:x="90456" fg:w="430"/><text x="59.0851%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (571 samples, 0.37%)</title><rect x="59.1148%" y="165" width="0.3714%" height="15" fill="rgb(250,79,13)" fg:x="90886" fg:w="571"/><text x="59.3648%" y="175.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (5,508 samples, 3.58%)</title><rect x="56.2197%" y="181" width="3.5826%" height="15" fill="rgb(211,146,34)" fg:x="86435" fg:w="5508"/><text x="56.4697%" y="191.50">ahas..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (486 samples, 0.32%)</title><rect x="59.4862%" y="165" width="0.3161%" height="15" fill="rgb(228,22,38)" fg:x="91457" fg:w="486"/><text x="59.7362%" y="175.50"></text></g><g><title>&lt;[u8] as ahash::convert::ReadFromSlice&gt;::read_last_u32 (1,924 samples, 1.25%)</title><rect x="59.8101%" y="165" width="1.2514%" height="15" fill="rgb(235,168,5)" fg:x="91955" fg:w="1924"/><text x="60.0601%" y="175.50"></text></g><g><title>ahash::operations::read_small (1,937 samples, 1.26%)</title><rect x="59.8023%" y="181" width="1.2599%" height="15" fill="rgb(221,155,16)" fg:x="91943" fg:w="1937"/><text x="60.0523%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,880 samples, 1.22%)</title><rect x="61.0621%" y="181" width="1.2228%" height="15" fill="rgb(215,215,53)" fg:x="93880" fg:w="1880"/><text x="61.3121%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (10,382 samples, 6.75%)</title><rect x="55.8412%" y="197" width="6.7527%" height="15" fill="rgb(223,4,10)" fg:x="85853" fg:w="10382"/><text x="56.0912%" y="207.50">&lt;ahash::f..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (475 samples, 0.31%)</title><rect x="62.2850%" y="181" width="0.3090%" height="15" fill="rgb(234,103,6)" fg:x="95760" fg:w="475"/><text x="62.5350%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (19,900 samples, 12.94%)</title><rect x="49.6510%" y="293" width="12.9435%" height="15" fill="rgb(227,97,0)" fg:x="76336" fg:w="19900"/><text x="49.9010%" y="303.50">hashbrown::map::mak..</text></g><g><title>core::hash::BuildHasher::hash_one (19,900 samples, 12.94%)</title><rect x="49.6510%" y="277" width="12.9435%" height="15" fill="rgb(234,150,53)" fg:x="76336" fg:w="19900"/><text x="49.9010%" y="287.50">core::hash::BuildHa..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13,836 samples, 9.00%)</title><rect x="53.5952%" y="261" width="8.9993%" height="15" fill="rgb(228,201,54)" fg:x="82400" fg:w="13836"/><text x="53.8452%" y="271.50">core::hash::i..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (13,829 samples, 8.99%)</title><rect x="53.5998%" y="245" width="8.9948%" height="15" fill="rgb(222,22,37)" fg:x="82407" fg:w="13829"/><text x="53.8498%" y="255.50">&lt;alloc::boxed..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (12,318 samples, 8.01%)</title><rect x="54.5826%" y="229" width="8.0120%" height="15" fill="rgb(237,53,32)" fg:x="83918" fg:w="12318"/><text x="54.8326%" y="239.50">core::hash:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (10,383 samples, 6.75%)</title><rect x="55.8412%" y="213" width="6.7534%" height="15" fill="rgb(233,25,53)" fg:x="85853" fg:w="10383"/><text x="56.0912%" y="223.50">core::has..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.01%)</title><rect x="65.1280%" y="261" width="0.0150%" height="15" fill="rgb(210,40,34)" fg:x="100131" fg:w="23"/><text x="65.3780%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (23 samples, 0.01%)</title><rect x="65.1280%" y="245" width="0.0150%" height="15" fill="rgb(241,220,44)" fg:x="100131" fg:w="23"/><text x="65.3780%" y="255.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (23 samples, 0.01%)</title><rect x="65.1280%" y="229" width="0.0150%" height="15" fill="rgb(235,28,35)" fg:x="100131" fg:w="23"/><text x="65.3780%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,252 samples, 0.81%)</title><rect x="65.1449%" y="245" width="0.8143%" height="15" fill="rgb(210,56,17)" fg:x="100157" fg:w="1252"/><text x="65.3949%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,252 samples, 0.81%)</title><rect x="65.1449%" y="229" width="0.8143%" height="15" fill="rgb(224,130,29)" fg:x="100157" fg:w="1252"/><text x="65.3949%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,252 samples, 0.81%)</title><rect x="65.1449%" y="213" width="0.8143%" height="15" fill="rgb(235,212,8)" fg:x="100157" fg:w="1252"/><text x="65.3949%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1,252 samples, 0.81%)</title><rect x="65.1449%" y="197" width="0.8143%" height="15" fill="rgb(223,33,50)" fg:x="100157" fg:w="1252"/><text x="65.3949%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (23,368 samples, 15.20%)</title><rect x="65.1429%" y="261" width="15.1992%" height="15" fill="rgb(219,149,13)" fg:x="100154" fg:w="23368"/><text x="65.3929%" y="271.50">hashbrown::raw::RawTabl..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (22,113 samples, 14.38%)</title><rect x="65.9592%" y="245" width="14.3829%" height="15" fill="rgb(250,156,29)" fg:x="101409" fg:w="22113"/><text x="66.2092%" y="255.50">hashbrown::rustc_entry..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (22,113 samples, 14.38%)</title><rect x="65.9592%" y="229" width="14.3829%" height="15" fill="rgb(216,193,19)" fg:x="101409" fg:w="22113"/><text x="66.2092%" y="239.50">&lt;alloc::boxed::Box&lt;T,A..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (22,113 samples, 14.38%)</title><rect x="65.9592%" y="213" width="14.3829%" height="15" fill="rgb(216,135,14)" fg:x="101409" fg:w="22113"/><text x="66.2092%" y="223.50">core::slice::cmp::&lt;imp..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (22,113 samples, 14.38%)</title><rect x="65.9592%" y="197" width="14.3829%" height="15" fill="rgb(241,47,5)" fg:x="101409" fg:w="22113"/><text x="66.2092%" y="207.50">&lt;[A] as core::slice::c..</text></g><g><title>[libc.so.6] (13,242 samples, 8.61%)</title><rect x="71.7292%" y="181" width="8.6130%" height="15" fill="rgb(233,42,35)" fg:x="110280" fg:w="13242"/><text x="71.9792%" y="191.50">[libc.so.6]</text></g><g><title>hashbrown::raw::h2 (4,426 samples, 2.88%)</title><rect x="80.3421%" y="261" width="2.8788%" height="15" fill="rgb(231,13,6)" fg:x="123522" fg:w="4426"/><text x="80.5921%" y="271.50">ha..</text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.01%)</title><rect x="83.2209%" y="229" width="0.0137%" height="15" fill="rgb(207,181,40)" fg:x="127948" fg:w="21"/><text x="83.4709%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (621 samples, 0.40%)</title><rect x="83.2209%" y="261" width="0.4039%" height="15" fill="rgb(254,173,49)" fg:x="127948" fg:w="621"/><text x="83.4709%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (621 samples, 0.40%)</title><rect x="83.2209%" y="245" width="0.4039%" height="15" fill="rgb(221,1,38)" fg:x="127948" fg:w="621"/><text x="83.4709%" y="255.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (600 samples, 0.39%)</title><rect x="83.2346%" y="229" width="0.3903%" height="15" fill="rgb(206,124,46)" fg:x="127969" fg:w="600"/><text x="83.4846%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5,268 samples, 3.43%)</title><rect x="83.6248%" y="261" width="3.4265%" height="15" fill="rgb(249,21,11)" fg:x="128569" fg:w="5268"/><text x="83.8748%" y="271.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5,268 samples, 3.43%)</title><rect x="83.6248%" y="245" width="3.4265%" height="15" fill="rgb(222,201,40)" fg:x="128569" fg:w="5268"/><text x="83.8748%" y="255.50">cor..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (37,865 samples, 24.63%)</title><rect x="62.5965%" y="277" width="24.6284%" height="15" fill="rgb(235,61,29)" fg:x="96239" fg:w="37865"/><text x="62.8465%" y="287.50">hashbrown::raw::RawTableInner::find_inn..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (261 samples, 0.17%)</title><rect x="87.0552%" y="261" width="0.1698%" height="15" fill="rgb(219,207,3)" fg:x="133843" fg:w="261"/><text x="87.3052%" y="271.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (62,521 samples, 40.67%)</title><rect x="46.9810%" y="309" width="40.6654%" height="15" fill="rgb(222,56,46)" fg:x="72231" fg:w="62521"/><text x="47.2310%" y="319.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (38,516 samples, 25.05%)</title><rect x="62.5946%" y="293" width="25.0519%" height="15" fill="rgb(239,76,54)" fg:x="96236" fg:w="38516"/><text x="62.8446%" y="303.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (648 samples, 0.42%)</title><rect x="87.2250%" y="277" width="0.4215%" height="15" fill="rgb(231,124,27)" fg:x="134104" fg:w="648"/><text x="87.4750%" y="287.50"></text></g><g><title>rs_1brc::process_chunk (190 samples, 0.12%)</title><rect x="87.6464%" y="309" width="0.1236%" height="15" fill="rgb(249,195,6)" fg:x="134752" fg:w="190"/><text x="87.8964%" y="319.50"></text></g><g><title>std::panic::catch_unwind (135,514 samples, 88.14%)</title><rect x="0.0514%" y="453" width="88.1421%" height="15" fill="rgb(237,174,47)" fg:x="79" fg:w="135514"/><text x="0.3014%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (135,514 samples, 88.14%)</title><rect x="0.0514%" y="437" width="88.1421%" height="15" fill="rgb(206,201,31)" fg:x="79" fg:w="135514"/><text x="0.3014%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (135,514 samples, 88.14%)</title><rect x="0.0514%" y="421" width="88.1421%" height="15" fill="rgb(231,57,52)" fg:x="79" fg:w="135514"/><text x="0.3014%" y="431.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (135,514 samples, 88.14%)</title><rect x="0.0514%" y="405" width="88.1421%" height="15" fill="rgb(248,177,22)" fg:x="79" fg:w="135514"/><text x="0.3014%" y="415.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (135,514 samples, 88.14%)</title><rect x="0.0514%" y="389" width="88.1421%" height="15" fill="rgb(215,211,37)" fg:x="79" fg:w="135514"/><text x="0.3014%" y="399.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (135,514 samples, 88.14%)</title><rect x="0.0514%" y="373" width="88.1421%" height="15" fill="rgb(241,128,51)" fg:x="79" fg:w="135514"/><text x="0.3014%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rs_1brc::main::_{{closure}} (135,514 samples, 88.14%)</title><rect x="0.0514%" y="357" width="88.1421%" height="15" fill="rgb(227,165,31)" fg:x="79" fg:w="135514"/><text x="0.3014%" y="367.50">rs_1brc::main::_{{closure}}</text></g><g><title>rs_1brc::process_chunk (133,321 samples, 86.72%)</title><rect x="1.4778%" y="341" width="86.7157%" height="15" fill="rgb(228,167,24)" fg:x="2272" fg:w="133321"/><text x="1.7278%" y="351.50">rs_1brc::process_chunk</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (63,729 samples, 41.45%)</title><rect x="46.7423%" y="325" width="41.4511%" height="15" fill="rgb(228,143,12)" fg:x="71864" fg:w="63729"/><text x="46.9923%" y="335.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (651 samples, 0.42%)</title><rect x="87.7700%" y="309" width="0.4234%" height="15" fill="rgb(249,149,8)" fg:x="134942" fg:w="651"/><text x="88.0200%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (135,521 samples, 88.15%)</title><rect x="0.0507%" y="485" width="88.1466%" height="15" fill="rgb(243,35,44)" fg:x="78" fg:w="135521"/><text x="0.3007%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (135,520 samples, 88.15%)</title><rect x="0.0514%" y="469" width="88.1460%" height="15" fill="rgb(246,89,9)" fg:x="79" fg:w="135520"/><text x="0.3014%" y="479.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>[libc.so.6] (135,594 samples, 88.19%)</title><rect x="0.0163%" y="533" width="88.1941%" height="15" fill="rgb(233,213,13)" fg:x="25" fg:w="135594"/><text x="0.2663%" y="543.50">[libc.so.6]</text></g><g><title>[libc.so.6] (135,593 samples, 88.19%)</title><rect x="0.0169%" y="517" width="88.1934%" height="15" fill="rgb(233,141,41)" fg:x="26" fg:w="135593"/><text x="0.2669%" y="527.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (135,543 samples, 88.16%)</title><rect x="0.0494%" y="501" width="88.1609%" height="15" fill="rgb(239,167,4)" fg:x="76" fg:w="135543"/><text x="0.2994%" y="511.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (20 samples, 0.01%)</title><rect x="88.1973%" y="485" width="0.0130%" height="15" fill="rgb(209,217,16)" fg:x="135599" fg:w="20"/><text x="88.4473%" y="495.50"></text></g><g><title>read (20 samples, 0.01%)</title><rect x="88.2331%" y="517" width="0.0130%" height="15" fill="rgb(219,88,35)" fg:x="135654" fg:w="20"/><text x="88.4831%" y="527.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="88.2331%" y="501" width="0.0130%" height="15" fill="rgb(220,193,23)" fg:x="135654" fg:w="20"/><text x="88.4831%" y="511.50"></text></g><g><title>[unknown] (59 samples, 0.04%)</title><rect x="88.2103%" y="533" width="0.0384%" height="15" fill="rgb(230,90,52)" fg:x="135619" fg:w="59"/><text x="88.4603%" y="543.50"></text></g><g><title>[libc.so.6] (20 samples, 0.01%)</title><rect x="88.2930%" y="229" width="0.0130%" height="15" fill="rgb(252,106,19)" fg:x="135746" fg:w="20"/><text x="88.5430%" y="239.50"></text></g><g><title>[libc.so.6] (60 samples, 0.04%)</title><rect x="88.2682%" y="245" width="0.0390%" height="15" fill="rgb(206,74,20)" fg:x="135708" fg:w="60"/><text x="88.5182%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (87 samples, 0.06%)</title><rect x="88.2526%" y="357" width="0.0566%" height="15" fill="rgb(230,138,44)" fg:x="135684" fg:w="87"/><text x="88.5026%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (87 samples, 0.06%)</title><rect x="88.2526%" y="341" width="0.0566%" height="15" fill="rgb(235,182,43)" fg:x="135684" fg:w="87"/><text x="88.5026%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (87 samples, 0.06%)</title><rect x="88.2526%" y="325" width="0.0566%" height="15" fill="rgb(242,16,51)" fg:x="135684" fg:w="87"/><text x="88.5026%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (87 samples, 0.06%)</title><rect x="88.2526%" y="309" width="0.0566%" height="15" fill="rgb(248,9,4)" fg:x="135684" fg:w="87"/><text x="88.5026%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 0.06%)</title><rect x="88.2526%" y="293" width="0.0566%" height="15" fill="rgb(210,31,22)" fg:x="135684" fg:w="87"/><text x="88.5026%" y="303.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.06%)</title><rect x="88.2526%" y="277" width="0.0566%" height="15" fill="rgb(239,54,39)" fg:x="135684" fg:w="87"/><text x="88.5026%" y="287.50"></text></g><g><title>malloc (80 samples, 0.05%)</title><rect x="88.2572%" y="261" width="0.0520%" height="15" fill="rgb(230,99,41)" fg:x="135691" fg:w="80"/><text x="88.5072%" y="271.50"></text></g><g><title>[libc.so.6] (2,767 samples, 1.80%)</title><rect x="88.3099%" y="341" width="1.7997%" height="15" fill="rgb(253,106,12)" fg:x="135772" fg:w="2767"/><text x="88.5599%" y="351.50">[..</text></g><g><title>[unknown] (329 samples, 0.21%)</title><rect x="89.8956%" y="325" width="0.2140%" height="15" fill="rgb(213,46,41)" fg:x="138210" fg:w="329"/><text x="90.1456%" y="335.50"></text></g><g><title>[unknown] (144 samples, 0.09%)</title><rect x="90.0159%" y="309" width="0.0937%" height="15" fill="rgb(215,133,35)" fg:x="138395" fg:w="144"/><text x="90.2659%" y="319.50"></text></g><g><title>[unknown] (136 samples, 0.09%)</title><rect x="90.0211%" y="293" width="0.0885%" height="15" fill="rgb(213,28,5)" fg:x="138403" fg:w="136"/><text x="90.2711%" y="303.50"></text></g><g><title>[unknown] (113 samples, 0.07%)</title><rect x="90.0361%" y="277" width="0.0735%" height="15" fill="rgb(215,77,49)" fg:x="138426" fg:w="113"/><text x="90.2861%" y="287.50"></text></g><g><title>[unknown] (66 samples, 0.04%)</title><rect x="90.0667%" y="261" width="0.0429%" height="15" fill="rgb(248,100,22)" fg:x="138473" fg:w="66"/><text x="90.3167%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (2,860 samples, 1.86%)</title><rect x="88.2526%" y="389" width="1.8602%" height="15" fill="rgb(208,67,9)" fg:x="135684" fg:w="2860"/><text x="88.5026%" y="399.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (2,860 samples, 1.86%)</title><rect x="88.2526%" y="373" width="1.8602%" height="15" fill="rgb(219,133,21)" fg:x="135684" fg:w="2860"/><text x="88.5026%" y="383.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,773 samples, 1.80%)</title><rect x="88.3092%" y="357" width="1.8036%" height="15" fill="rgb(246,46,29)" fg:x="135771" fg:w="2773"/><text x="88.5592%" y="367.50">c..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (160 samples, 0.10%)</title><rect x="90.1174%" y="389" width="0.1041%" height="15" fill="rgb(246,185,52)" fg:x="138551" fg:w="160"/><text x="90.3674%" y="399.50"></text></g><g><title>read (151 samples, 0.10%)</title><rect x="90.1233%" y="373" width="0.0982%" height="15" fill="rgb(252,136,11)" fg:x="138560" fg:w="151"/><text x="90.3733%" y="383.50"></text></g><g><title>[unknown] (139 samples, 0.09%)</title><rect x="90.1311%" y="357" width="0.0904%" height="15" fill="rgb(219,138,53)" fg:x="138572" fg:w="139"/><text x="90.3811%" y="367.50"></text></g><g><title>[unknown] (133 samples, 0.09%)</title><rect x="90.1350%" y="341" width="0.0865%" height="15" fill="rgb(211,51,23)" fg:x="138578" fg:w="133"/><text x="90.3850%" y="351.50"></text></g><g><title>[unknown] (114 samples, 0.07%)</title><rect x="90.1473%" y="325" width="0.0741%" height="15" fill="rgb(247,221,28)" fg:x="138597" fg:w="114"/><text x="90.3973%" y="335.50"></text></g><g><title>[unknown] (109 samples, 0.07%)</title><rect x="90.1506%" y="309" width="0.0709%" height="15" fill="rgb(251,222,45)" fg:x="138602" fg:w="109"/><text x="90.4006%" y="319.50"></text></g><g><title>[unknown] (92 samples, 0.06%)</title><rect x="90.1616%" y="293" width="0.0598%" height="15" fill="rgb(217,162,53)" fg:x="138619" fg:w="92"/><text x="90.4116%" y="303.50"></text></g><g><title>[unknown] (37 samples, 0.02%)</title><rect x="90.1974%" y="277" width="0.0241%" height="15" fill="rgb(229,93,14)" fg:x="138674" fg:w="37"/><text x="90.4474%" y="287.50"></text></g><g><title>[unknown] (31 samples, 0.02%)</title><rect x="90.2013%" y="261" width="0.0202%" height="15" fill="rgb(209,67,49)" fg:x="138680" fg:w="31"/><text x="90.4513%" y="271.50"></text></g><g><title>[libc.so.6] (23 samples, 0.01%)</title><rect x="90.2956%" y="181" width="0.0150%" height="15" fill="rgb(213,87,29)" fg:x="138825" fg:w="23"/><text x="90.5456%" y="191.50"></text></g><g><title>[libc.so.6] (86 samples, 0.06%)</title><rect x="90.2572%" y="197" width="0.0559%" height="15" fill="rgb(205,151,52)" fg:x="138766" fg:w="86"/><text x="90.5072%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (144 samples, 0.09%)</title><rect x="90.2254%" y="309" width="0.0937%" height="15" fill="rgb(253,215,39)" fg:x="138717" fg:w="144"/><text x="90.4754%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (144 samples, 0.09%)</title><rect x="90.2254%" y="293" width="0.0937%" height="15" fill="rgb(221,220,41)" fg:x="138717" fg:w="144"/><text x="90.4754%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (144 samples, 0.09%)</title><rect x="90.2254%" y="277" width="0.0937%" height="15" fill="rgb(218,133,21)" fg:x="138717" fg:w="144"/><text x="90.4754%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (144 samples, 0.09%)</title><rect x="90.2254%" y="261" width="0.0937%" height="15" fill="rgb(221,193,43)" fg:x="138717" fg:w="144"/><text x="90.4754%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (144 samples, 0.09%)</title><rect x="90.2254%" y="245" width="0.0937%" height="15" fill="rgb(240,128,52)" fg:x="138717" fg:w="144"/><text x="90.4754%" y="255.50"></text></g><g><title>alloc::alloc::alloc (144 samples, 0.09%)</title><rect x="90.2254%" y="229" width="0.0937%" height="15" fill="rgb(253,114,12)" fg:x="138717" fg:w="144"/><text x="90.4754%" y="239.50"></text></g><g><title>malloc (122 samples, 0.08%)</title><rect x="90.2397%" y="213" width="0.0794%" height="15" fill="rgb(215,223,47)" fg:x="138739" fg:w="122"/><text x="90.4897%" y="223.50"></text></g><g><title>[libc.so.6] (1,793 samples, 1.17%)</title><rect x="90.3197%" y="277" width="1.1662%" height="15" fill="rgb(248,225,23)" fg:x="138862" fg:w="1793"/><text x="90.5697%" y="287.50"></text></g><g><title>[unknown] (259 samples, 0.17%)</title><rect x="91.3174%" y="261" width="0.1685%" height="15" fill="rgb(250,108,0)" fg:x="140396" fg:w="259"/><text x="91.5674%" y="271.50"></text></g><g><title>[unknown] (120 samples, 0.08%)</title><rect x="91.4079%" y="245" width="0.0781%" height="15" fill="rgb(228,208,7)" fg:x="140535" fg:w="120"/><text x="91.6579%" y="255.50"></text></g><g><title>[unknown] (108 samples, 0.07%)</title><rect x="91.4157%" y="229" width="0.0702%" height="15" fill="rgb(244,45,10)" fg:x="140547" fg:w="108"/><text x="91.6657%" y="239.50"></text></g><g><title>[unknown] (90 samples, 0.06%)</title><rect x="91.4274%" y="213" width="0.0585%" height="15" fill="rgb(207,125,25)" fg:x="140565" fg:w="90"/><text x="91.6774%" y="223.50"></text></g><g><title>[unknown] (56 samples, 0.04%)</title><rect x="91.4495%" y="197" width="0.0364%" height="15" fill="rgb(210,195,18)" fg:x="140599" fg:w="56"/><text x="91.6995%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,946 samples, 1.27%)</title><rect x="90.2254%" y="389" width="1.2657%" height="15" fill="rgb(249,80,12)" fg:x="138717" fg:w="1946"/><text x="90.4754%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,946 samples, 1.27%)</title><rect x="90.2254%" y="373" width="1.2657%" height="15" fill="rgb(221,65,9)" fg:x="138717" fg:w="1946"/><text x="90.4754%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,946 samples, 1.27%)</title><rect x="90.2254%" y="357" width="1.2657%" height="15" fill="rgb(235,49,36)" fg:x="138717" fg:w="1946"/><text x="90.4754%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1,946 samples, 1.27%)</title><rect x="90.2254%" y="341" width="1.2657%" height="15" fill="rgb(225,32,20)" fg:x="138717" fg:w="1946"/><text x="90.4754%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,946 samples, 1.27%)</title><rect x="90.2254%" y="325" width="1.2657%" height="15" fill="rgb(215,141,46)" fg:x="138717" fg:w="1946"/><text x="90.4754%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,802 samples, 1.17%)</title><rect x="90.3190%" y="309" width="1.1721%" height="15" fill="rgb(250,160,47)" fg:x="138861" fg:w="1802"/><text x="90.5690%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,802 samples, 1.17%)</title><rect x="90.3190%" y="293" width="1.1721%" height="15" fill="rgb(216,222,40)" fg:x="138861" fg:w="1802"/><text x="90.5690%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (12,691 samples, 8.25%)</title><rect x="91.4911%" y="389" width="8.2546%" height="15" fill="rgb(234,217,39)" fg:x="140663" fg:w="12691"/><text x="91.7411%" y="399.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12,691 samples, 8.25%)</title><rect x="91.4911%" y="373" width="8.2546%" height="15" fill="rgb(207,178,40)" fg:x="140663" fg:w="12691"/><text x="91.7411%" y="383.50">alloc::vec:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (12,691 samples, 8.25%)</title><rect x="91.4911%" y="357" width="8.2546%" height="15" fill="rgb(221,136,13)" fg:x="140663" fg:w="12691"/><text x="91.7411%" y="367.50">core::intri..</text></g><g><title>[libc.so.6] (12,691 samples, 8.25%)</title><rect x="91.4911%" y="341" width="8.2546%" height="15" fill="rgb(249,199,10)" fg:x="140663" fg:w="12691"/><text x="91.7411%" y="351.50">[libc.so.6]</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (75 samples, 0.05%)</title><rect x="99.7457%" y="389" width="0.0488%" height="15" fill="rgb(249,222,13)" fg:x="153354" fg:w="75"/><text x="99.9957%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (75 samples, 0.05%)</title><rect x="99.7457%" y="373" width="0.0488%" height="15" fill="rgb(244,185,38)" fg:x="153354" fg:w="75"/><text x="99.9957%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.05%)</title><rect x="99.7457%" y="357" width="0.0488%" height="15" fill="rgb(236,202,9)" fg:x="153354" fg:w="75"/><text x="99.9957%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (75 samples, 0.05%)</title><rect x="99.7457%" y="341" width="0.0488%" height="15" fill="rgb(250,229,37)" fg:x="153354" fg:w="75"/><text x="99.9957%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (75 samples, 0.05%)</title><rect x="99.7457%" y="325" width="0.0488%" height="15" fill="rgb(206,174,23)" fg:x="153354" fg:w="75"/><text x="99.9957%" y="335.50"></text></g><g><title>cfree (62 samples, 0.04%)</title><rect x="99.7541%" y="309" width="0.0403%" height="15" fill="rgb(211,33,43)" fg:x="153367" fg:w="62"/><text x="100.0041%" y="319.50"></text></g><g><title>[libc.so.6] (36 samples, 0.02%)</title><rect x="99.7710%" y="293" width="0.0234%" height="15" fill="rgb(245,58,50)" fg:x="153393" fg:w="36"/><text x="100.0210%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (16 samples, 0.01%)</title><rect x="99.7945%" y="389" width="0.0104%" height="15" fill="rgb(244,68,36)" fg:x="153429" fg:w="16"/><text x="100.0445%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (45 samples, 0.03%)</title><rect x="99.8146%" y="357" width="0.0293%" height="15" fill="rgb(232,229,15)" fg:x="153460" fg:w="45"/><text x="100.0646%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (174 samples, 0.11%)</title><rect x="99.8504%" y="309" width="0.1132%" height="15" fill="rgb(254,30,23)" fg:x="153515" fg:w="174"/><text x="100.1004%" y="319.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select::_{{closure}} (174 samples, 0.11%)</title><rect x="99.8504%" y="293" width="0.1132%" height="15" fill="rgb(235,160,14)" fg:x="153515" fg:w="174"/><text x="100.1004%" y="303.50"></text></g><g><title>crossbeam_channel::context::Context::unpark (134 samples, 0.09%)</title><rect x="99.8764%" y="277" width="0.0872%" height="15" fill="rgb(212,155,44)" fg:x="153555" fg:w="134"/><text x="100.1264%" y="287.50"></text></g><g><title>std::thread::Thread::unpark (134 samples, 0.09%)</title><rect x="99.8764%" y="261" width="0.0872%" height="15" fill="rgb(226,2,50)" fg:x="153555" fg:w="134"/><text x="100.1264%" y="271.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::unpark (134 samples, 0.09%)</title><rect x="99.8764%" y="245" width="0.0872%" height="15" fill="rgb(234,177,6)" fg:x="153555" fg:w="134"/><text x="100.1264%" y="255.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wake (127 samples, 0.08%)</title><rect x="99.8810%" y="229" width="0.0826%" height="15" fill="rgb(217,24,9)" fg:x="153562" fg:w="127"/><text x="100.1310%" y="239.50"></text></g><g><title>syscall (127 samples, 0.08%)</title><rect x="99.8810%" y="213" width="0.0826%" height="15" fill="rgb(220,13,46)" fg:x="153562" fg:w="127"/><text x="100.1310%" y="223.50"></text></g><g><title>[unknown] (124 samples, 0.08%)</title><rect x="99.8829%" y="197" width="0.0807%" height="15" fill="rgb(239,221,27)" fg:x="153565" fg:w="124"/><text x="100.1329%" y="207.50"></text></g><g><title>[unknown] (114 samples, 0.07%)</title><rect x="99.8894%" y="181" width="0.0741%" height="15" fill="rgb(222,198,25)" fg:x="153575" fg:w="114"/><text x="100.1394%" y="191.50"></text></g><g><title>[unknown] (89 samples, 0.06%)</title><rect x="99.9057%" y="165" width="0.0579%" height="15" fill="rgb(211,99,13)" fg:x="153600" fg:w="89"/><text x="100.1557%" y="175.50"></text></g><g><title>[unknown] (78 samples, 0.05%)</title><rect x="99.9128%" y="149" width="0.0507%" height="15" fill="rgb(232,111,31)" fg:x="153611" fg:w="78"/><text x="100.1628%" y="159.50"></text></g><g><title>[unknown] (70 samples, 0.05%)</title><rect x="99.9180%" y="133" width="0.0455%" height="15" fill="rgb(245,82,37)" fg:x="153619" fg:w="70"/><text x="100.1680%" y="143.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="99.9532%" y="117" width="0.0104%" height="15" fill="rgb(227,149,46)" fg:x="153673" fg:w="16"/><text x="100.2032%" y="127.50"></text></g><g><title>crossbeam_channel::waker::Waker::try_select (189 samples, 0.12%)</title><rect x="99.8504%" y="325" width="0.1229%" height="15" fill="rgb(218,36,50)" fg:x="153515" fg:w="189"/><text x="100.1004%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::write (207 samples, 0.13%)</title><rect x="99.8439%" y="357" width="0.1346%" height="15" fill="rgb(226,80,48)" fg:x="153505" fg:w="207"/><text x="100.0939%" y="367.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (207 samples, 0.13%)</title><rect x="99.8439%" y="341" width="0.1346%" height="15" fill="rgb(238,224,15)" fg:x="153505" fg:w="207"/><text x="100.0939%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (269 samples, 0.17%)</title><rect x="99.8068%" y="389" width="0.1750%" height="15" fill="rgb(241,136,10)" fg:x="153448" fg:w="269"/><text x="100.0568%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (266 samples, 0.17%)</title><rect x="99.8088%" y="373" width="0.1730%" height="15" fill="rgb(208,32,45)" fg:x="153451" fg:w="266"/><text x="100.0588%" y="383.50"></text></g><g><title>rs_1brc::find_new_line_pos (19 samples, 0.01%)</title><rect x="99.9818%" y="389" width="0.0124%" height="15" fill="rgb(207,135,9)" fg:x="153717" fg:w="19"/><text x="100.2318%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (19 samples, 0.01%)</title><rect x="99.9818%" y="373" width="0.0124%" height="15" fill="rgb(206,86,44)" fg:x="153717" fg:w="19"/><text x="100.2318%" y="383.50"></text></g><g><title>all (153,745 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="153745"/><text x="0.2500%" y="575.50"></text></g><g><title>rs-1brc (153,745 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="153745"/><text x="0.2500%" y="559.50">rs-1brc</text></g><g><title>_start (18,067 samples, 11.75%)</title><rect x="88.2487%" y="533" width="11.7513%" height="15" fill="rgb(234,36,40)" fg:x="135678" fg:w="18067"/><text x="88.4987%" y="543.50">_start</text></g><g><title>__libc_start_main (18,067 samples, 11.75%)</title><rect x="88.2487%" y="517" width="11.7513%" height="15" fill="rgb(213,64,8)" fg:x="135678" fg:w="18067"/><text x="88.4987%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (18,067 samples, 11.75%)</title><rect x="88.2487%" y="501" width="11.7513%" height="15" fill="rgb(210,75,36)" fg:x="135678" fg:w="18067"/><text x="88.4987%" y="511.50">[libc.so.6]</text></g><g><title>main (18,067 samples, 11.75%)</title><rect x="88.2487%" y="485" width="11.7513%" height="15" fill="rgb(229,88,21)" fg:x="135678" fg:w="18067"/><text x="88.4987%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (18,067 samples, 11.75%)</title><rect x="88.2487%" y="469" width="11.7513%" height="15" fill="rgb(252,204,47)" fg:x="135678" fg:w="18067"/><text x="88.4987%" y="479.50">std::rt::lang_sta..</text></g><g><title>std::rt::lang_start::_{{closure}} (18,066 samples, 11.75%)</title><rect x="88.2494%" y="453" width="11.7506%" height="15" fill="rgb(208,77,27)" fg:x="135679" fg:w="18066"/><text x="88.4994%" y="463.50">std::rt::lang_sta..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18,066 samples, 11.75%)</title><rect x="88.2494%" y="437" width="11.7506%" height="15" fill="rgb(221,76,26)" fg:x="135679" fg:w="18066"/><text x="88.4994%" y="447.50">std::sys_common::..</text></g><g><title>core::ops::function::FnOnce::call_once (18,066 samples, 11.75%)</title><rect x="88.2494%" y="421" width="11.7506%" height="15" fill="rgb(225,139,18)" fg:x="135679" fg:w="18066"/><text x="88.4994%" y="431.50">core::ops::functi..</text></g><g><title>rs_1brc::main (18,066 samples, 11.75%)</title><rect x="88.2494%" y="405" width="11.7506%" height="15" fill="rgb(230,137,11)" fg:x="135679" fg:w="18066"/><text x="88.4994%" y="415.50">rs_1brc::main</text></g></svg></svg>