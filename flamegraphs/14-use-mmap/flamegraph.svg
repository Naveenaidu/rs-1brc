<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="35323"><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0142%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0198%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (25 samples, 0.07%)</title><rect x="0.0283%" y="437" width="0.0708%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="25"/><text x="0.2783%" y="447.50"></text></g><g><title>[unknown] (18 samples, 0.05%)</title><rect x="0.0481%" y="421" width="0.0510%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="18"/><text x="0.2981%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.0878%" y="405" width="0.0113%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="4"/><text x="0.3378%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (18 samples, 0.05%)</title><rect x="0.9597%" y="261" width="0.0510%" height="15" fill="rgb(232,128,0)" fg:x="339" fg:w="18"/><text x="1.2097%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (169 samples, 0.48%)</title><rect x="1.0107%" y="245" width="0.4784%" height="15" fill="rgb(207,160,47)" fg:x="357" fg:w="169"/><text x="1.2607%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (790 samples, 2.24%)</title><rect x="1.0107%" y="261" width="2.2365%" height="15" fill="rgb(228,23,34)" fg:x="357" fg:w="790"/><text x="1.2607%" y="271.50">c..</text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (621 samples, 1.76%)</title><rect x="1.4891%" y="245" width="1.7581%" height="15" fill="rgb(218,30,26)" fg:x="526" fg:w="621"/><text x="1.7391%" y="255.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (4,494 samples, 12.72%)</title><rect x="4.9656%" y="181" width="12.7226%" height="15" fill="rgb(220,122,19)" fg:x="1754" fg:w="4494"/><text x="5.2156%" y="191.50">&lt;f32 as core::ops::..</text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::from_u64 (111 samples, 0.31%)</title><rect x="17.6882%" y="181" width="0.3142%" height="15" fill="rgb(250,228,42)" fg:x="6248" fg:w="111"/><text x="17.9382%" y="191.50"></text></g><g><title>&lt;f32 as fast_float::float::Float&gt;::pow10_fast_path (127 samples, 0.36%)</title><rect x="18.0024%" y="181" width="0.3595%" height="15" fill="rgb(240,193,28)" fg:x="6359" fg:w="127"/><text x="18.2524%" y="191.50"></text></g><g><title>fast_float::number::Number::try_fast_path (5,042 samples, 14.27%)</title><rect x="4.6655%" y="197" width="14.2740%" height="15" fill="rgb(216,20,37)" fg:x="1648" fg:w="5042"/><text x="4.9155%" y="207.50">fast_float::number::Nu..</text></g><g><title>fast_float::number::Number::is_fast_path (204 samples, 0.58%)</title><rect x="18.3620%" y="181" width="0.5775%" height="15" fill="rgb(206,188,39)" fg:x="6486" fg:w="204"/><text x="18.6120%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::check_first (232 samples, 0.66%)</title><rect x="21.8781%" y="181" width="0.6568%" height="15" fill="rgb(217,207,13)" fg:x="7728" fg:w="232"/><text x="22.1281%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (210 samples, 0.59%)</title><rect x="21.9404%" y="165" width="0.5945%" height="15" fill="rgb(231,73,38)" fg:x="7750" fg:w="210"/><text x="22.1904%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::check_first_either (21 samples, 0.06%)</title><rect x="22.5349%" y="181" width="0.0595%" height="15" fill="rgb(225,20,46)" fg:x="7960" fg:w="21"/><text x="22.7849%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::first (25 samples, 0.07%)</title><rect x="22.5943%" y="181" width="0.0708%" height="15" fill="rgb(210,31,41)" fg:x="7981" fg:w="25"/><text x="22.8443%" y="191.50"></text></g><g><title>fast_float::number::try_parse_8digits_le (231 samples, 0.65%)</title><rect x="22.6736%" y="181" width="0.6540%" height="15" fill="rgb(221,200,47)" fg:x="8009" fg:w="231"/><text x="22.9236%" y="191.50"></text></g><g><title>fast_float::common::AsciiStr::try_read_u64 (231 samples, 0.65%)</title><rect x="22.6736%" y="165" width="0.6540%" height="15" fill="rgb(226,26,5)" fg:x="8009" fg:w="231"/><text x="22.9236%" y="175.50"></text></g><g><title>fast_float::common::AsciiStr::check_len (132 samples, 0.37%)</title><rect x="22.9539%" y="149" width="0.3737%" height="15" fill="rgb(249,33,26)" fg:x="8108" fg:w="132"/><text x="23.2039%" y="159.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (646 samples, 1.83%)</title><rect x="24.8337%" y="149" width="1.8288%" height="15" fill="rgb(235,183,28)" fg:x="8772" fg:w="646"/><text x="25.0837%" y="159.50">c..</text></g><g><title>fast_float::common::AsciiStr::first (34 samples, 0.10%)</title><rect x="26.6625%" y="149" width="0.0963%" height="15" fill="rgb(221,5,38)" fg:x="9418" fg:w="34"/><text x="26.9125%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::is_empty (504 samples, 1.43%)</title><rect x="26.7588%" y="149" width="1.4268%" height="15" fill="rgb(247,18,42)" fg:x="9452" fg:w="504"/><text x="27.0088%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::step (130 samples, 0.37%)</title><rect x="28.1856%" y="149" width="0.3680%" height="15" fill="rgb(241,131,45)" fg:x="9956" fg:w="130"/><text x="28.4356%" y="159.50"></text></g><g><title>fast_float::common::AsciiStr::step_by (130 samples, 0.37%)</title><rect x="28.1856%" y="133" width="0.3680%" height="15" fill="rgb(249,31,29)" fg:x="9956" fg:w="130"/><text x="28.4356%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (130 samples, 0.37%)</title><rect x="28.1856%" y="117" width="0.3680%" height="15" fill="rgb(225,111,53)" fg:x="9956" fg:w="130"/><text x="28.4356%" y="127.50"></text></g><g><title>fast_float::number::parse_number (3,650 samples, 10.33%)</title><rect x="18.9395%" y="197" width="10.3332%" height="15" fill="rgb(238,160,17)" fg:x="6690" fg:w="3650"/><text x="19.1895%" y="207.50">fast_float::num..</text></g><g><title>fast_float::number::try_parse_digits (2,100 samples, 5.95%)</title><rect x="23.3276%" y="181" width="5.9451%" height="15" fill="rgb(214,148,48)" fg:x="8240" fg:w="2100"/><text x="23.5776%" y="191.50">fast_flo..</text></g><g><title>fast_float::common::AsciiStr::parse_digits (2,100 samples, 5.95%)</title><rect x="23.3276%" y="165" width="5.9451%" height="15" fill="rgb(232,36,49)" fg:x="8240" fg:w="2100"/><text x="23.5776%" y="175.50">fast_flo..</text></g><g><title>fast_float::number::try_parse_digits::_{{closure}} (254 samples, 0.72%)</title><rect x="28.5536%" y="149" width="0.7191%" height="15" fill="rgb(209,103,24)" fg:x="10086" fg:w="254"/><text x="28.8036%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (112 samples, 0.32%)</title><rect x="28.9556%" y="133" width="0.3171%" height="15" fill="rgb(229,88,8)" fg:x="10228" fg:w="112"/><text x="29.2056%" y="143.50"></text></g><g><title>fast_float::parse (9,665 samples, 27.36%)</title><rect x="3.2472%" y="261" width="27.3618%" height="15" fill="rgb(213,181,19)" fg:x="1147" fg:w="9665"/><text x="3.4972%" y="271.50">fast_float::parse</text></g><g><title>fast_float::FastFloat::parse_float (9,665 samples, 27.36%)</title><rect x="3.2472%" y="245" width="27.3618%" height="15" fill="rgb(254,191,54)" fg:x="1147" fg:w="9665"/><text x="3.4972%" y="255.50">fast_float::FastFloat::parse_float</text></g><g><title>fast_float::FastFloat::parse_float_partial (9,665 samples, 27.36%)</title><rect x="3.2472%" y="229" width="27.3618%" height="15" fill="rgb(241,83,37)" fg:x="1147" fg:w="9665"/><text x="3.4972%" y="239.50">fast_float::FastFloat::parse_float_partial</text></g><g><title>fast_float::parse::parse_float (9,665 samples, 27.36%)</title><rect x="3.2472%" y="213" width="27.3618%" height="15" fill="rgb(233,36,39)" fg:x="1147" fg:w="9665"/><text x="3.4972%" y="223.50">fast_float::parse::parse_float</text></g><g><title>rs_1brc::process_chunk (472 samples, 1.34%)</title><rect x="29.2727%" y="197" width="1.3362%" height="15" fill="rgb(226,3,54)" fg:x="10340" fg:w="472"/><text x="29.5227%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (209 samples, 0.59%)</title><rect x="31.1978%" y="229" width="0.5917%" height="15" fill="rgb(245,192,40)" fg:x="11020" fg:w="209"/><text x="31.4478%" y="239.50"></text></g><g><title>&lt;*const T as memchr::ext::Pointer&gt;::distance (14 samples, 0.04%)</title><rect x="35.9171%" y="149" width="0.0396%" height="15" fill="rgb(238,167,29)" fg:x="12687" fg:w="14"/><text x="36.1671%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (14 samples, 0.04%)</title><rect x="35.9171%" y="133" width="0.0396%" height="15" fill="rgb(232,182,51)" fg:x="12687" fg:w="14"/><text x="36.1671%" y="143.50"></text></g><g><title>&lt;memchr::vector::SensibleMoveMask as memchr::vector::MoveMask&gt;::has_non_zero (76 samples, 0.22%)</title><rect x="36.2512%" y="117" width="0.2152%" height="15" fill="rgb(231,60,39)" fg:x="12805" fg:w="76"/><text x="36.5012%" y="127.50"></text></g><g><title>[unknown] (77 samples, 0.22%)</title><rect x="39.5493%" y="101" width="0.2180%" height="15" fill="rgb(208,69,12)" fg:x="13970" fg:w="77"/><text x="39.7993%" y="111.50"></text></g><g><title>[unknown] (38 samples, 0.11%)</title><rect x="39.6597%" y="85" width="0.1076%" height="15" fill="rgb(235,93,37)" fg:x="14009" fg:w="38"/><text x="39.9097%" y="95.50"></text></g><g><title>[unknown] (35 samples, 0.10%)</title><rect x="39.6682%" y="69" width="0.0991%" height="15" fill="rgb(213,116,39)" fg:x="14012" fg:w="35"/><text x="39.9182%" y="79.50"></text></g><g><title>[unknown] (30 samples, 0.08%)</title><rect x="39.6824%" y="53" width="0.0849%" height="15" fill="rgb(222,207,29)" fg:x="14017" fg:w="30"/><text x="39.9324%" y="63.50"></text></g><g><title>[unknown] (13 samples, 0.04%)</title><rect x="39.7305%" y="37" width="0.0368%" height="15" fill="rgb(206,96,30)" fg:x="14034" fg:w="13"/><text x="39.9805%" y="47.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (117 samples, 0.33%)</title><rect x="39.7673%" y="101" width="0.3312%" height="15" fill="rgb(218,138,4)" fg:x="14047" fg:w="117"/><text x="40.0173%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (117 samples, 0.33%)</title><rect x="39.7673%" y="85" width="0.3312%" height="15" fill="rgb(250,191,14)" fg:x="14047" fg:w="117"/><text x="40.0173%" y="95.50"></text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::search_chunk (1,612 samples, 4.56%)</title><rect x="36.4663%" y="117" width="4.5636%" height="15" fill="rgb(239,60,40)" fg:x="12881" fg:w="1612"/><text x="36.7163%" y="127.50">memch..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (329 samples, 0.93%)</title><rect x="40.0985%" y="101" width="0.9314%" height="15" fill="rgb(206,27,48)" fg:x="14164" fg:w="329"/><text x="40.3485%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (329 samples, 0.93%)</title><rect x="40.0985%" y="85" width="0.9314%" height="15" fill="rgb(225,35,8)" fg:x="14164" fg:w="329"/><text x="40.3485%" y="95.50"></text></g><g><title>memchr::vector::Vector::movemask_will_have_non_zero (7 samples, 0.02%)</title><rect x="41.0299%" y="117" width="0.0198%" height="15" fill="rgb(250,213,24)" fg:x="14493" fg:w="7"/><text x="41.2799%" y="127.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::movemask (7 samples, 0.02%)</title><rect x="41.0299%" y="101" width="0.0198%" height="15" fill="rgb(247,123,22)" fg:x="14493" fg:w="7"/><text x="41.2799%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.02%)</title><rect x="41.0299%" y="85" width="0.0198%" height="15" fill="rgb(231,138,38)" fg:x="14493" fg:w="7"/><text x="41.2799%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (11 samples, 0.03%)</title><rect x="41.0497%" y="101" width="0.0311%" height="15" fill="rgb(231,145,46)" fg:x="14500" fg:w="11"/><text x="41.2997%" y="111.50"></text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::cmpeq (32 samples, 0.09%)</title><rect x="41.0497%" y="117" width="0.0906%" height="15" fill="rgb(251,118,11)" fg:x="14500" fg:w="32"/><text x="41.2997%" y="127.50"></text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (21 samples, 0.06%)</title><rect x="41.0809%" y="101" width="0.0595%" height="15" fill="rgb(217,147,25)" fg:x="14511" fg:w="21"/><text x="41.3309%" y="111.50"></text></g><g><title>memchr::memchr::memchr (3,729 samples, 10.56%)</title><rect x="30.6090%" y="261" width="10.5569%" height="15" fill="rgb(247,81,37)" fg:x="10812" fg:w="3729"/><text x="30.8590%" y="271.50">memchr::memchr:..</text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (3,729 samples, 10.56%)</title><rect x="30.6090%" y="245" width="10.5569%" height="15" fill="rgb(209,12,38)" fg:x="10812" fg:w="3729"/><text x="30.8590%" y="255.50">memchr::arch::g..</text></g><g><title>memchr::memchr::memchr::_{{closure}} (3,309 samples, 9.37%)</title><rect x="31.7980%" y="229" width="9.3678%" height="15" fill="rgb(227,1,9)" fg:x="11232" fg:w="3309"/><text x="32.0480%" y="239.50">memchr::memch..</text></g><g><title>memchr::memchr::memchr_raw (3,309 samples, 9.37%)</title><rect x="31.7980%" y="213" width="9.3678%" height="15" fill="rgb(248,47,43)" fg:x="11232" fg:w="3309"/><text x="32.0480%" y="223.50">memchr::memch..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw (3,309 samples, 9.37%)</title><rect x="31.7980%" y="197" width="9.3678%" height="15" fill="rgb(221,10,30)" fg:x="11232" fg:w="3309"/><text x="32.0480%" y="207.50">memchr::arch:..</text></g><g><title>memchr::arch::x86_64::memchr::memchr_raw::find_sse2 (2,990 samples, 8.46%)</title><rect x="32.7011%" y="181" width="8.4647%" height="15" fill="rgb(210,229,1)" fg:x="11551" fg:w="2990"/><text x="32.9511%" y="191.50">memchr::arch..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw (2,133 samples, 6.04%)</title><rect x="35.1273%" y="165" width="6.0386%" height="15" fill="rgb(222,148,37)" fg:x="12408" fg:w="2133"/><text x="35.3773%" y="175.50">memchr::..</text></g><g><title>memchr::arch::x86_64::sse2::memchr::One::find_raw_impl (1,840 samples, 5.21%)</title><rect x="35.9567%" y="149" width="5.2091%" height="15" fill="rgb(234,67,33)" fg:x="12701" fg:w="1840"/><text x="36.2067%" y="159.50">memchr..</text></g><g><title>memchr::arch::generic::memchr::One&lt;V&gt;::find_raw (1,840 samples, 5.21%)</title><rect x="35.9567%" y="133" width="5.2091%" height="15" fill="rgb(247,98,35)" fg:x="12701" fg:w="1840"/><text x="36.2067%" y="143.50">memchr..</text></g><g><title>memchr::vector::x86sse2::&lt;impl memchr::vector::Vector for core::core_arch::x86::__m128i&gt;::or (9 samples, 0.03%)</title><rect x="41.1403%" y="117" width="0.0255%" height="15" fill="rgb(247,138,52)" fg:x="14532" fg:w="9"/><text x="41.3903%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_or_si128 (9 samples, 0.03%)</title><rect x="41.1403%" y="101" width="0.0255%" height="15" fill="rgb(213,79,30)" fg:x="14532" fg:w="9"/><text x="41.3903%" y="111.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (728 samples, 2.06%)</title><rect x="41.1658%" y="261" width="2.0610%" height="15" fill="rgb(246,177,23)" fg:x="14541" fg:w="728"/><text x="41.4158%" y="271.50">s..</text></g><g><title>rs_1brc::process_chunk::_{{closure}} (728 samples, 2.06%)</title><rect x="41.1658%" y="245" width="2.0610%" height="15" fill="rgb(230,62,27)" fg:x="14541" fg:w="728"/><text x="41.4158%" y="255.50">r..</text></g><g><title>core::hash::Hasher::write_length_prefix (18 samples, 0.05%)</title><rect x="46.8222%" y="149" width="0.0510%" height="15" fill="rgb(216,154,8)" fg:x="16539" fg:w="18"/><text x="47.0722%" y="159.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (18 samples, 0.05%)</title><rect x="46.8222%" y="133" width="0.0510%" height="15" fill="rgb(244,35,45)" fg:x="16539" fg:w="18"/><text x="47.0722%" y="143.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (18 samples, 0.05%)</title><rect x="46.8222%" y="117" width="0.0510%" height="15" fill="rgb(251,115,12)" fg:x="16539" fg:w="18"/><text x="47.0722%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (18 samples, 0.05%)</title><rect x="46.8222%" y="101" width="0.0510%" height="15" fill="rgb(240,54,50)" fg:x="16539" fg:w="18"/><text x="47.0722%" y="111.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (239 samples, 0.68%)</title><rect x="48.7614%" y="117" width="0.6766%" height="15" fill="rgb(233,84,52)" fg:x="17224" fg:w="239"/><text x="49.0114%" y="127.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (239 samples, 0.68%)</title><rect x="48.7614%" y="101" width="0.6766%" height="15" fill="rgb(207,117,47)" fg:x="17224" fg:w="239"/><text x="49.0114%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (239 samples, 0.68%)</title><rect x="48.7614%" y="85" width="0.6766%" height="15" fill="rgb(249,43,39)" fg:x="17224" fg:w="239"/><text x="49.0114%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (239 samples, 0.68%)</title><rect x="48.7614%" y="69" width="0.6766%" height="15" fill="rgb(209,38,44)" fg:x="17224" fg:w="239"/><text x="49.0114%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (124 samples, 0.35%)</title><rect x="49.0870%" y="53" width="0.3510%" height="15" fill="rgb(236,212,23)" fg:x="17339" fg:w="124"/><text x="49.3370%" y="63.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (94 samples, 0.27%)</title><rect x="49.4380%" y="101" width="0.2661%" height="15" fill="rgb(242,79,21)" fg:x="17463" fg:w="94"/><text x="49.6880%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1,094 samples, 3.10%)</title><rect x="49.7042%" y="101" width="3.0971%" height="15" fill="rgb(211,96,35)" fg:x="17557" fg:w="1094"/><text x="49.9542%" y="111.50">cor..</text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write (2,226 samples, 6.30%)</title><rect x="46.8731%" y="133" width="6.3018%" height="15" fill="rgb(253,215,40)" fg:x="16557" fg:w="2226"/><text x="47.1231%" y="143.50">&lt;rustc_h..</text></g><g><title>rustc_hash::FxHasher::add_to_hash (1,320 samples, 3.74%)</title><rect x="49.4380%" y="117" width="3.7369%" height="15" fill="rgb(211,81,21)" fg:x="17463" fg:w="1320"/><text x="49.6880%" y="127.50">rust..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (132 samples, 0.37%)</title><rect x="52.8013%" y="101" width="0.3737%" height="15" fill="rgb(208,190,38)" fg:x="18651" fg:w="132"/><text x="53.0513%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (2,390 samples, 6.77%)</title><rect x="46.8222%" y="229" width="6.7661%" height="15" fill="rgb(235,213,38)" fg:x="16539" fg:w="2390"/><text x="47.0722%" y="239.50">hashbrown..</text></g><g><title>core::hash::BuildHasher::hash_one (2,390 samples, 6.77%)</title><rect x="46.8222%" y="213" width="6.7661%" height="15" fill="rgb(237,122,38)" fg:x="16539" fg:w="2390"/><text x="47.0722%" y="223.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,390 samples, 6.77%)</title><rect x="46.8222%" y="197" width="6.7661%" height="15" fill="rgb(244,218,35)" fg:x="16539" fg:w="2390"/><text x="47.0722%" y="207.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,390 samples, 6.77%)</title><rect x="46.8222%" y="181" width="6.7661%" height="15" fill="rgb(240,68,47)" fg:x="16539" fg:w="2390"/><text x="47.0722%" y="191.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2,390 samples, 6.77%)</title><rect x="46.8222%" y="165" width="6.7661%" height="15" fill="rgb(210,16,53)" fg:x="16539" fg:w="2390"/><text x="47.0722%" y="175.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2,372 samples, 6.72%)</title><rect x="46.8731%" y="149" width="6.7152%" height="15" fill="rgb(235,124,12)" fg:x="16557" fg:w="2372"/><text x="47.1231%" y="159.50">core::has..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (146 samples, 0.41%)</title><rect x="53.1750%" y="133" width="0.4133%" height="15" fill="rgb(224,169,11)" fg:x="18783" fg:w="146"/><text x="53.4250%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,370 samples, 3.88%)</title><rect x="57.2007%" y="197" width="3.8785%" height="15" fill="rgb(250,166,2)" fg:x="20205" fg:w="1370"/><text x="57.4507%" y="207.50">&lt;has..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,370 samples, 3.88%)</title><rect x="57.2007%" y="181" width="3.8785%" height="15" fill="rgb(242,216,29)" fg:x="20205" fg:w="1370"/><text x="57.4507%" y="191.50">hash..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1,122 samples, 3.18%)</title><rect x="57.9028%" y="165" width="3.1764%" height="15" fill="rgb(230,116,27)" fg:x="20453" fg:w="1122"/><text x="58.1528%" y="175.50">cor..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (572 samples, 1.62%)</title><rect x="61.0792%" y="181" width="1.6193%" height="15" fill="rgb(228,99,48)" fg:x="21575" fg:w="572"/><text x="61.3292%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (572 samples, 1.62%)</title><rect x="61.0792%" y="165" width="1.6193%" height="15" fill="rgb(253,11,6)" fg:x="21575" fg:w="572"/><text x="61.3292%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (572 samples, 1.62%)</title><rect x="61.0792%" y="149" width="1.6193%" height="15" fill="rgb(247,143,39)" fg:x="21575" fg:w="572"/><text x="61.3292%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (572 samples, 1.62%)</title><rect x="61.0792%" y="133" width="1.6193%" height="15" fill="rgb(236,97,10)" fg:x="21575" fg:w="572"/><text x="61.3292%" y="143.50"></text></g><g><title>[libc.so.6] (5,781 samples, 16.37%)</title><rect x="70.0337%" y="117" width="16.3661%" height="15" fill="rgb(233,208,19)" fg:x="24738" fg:w="5781"/><text x="70.2837%" y="127.50">[libc.so.6]</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,373 samples, 23.70%)</title><rect x="62.6985%" y="133" width="23.7041%" height="15" fill="rgb(216,164,2)" fg:x="22147" fg:w="8373"/><text x="62.9485%" y="143.50">&lt;[A] as core::slice::cmp::SlicePartial..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8,980 samples, 25.42%)</title><rect x="61.0792%" y="197" width="25.4225%" height="15" fill="rgb(220,129,5)" fg:x="21575" fg:w="8980"/><text x="61.3292%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{c..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (8,408 samples, 23.80%)</title><rect x="62.6985%" y="181" width="23.8032%" height="15" fill="rgb(242,17,10)" fg:x="22147" fg:w="8408"/><text x="62.9485%" y="191.50">hashbrown::rustc_entry::_&lt;impl hashbro..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,408 samples, 23.80%)</title><rect x="62.6985%" y="165" width="23.8032%" height="15" fill="rgb(242,107,0)" fg:x="22147" fg:w="8408"/><text x="62.9485%" y="175.50">core::cmp::impls::&lt;impl core::cmp::Par..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8,408 samples, 23.80%)</title><rect x="62.6985%" y="149" width="23.8032%" height="15" fill="rgb(251,28,31)" fg:x="22147" fg:w="8408"/><text x="62.9485%" y="159.50">core::slice::cmp::&lt;impl core::cmp::Par..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (35 samples, 0.10%)</title><rect x="86.4026%" y="133" width="0.0991%" height="15" fill="rgb(233,223,10)" fg:x="30520" fg:w="35"/><text x="86.6526%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (1,328 samples, 3.76%)</title><rect x="86.5017%" y="197" width="3.7596%" height="15" fill="rgb(215,21,27)" fg:x="30555" fg:w="1328"/><text x="86.7517%" y="207.50">hash..</text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.02%)</title><rect x="90.2613%" y="165" width="0.0226%" height="15" fill="rgb(232,23,21)" fg:x="31883" fg:w="8"/><text x="90.5113%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (543 samples, 1.54%)</title><rect x="90.2613%" y="197" width="1.5372%" height="15" fill="rgb(244,5,23)" fg:x="31883" fg:w="543"/><text x="90.5113%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (543 samples, 1.54%)</title><rect x="90.2613%" y="181" width="1.5372%" height="15" fill="rgb(226,81,46)" fg:x="31883" fg:w="543"/><text x="90.5113%" y="191.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (535 samples, 1.51%)</title><rect x="90.2840%" y="165" width="1.5146%" height="15" fill="rgb(247,70,30)" fg:x="31891" fg:w="535"/><text x="90.5340%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2,279 samples, 6.45%)</title><rect x="91.7985%" y="197" width="6.4519%" height="15" fill="rgb(212,68,19)" fg:x="32426" fg:w="2279"/><text x="92.0485%" y="207.50">hashbrow..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,279 samples, 6.45%)</title><rect x="91.7985%" y="181" width="6.4519%" height="15" fill="rgb(240,187,13)" fg:x="32426" fg:w="2279"/><text x="92.0485%" y="191.50">core::co..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (296 samples, 0.84%)</title><rect x="98.2504%" y="197" width="0.8380%" height="15" fill="rgb(223,113,26)" fg:x="34705" fg:w="296"/><text x="98.5004%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (296 samples, 0.84%)</title><rect x="98.2504%" y="181" width="0.8380%" height="15" fill="rgb(206,192,2)" fg:x="34705" fg:w="296"/><text x="98.5004%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (296 samples, 0.84%)</title><rect x="98.2504%" y="165" width="0.8380%" height="15" fill="rgb(241,108,4)" fg:x="34705" fg:w="296"/><text x="98.5004%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15,291 samples, 43.29%)</title><rect x="55.9267%" y="213" width="43.2891%" height="15" fill="rgb(247,173,49)" fg:x="19755" fg:w="15291"/><text x="56.1767%" y="223.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (45 samples, 0.13%)</title><rect x="99.0884%" y="197" width="0.1274%" height="15" fill="rgb(224,114,35)" fg:x="35001" fg:w="45"/><text x="99.3384%" y="207.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (19,798 samples, 56.05%)</title><rect x="43.2296%" y="245" width="56.0485%" height="15" fill="rgb(245,159,27)" fg:x="15270" fg:w="19798"/><text x="43.4796%" y="255.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16,139 samples, 45.69%)</title><rect x="53.5883%" y="229" width="45.6898%" height="15" fill="rgb(245,172,44)" fg:x="18929" fg:w="16139"/><text x="53.8383%" y="239.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (22 samples, 0.06%)</title><rect x="99.2158%" y="213" width="0.0623%" height="15" fill="rgb(236,23,11)" fg:x="35046" fg:w="22"/><text x="99.4658%" y="223.50"></text></g><g><title>std::panic::catch_unwind (35,226 samples, 99.73%)</title><rect x="0.0991%" y="389" width="99.7254%" height="15" fill="rgb(205,117,38)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (35,226 samples, 99.73%)</title><rect x="0.0991%" y="373" width="99.7254%" height="15" fill="rgb(237,72,25)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (35,226 samples, 99.73%)</title><rect x="0.0991%" y="357" width="99.7254%" height="15" fill="rgb(244,70,9)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="367.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35,226 samples, 99.73%)</title><rect x="0.0991%" y="341" width="99.7254%" height="15" fill="rgb(217,125,39)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="351.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (35,226 samples, 99.73%)</title><rect x="0.0991%" y="325" width="99.7254%" height="15" fill="rgb(235,36,10)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="335.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35,226 samples, 99.73%)</title><rect x="0.0991%" y="309" width="99.7254%" height="15" fill="rgb(251,123,47)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="319.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rs_1brc::main::_{{closure}}::_{{closure}} (35,226 samples, 99.73%)</title><rect x="0.0991%" y="293" width="99.7254%" height="15" fill="rgb(221,13,13)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="303.50">rs_1brc::main::_{{closure}}::_{{closure}}</text></g><g><title>rs_1brc::process_chunk (35,226 samples, 99.73%)</title><rect x="0.0991%" y="277" width="99.7254%" height="15" fill="rgb(238,131,9)" fg:x="35" fg:w="35226"/><text x="0.3491%" y="287.50">rs_1brc::process_chunk</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (19,992 samples, 56.60%)</title><rect x="43.2268%" y="261" width="56.5977%" height="15" fill="rgb(211,50,8)" fg:x="15269" fg:w="19992"/><text x="43.4768%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (192 samples, 0.54%)</title><rect x="99.2809%" y="245" width="0.5436%" height="15" fill="rgb(245,182,24)" fg:x="35069" fg:w="192"/><text x="99.5309%" y="255.50"></text></g><g><title>malloc (9 samples, 0.03%)</title><rect x="99.8245%" y="357" width="0.0255%" height="15" fill="rgb(242,14,37)" fg:x="35261" fg:w="9"/><text x="100.0745%" y="367.50"></text></g><g><title>[libc.so.6] (9 samples, 0.03%)</title><rect x="99.8245%" y="341" width="0.0255%" height="15" fill="rgb(246,228,12)" fg:x="35261" fg:w="9"/><text x="100.0745%" y="351.50"></text></g><g><title>[libc.so.6] (6 samples, 0.02%)</title><rect x="99.8330%" y="325" width="0.0170%" height="15" fill="rgb(213,55,15)" fg:x="35264" fg:w="6"/><text x="100.0830%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.01%)</title><rect x="99.8386%" y="309" width="0.0113%" height="15" fill="rgb(209,9,3)" fg:x="35266" fg:w="4"/><text x="100.0886%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (35,238 samples, 99.76%)</title><rect x="0.0991%" y="421" width="99.7594%" height="15" fill="rgb(230,59,30)" fg:x="35" fg:w="35238"/><text x="0.3491%" y="431.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (35,238 samples, 99.76%)</title><rect x="0.0991%" y="405" width="99.7594%" height="15" fill="rgb(209,121,21)" fg:x="35" fg:w="35238"/><text x="0.3491%" y="415.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::sys::pal::unix::thread::guard::current (12 samples, 0.03%)</title><rect x="99.8245%" y="389" width="0.0340%" height="15" fill="rgb(220,109,13)" fg:x="35261" fg:w="12"/><text x="100.0745%" y="399.50"></text></g><g><title>pthread_getattr_np (12 samples, 0.03%)</title><rect x="99.8245%" y="373" width="0.0340%" height="15" fill="rgb(232,18,1)" fg:x="35261" fg:w="12"/><text x="100.0745%" y="383.50"></text></g><g><title>__mmap (12 samples, 0.03%)</title><rect x="99.8584%" y="405" width="0.0340%" height="15" fill="rgb(215,41,42)" fg:x="35273" fg:w="12"/><text x="100.1084%" y="415.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="99.8584%" y="389" width="0.0340%" height="15" fill="rgb(224,123,36)" fg:x="35273" fg:w="12"/><text x="100.1084%" y="399.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="99.8584%" y="373" width="0.0340%" height="15" fill="rgb(240,125,3)" fg:x="35273" fg:w="12"/><text x="100.1084%" y="383.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="99.8584%" y="357" width="0.0340%" height="15" fill="rgb(205,98,50)" fg:x="35273" fg:w="12"/><text x="100.1084%" y="367.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="99.8613%" y="341" width="0.0311%" height="15" fill="rgb(205,185,37)" fg:x="35274" fg:w="11"/><text x="100.1113%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.8754%" y="325" width="0.0170%" height="15" fill="rgb(238,207,15)" fg:x="35279" fg:w="6"/><text x="100.1254%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.8783%" y="309" width="0.0142%" height="15" fill="rgb(213,199,42)" fg:x="35280" fg:w="5"/><text x="100.1283%" y="319.50"></text></g><g><title>[libc.so.6] (35,292 samples, 99.91%)</title><rect x="0.0198%" y="469" width="99.9122%" height="15" fill="rgb(235,201,11)" fg:x="7" fg:w="35292"/><text x="0.2698%" y="479.50">[libc.so.6]</text></g><g><title>[libc.so.6] (35,292 samples, 99.91%)</title><rect x="0.0198%" y="453" width="99.9122%" height="15" fill="rgb(207,46,11)" fg:x="7" fg:w="35292"/><text x="0.2698%" y="463.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (35,264 samples, 99.83%)</title><rect x="0.0991%" y="437" width="99.8330%" height="15" fill="rgb(241,35,35)" fg:x="35" fg:w="35264"/><text x="0.3491%" y="447.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (26 samples, 0.07%)</title><rect x="99.8584%" y="421" width="0.0736%" height="15" fill="rgb(243,32,47)" fg:x="35273" fg:w="26"/><text x="100.1084%" y="431.50"></text></g><g><title>sigaltstack (14 samples, 0.04%)</title><rect x="99.8924%" y="405" width="0.0396%" height="15" fill="rgb(247,202,23)" fg:x="35285" fg:w="14"/><text x="100.1424%" y="415.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="99.8924%" y="389" width="0.0396%" height="15" fill="rgb(219,102,11)" fg:x="35285" fg:w="14"/><text x="100.1424%" y="399.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="99.8924%" y="373" width="0.0396%" height="15" fill="rgb(243,110,44)" fg:x="35285" fg:w="14"/><text x="100.1424%" y="383.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="99.8924%" y="357" width="0.0396%" height="15" fill="rgb(222,74,54)" fg:x="35285" fg:w="14"/><text x="100.1424%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="99.9207%" y="341" width="0.0113%" height="15" fill="rgb(216,99,12)" fg:x="35295" fg:w="4"/><text x="100.1707%" y="351.50"></text></g><g><title>[unknown] (17 samples, 0.05%)</title><rect x="99.9321%" y="469" width="0.0481%" height="15" fill="rgb(226,22,26)" fg:x="35299" fg:w="17"/><text x="100.1821%" y="479.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (6 samples, 0.02%)</title><rect x="99.9802%" y="389" width="0.0170%" height="15" fill="rgb(217,163,10)" fg:x="35316" fg:w="6"/><text x="100.2302%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.02%)</title><rect x="99.9802%" y="373" width="0.0170%" height="15" fill="rgb(213,25,53)" fg:x="35316" fg:w="6"/><text x="100.2302%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.02%)</title><rect x="99.9802%" y="357" width="0.0170%" height="15" fill="rgb(252,105,26)" fg:x="35316" fg:w="6"/><text x="100.2302%" y="367.50"></text></g><g><title>rs_1brc::main (6 samples, 0.02%)</title><rect x="99.9802%" y="341" width="0.0170%" height="15" fill="rgb(220,39,43)" fg:x="35316" fg:w="6"/><text x="100.2302%" y="351.50"></text></g><g><title>all (35,323 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="35323"/><text x="0.2500%" y="511.50"></text></g><g><title>rs-1brc (35,323 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="35323"/><text x="0.2500%" y="495.50">rs-1brc</text></g><g><title>_start (7 samples, 0.02%)</title><rect x="99.9802%" y="469" width="0.0198%" height="15" fill="rgb(223,20,43)" fg:x="35316" fg:w="7"/><text x="100.2302%" y="479.50"></text></g><g><title>__libc_start_main (7 samples, 0.02%)</title><rect x="99.9802%" y="453" width="0.0198%" height="15" fill="rgb(229,81,49)" fg:x="35316" fg:w="7"/><text x="100.2302%" y="463.50"></text></g><g><title>[libc.so.6] (7 samples, 0.02%)</title><rect x="99.9802%" y="437" width="0.0198%" height="15" fill="rgb(236,28,36)" fg:x="35316" fg:w="7"/><text x="100.2302%" y="447.50"></text></g><g><title>main (7 samples, 0.02%)</title><rect x="99.9802%" y="421" width="0.0198%" height="15" fill="rgb(249,185,26)" fg:x="35316" fg:w="7"/><text x="100.2302%" y="431.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.02%)</title><rect x="99.9802%" y="405" width="0.0198%" height="15" fill="rgb(249,174,33)" fg:x="35316" fg:w="7"/><text x="100.2302%" y="415.50"></text></g></svg></svg>